ARM GAS  /tmp/ccgf5nMS.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.Error_Handler,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	Error_Handler:
  23              	.LFB42:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * @file    GPIO/GPIO_IOToggle/Src/main.c
   4:Src/main.c    ****   * @author  MCD Application Team
   5:Src/main.c    ****   * @brief   This example describes how to configure and use GPIOs through
   6:Src/main.c    ****   *          the STM32F0xx HAL API.
   7:Src/main.c    ****   ******************************************************************************
   8:Src/main.c    ****   * @attention
   9:Src/main.c    ****   *
  10:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
  11:Src/main.c    ****   * All rights reserved.</center></h2>
  12:Src/main.c    ****   *
  13:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  14:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  15:Src/main.c    ****   * License. You may obtain a copy of the License at:
  16:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  17:Src/main.c    ****   *
  18:Src/main.c    ****   ******************************************************************************
  19:Src/main.c    ****   */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /** @addtogroup STM32F0xx_HAL_Examples
  25:Src/main.c    ****   * @{
  26:Src/main.c    ****   */
  27:Src/main.c    **** 
  28:Src/main.c    **** /** @addtogroup GPIO_IOToggle
  29:Src/main.c    ****   * @{
  30:Src/main.c    ****   */
  31:Src/main.c    **** 
  32:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  33:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  34:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
ARM GAS  /tmp/ccgf5nMS.s 			page 2


  35:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  36:Src/main.c    **** static GPIO_InitTypeDef  GPIO_InitStruct;
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  39:Src/main.c    **** static void SystemClock_Config(void);
  40:Src/main.c    **** static void Error_Handler(void);
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private functions ---------------------------------------------------------*/
  43:Src/main.c    **** 
  44:Src/main.c    **** /**
  45:Src/main.c    ****   * @brief  Main program
  46:Src/main.c    ****   * @param  None
  47:Src/main.c    ****   * @retval None
  48:Src/main.c    ****   */
  49:Src/main.c    **** int main(void)
  50:Src/main.c    **** {
  51:Src/main.c    ****   /* This sample code shows how to use GPIO HAL API to toggle LED2 IOs
  52:Src/main.c    ****     in an infinite loop. */
  53:Src/main.c    **** 
  54:Src/main.c    ****   /* STM32F0xx HAL library initialization:
  55:Src/main.c    ****        - Configure the Flash prefetch
  56:Src/main.c    ****        - Systick timer is configured by default as source of time base, but user 
  57:Src/main.c    ****          can eventually implement his proper time base source (a general purpose 
  58:Src/main.c    ****          timer for example or other time source), keeping in mind that Time base 
  59:Src/main.c    ****          duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
  60:Src/main.c    ****          handled in milliseconds basis.
  61:Src/main.c    ****        - Low Level Initialization
  62:Src/main.c    ****      */
  63:Src/main.c    ****   HAL_Init();
  64:Src/main.c    **** 
  65:Src/main.c    ****   /* Configure the system clock to 48 MHz */
  66:Src/main.c    ****   SystemClock_Config();
  67:Src/main.c    ****   
  68:Src/main.c    ****   /* -1- Enable each GPIO Clock (to be able to program the configuration registers) */
  69:Src/main.c    ****   LED2_GPIO_CLK_ENABLE();
  70:Src/main.c    **** 
  71:Src/main.c    ****   /* -2- Configure IOs in output push-pull mode to drive external LEDs */
  72:Src/main.c    ****   GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  73:Src/main.c    ****   GPIO_InitStruct.Pull  = GPIO_PULLUP;
  74:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  75:Src/main.c    **** 
  76:Src/main.c    ****   GPIO_InitStruct.Pin = LED2_PIN;
  77:Src/main.c    ****   HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
  78:Src/main.c    ****  
  79:Src/main.c    ****   /* -3- Toggle IOs in an infinite loop */
  80:Src/main.c    ****   while (1)
  81:Src/main.c    ****   {
  82:Src/main.c    **** 	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET);
  83:Src/main.c    ****     	HAL_Delay(1000);
  84:Src/main.c    **** 	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET);
  85:Src/main.c    ****     	HAL_Delay(1000);
  86:Src/main.c    ****   }
  87:Src/main.c    **** }
  88:Src/main.c    **** 
  89:Src/main.c    **** /**
  90:Src/main.c    ****   * @brief  System Clock Configuration
  91:Src/main.c    ****   *         The system Clock is configured as follow : 
ARM GAS  /tmp/ccgf5nMS.s 			page 3


  92:Src/main.c    ****   *            System Clock source            = PLL (HSI48)
  93:Src/main.c    ****   *            SYSCLK(Hz)                     = 48000000
  94:Src/main.c    ****   *            HCLK(Hz)                       = 48000000
  95:Src/main.c    ****   *            AHB Prescaler                  = 1
  96:Src/main.c    ****   *            APB1 Prescaler                 = 1
  97:Src/main.c    ****   *            HSI Frequency(Hz)              = 48000000
  98:Src/main.c    ****   *            PREDIV                         = 2
  99:Src/main.c    ****   *            PLLMUL                         = 2
 100:Src/main.c    ****   *            Flash Latency(WS)              = 1
 101:Src/main.c    ****   * @param  None
 102:Src/main.c    ****   * @retval None
 103:Src/main.c    ****   */
 104:Src/main.c    **** static void SystemClock_Config(void)
 105:Src/main.c    **** {
 106:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 107:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 108:Src/main.c    ****   
 109:Src/main.c    ****   /* Select HSI48 Oscillator as PLL source */
 110:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 111:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 112:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 113:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 114:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 115:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 116:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 117:Src/main.c    ****   {
 118:Src/main.c    ****     Error_Handler();
 119:Src/main.c    ****   }
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers */
 122:Src/main.c    ****   RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 123:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 124:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 125:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 126:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 127:Src/main.c    ****   {
 128:Src/main.c    ****     Error_Handler();
 129:Src/main.c    ****   }
 130:Src/main.c    **** }
 131:Src/main.c    **** 
 132:Src/main.c    **** /**
 133:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 134:Src/main.c    ****   * @param  None
 135:Src/main.c    ****   * @retval None
 136:Src/main.c    ****   */
 137:Src/main.c    **** static void Error_Handler(void)
 138:Src/main.c    **** {
  25              		.loc 1 138 0
  26              		.cfi_startproc
  27              		@ Volatile: function does not return.
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.L2:
  32 0000 FEE7     		b	.L2
  33              		.cfi_endproc
  34              	.LFE42:
ARM GAS  /tmp/ccgf5nMS.s 			page 4


  36              		.section	.text.SystemClock_Config,"ax",%progbits
  37              		.align	1
  38              		.syntax unified
  39              		.code	16
  40              		.thumb_func
  41              		.fpu softvfp
  43              	SystemClock_Config:
  44              	.LFB41:
 105:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  45              		.loc 1 105 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 72
  48              		@ frame_needed = 0, uses_anonymous_args = 0
 105:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
  49              		.loc 1 105 0
  50 0000 00B5     		push	{lr}
  51              	.LCFI0:
  52              		.cfi_def_cfa_offset 4
  53              		.cfi_offset 14, -4
  54 0002 93B0     		sub	sp, sp, #76
  55              	.LCFI1:
  56              		.cfi_def_cfa_offset 80
 110:Src/main.c    ****   RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  57              		.loc 1 110 0
  58 0004 2023     		movs	r3, #32
  59 0006 0193     		str	r3, [sp, #4]
 111:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  60              		.loc 1 111 0
  61 0008 1F3B     		subs	r3, r3, #31
  62 000a 0993     		str	r3, [sp, #36]
 112:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
  63              		.loc 1 112 0
  64 000c 0222     		movs	r2, #2
  65 000e 0A92     		str	r2, [sp, #40]
 113:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  66              		.loc 1 113 0
  67 0010 C022     		movs	r2, #192
  68 0012 5202     		lsls	r2, r2, #9
  69 0014 0B92     		str	r2, [sp, #44]
 114:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  70              		.loc 1 114 0
  71 0016 0D93     		str	r3, [sp, #52]
 115:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
  72              		.loc 1 115 0
  73 0018 0023     		movs	r3, #0
  74 001a 0C93     		str	r3, [sp, #48]
 116:Src/main.c    ****   {
  75              		.loc 1 116 0
  76 001c 01A8     		add	r0, sp, #4
  77 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
  78              	.LVL0:
  79 0022 0028     		cmp	r0, #0
  80 0024 0ED1     		bne	.L6
 122:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  81              		.loc 1 122 0
  82 0026 0723     		movs	r3, #7
  83 0028 0E93     		str	r3, [sp, #56]
ARM GAS  /tmp/ccgf5nMS.s 			page 5


 123:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  84              		.loc 1 123 0
  85 002a 053B     		subs	r3, r3, #5
  86 002c 0F93     		str	r3, [sp, #60]
 124:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  87              		.loc 1 124 0
  88 002e 0023     		movs	r3, #0
  89 0030 1093     		str	r3, [sp, #64]
 125:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
  90              		.loc 1 125 0
  91 0032 1193     		str	r3, [sp, #68]
 126:Src/main.c    ****   {
  92              		.loc 1 126 0
  93 0034 0121     		movs	r1, #1
  94 0036 0EA8     		add	r0, sp, #56
  95 0038 FFF7FEFF 		bl	HAL_RCC_ClockConfig
  96              	.LVL1:
  97 003c 0028     		cmp	r0, #0
  98 003e 03D1     		bne	.L7
 130:Src/main.c    **** 
  99              		.loc 1 130 0
 100 0040 13B0     		add	sp, sp, #76
 101              		@ sp needed
 102 0042 00BD     		pop	{pc}
 103              	.L6:
 118:Src/main.c    ****   }
 104              		.loc 1 118 0
 105 0044 FFF7FEFF 		bl	Error_Handler
 106              	.LVL2:
 107              	.L7:
 128:Src/main.c    ****   }
 108              		.loc 1 128 0
 109 0048 FFF7FEFF 		bl	Error_Handler
 110              	.LVL3:
 111              		.cfi_endproc
 112              	.LFE41:
 114              		.section	.text.main,"ax",%progbits
 115              		.align	1
 116              		.global	main
 117              		.syntax unified
 118              		.code	16
 119              		.thumb_func
 120              		.fpu softvfp
 122              	main:
 123              	.LFB40:
  50:Src/main.c    ****   /* This sample code shows how to use GPIO HAL API to toggle LED2 IOs
 124              		.loc 1 50 0
 125              		.cfi_startproc
 126              		@ Volatile: function does not return.
 127              		@ args = 0, pretend = 0, frame = 8
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129 0000 30B5     		push	{r4, r5, lr}
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 12
 132              		.cfi_offset 4, -12
 133              		.cfi_offset 5, -8
 134              		.cfi_offset 14, -4
ARM GAS  /tmp/ccgf5nMS.s 			page 6


 135 0002 83B0     		sub	sp, sp, #12
 136              	.LCFI3:
 137              		.cfi_def_cfa_offset 24
  63:Src/main.c    **** 
 138              		.loc 1 63 0
 139 0004 FFF7FEFF 		bl	HAL_Init
 140              	.LVL4:
  66:Src/main.c    ****   
 141              		.loc 1 66 0
 142 0008 FFF7FEFF 		bl	SystemClock_Config
 143              	.LVL5:
 144              	.LBB2:
  69:Src/main.c    **** 
 145              		.loc 1 69 0
 146 000c 154A     		ldr	r2, .L10
 147 000e 5169     		ldr	r1, [r2, #20]
 148 0010 8020     		movs	r0, #128
 149 0012 8002     		lsls	r0, r0, #10
 150 0014 0143     		orrs	r1, r0
 151 0016 5161     		str	r1, [r2, #20]
 152 0018 5369     		ldr	r3, [r2, #20]
 153 001a 0340     		ands	r3, r0
 154 001c 0193     		str	r3, [sp, #4]
 155 001e 019B     		ldr	r3, [sp, #4]
 156              	.LBE2:
  72:Src/main.c    ****   GPIO_InitStruct.Pull  = GPIO_PULLUP;
 157              		.loc 1 72 0
 158 0020 1149     		ldr	r1, .L10+4
 159 0022 0123     		movs	r3, #1
 160 0024 4B60     		str	r3, [r1, #4]
  73:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 161              		.loc 1 73 0
 162 0026 8B60     		str	r3, [r1, #8]
  74:Src/main.c    **** 
 163              		.loc 1 74 0
 164 0028 0233     		adds	r3, r3, #2
 165 002a CB60     		str	r3, [r1, #12]
  76:Src/main.c    ****   HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 166              		.loc 1 76 0
 167 002c 1D33     		adds	r3, r3, #29
 168 002e 0B60     		str	r3, [r1]
  77:Src/main.c    ****  
 169              		.loc 1 77 0
 170 0030 9020     		movs	r0, #144
 171 0032 C005     		lsls	r0, r0, #23
 172 0034 FFF7FEFF 		bl	HAL_GPIO_Init
 173              	.LVL6:
 174              	.L9:
  82:Src/main.c    ****     	HAL_Delay(1000);
 175              		.loc 1 82 0 discriminator 1
 176 0038 9025     		movs	r5, #144
 177 003a ED05     		lsls	r5, r5, #23
 178 003c 0022     		movs	r2, #0
 179 003e 2021     		movs	r1, #32
 180 0040 2800     		movs	r0, r5
 181 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 182              	.LVL7:
ARM GAS  /tmp/ccgf5nMS.s 			page 7


  83:Src/main.c    **** 	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET);
 183              		.loc 1 83 0 discriminator 1
 184 0046 FA24     		movs	r4, #250
 185 0048 A400     		lsls	r4, r4, #2
 186 004a 2000     		movs	r0, r4
 187 004c FFF7FEFF 		bl	HAL_Delay
 188              	.LVL8:
  84:Src/main.c    ****     	HAL_Delay(1000);
 189              		.loc 1 84 0 discriminator 1
 190 0050 0122     		movs	r2, #1
 191 0052 2021     		movs	r1, #32
 192 0054 2800     		movs	r0, r5
 193 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 194              	.LVL9:
  85:Src/main.c    ****   }
 195              		.loc 1 85 0 discriminator 1
 196 005a 2000     		movs	r0, r4
 197 005c FFF7FEFF 		bl	HAL_Delay
 198              	.LVL10:
 199 0060 EAE7     		b	.L9
 200              	.L11:
 201 0062 C046     		.align	2
 202              	.L10:
 203 0064 00100240 		.word	1073876992
 204 0068 00000000 		.word	.LANCHOR0
 205              		.cfi_endproc
 206              	.LFE40:
 208              		.section	.bss.GPIO_InitStruct,"aw",%nobits
 209              		.align	2
 210              		.set	.LANCHOR0,. + 0
 213              	GPIO_InitStruct:
 214 0000 00000000 		.space	20
 214      00000000 
 214      00000000 
 214      00000000 
 214      00000000 
 215              		.text
 216              	.Letext0:
 217              		.file 2 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_types.h"
 218              		.file 3 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 219              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 220              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f091xc.h"
 221              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 222              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 223              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 224              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
ARM GAS  /tmp/ccgf5nMS.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccgf5nMS.s:16     .text.Error_Handler:0000000000000000 $t
     /tmp/ccgf5nMS.s:22     .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccgf5nMS.s:37     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccgf5nMS.s:43     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccgf5nMS.s:115    .text.main:0000000000000000 $t
     /tmp/ccgf5nMS.s:122    .text.main:0000000000000000 main
     /tmp/ccgf5nMS.s:203    .text.main:0000000000000064 $d
     /tmp/ccgf5nMS.s:209    .bss.GPIO_InitStruct:0000000000000000 $d
     /tmp/ccgf5nMS.s:213    .bss.GPIO_InitStruct:0000000000000000 GPIO_InitStruct

UNDEFINED SYMBOLS
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_GPIO_Init
HAL_GPIO_WritePin
HAL_Delay
