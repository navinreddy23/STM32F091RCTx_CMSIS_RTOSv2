ARM GAS  /tmp/ccyt1kA6.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"tasks.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	prvTaskIsTaskSuspended:
  23              	.LFB12:
  24              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
ARM GAS  /tmp/ccyt1kA6.s 			page 2


  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
ARM GAS  /tmp/ccyt1kA6.s 			page 3


  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
ARM GAS  /tmp/ccyt1kA6.s 			page 4


 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
ARM GAS  /tmp/ccyt1kA6.s 			page 5


 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
ARM GAS  /tmp/ccyt1kA6.s 			page 6


 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
ARM GAS  /tmp/ccyt1kA6.s 			page 7


 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
ARM GAS  /tmp/ccyt1kA6.s 			page 8


 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
ARM GAS  /tmp/ccyt1kA6.s 			page 9


 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
ARM GAS  /tmp/ccyt1kA6.s 			page 10


 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
ARM GAS  /tmp/ccyt1kA6.s 			page 11


 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
ARM GAS  /tmp/ccyt1kA6.s 			page 12


 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
ARM GAS  /tmp/ccyt1kA6.s 			page 13


 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccyt1kA6.s 			page 14


 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
ARM GAS  /tmp/ccyt1kA6.s 			page 15


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
ARM GAS  /tmp/ccyt1kA6.s 			page 16


 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
ARM GAS  /tmp/ccyt1kA6.s 			page 17


 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccyt1kA6.s 			page 18


 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccyt1kA6.s 			page 19


1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccyt1kA6.s 			page 20


1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
ARM GAS  /tmp/ccyt1kA6.s 			page 21


1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccyt1kA6.s 			page 22


1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 23


1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccyt1kA6.s 			page 24


1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 25


1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 26


1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 27


1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccyt1kA6.s 			page 28


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccyt1kA6.s 			page 29


1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
ARM GAS  /tmp/ccyt1kA6.s 			page 30


1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
ARM GAS  /tmp/ccyt1kA6.s 			page 31


1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  25              		.loc 1 1726 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 0
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29              		@ link register save eliminated.
  30              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  31              		.loc 1 1734 0
  32 0000 0028     		cmp	r0, #0
  33 0002 0BD0     		beq	.L8
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 32


1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  34              		.loc 1 1737 0
  35 0004 094B     		ldr	r3, .L9
  36 0006 4269     		ldr	r2, [r0, #20]
  37 0008 9A42     		cmp	r2, r3
  38 000a 09D1     		bne	.L5
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  39              		.loc 1 1740 0
  40 000c 836A     		ldr	r3, [r0, #40]
  41 000e 084A     		ldr	r2, .L9+4
  42 0010 9342     		cmp	r3, r2
  43 0012 07D0     		beq	.L6
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  44              		.loc 1 1744 0
  45 0014 002B     		cmp	r3, #0
  46 0016 07D0     		beq	.L7
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1727 0
  48 0018 0020     		movs	r0, #0
  49              	.LVL1:
  50              	.L1:
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  51              		.loc 1 1764 0
  52              		@ sp needed
  53 001a 7047     		bx	lr
  54              	.LVL2:
  55              	.L8:
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56              		.loc 1 1734 0 discriminator 1
  57              		.syntax divided
  58              	@ 1734 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
  59 001c 72B6     		 cpsid i 
ARM GAS  /tmp/ccyt1kA6.s 			page 33


  60              	@ 0 "" 2
  61              		.thumb
  62              		.syntax unified
  63              	.L3:
  64 001e FEE7     		b	.L3
  65              	.L5:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  66              		.loc 1 1727 0
  67 0020 0020     		movs	r0, #0
  68              	.LVL3:
  69 0022 FAE7     		b	.L1
  70              	.LVL4:
  71              	.L6:
  72 0024 0020     		movs	r0, #0
  73              	.LVL5:
  74 0026 F8E7     		b	.L1
  75              	.LVL6:
  76              	.L7:
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
  77              		.loc 1 1746 0
  78 0028 0120     		movs	r0, #1
  79              	.LVL7:
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  80              		.loc 1 1763 0
  81 002a F6E7     		b	.L1
  82              	.L10:
  83              		.align	2
  84              	.L9:
  85 002c 00000000 		.word	.LANCHOR0
  86 0030 00000000 		.word	.LANCHOR1
  87              		.cfi_endproc
  88              	.LFE12:
  90              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  91              		.align	1
  92              		.syntax unified
  93              		.code	16
  94              		.thumb_func
  95              		.fpu softvfp
  97              	prvTaskCheckFreeStackSpace:
  98              	.LFB42:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccyt1kA6.s 			page 34


1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
ARM GAS  /tmp/ccyt1kA6.s 			page 35


1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
ARM GAS  /tmp/ccyt1kA6.s 			page 36


1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccyt1kA6.s 			page 37


1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
ARM GAS  /tmp/ccyt1kA6.s 			page 38


2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 39


2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
ARM GAS  /tmp/ccyt1kA6.s 			page 40


2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccyt1kA6.s 			page 41


2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
ARM GAS  /tmp/ccyt1kA6.s 			page 42


2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
ARM GAS  /tmp/ccyt1kA6.s 			page 43


2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
ARM GAS  /tmp/ccyt1kA6.s 			page 44


2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccyt1kA6.s 			page 45


2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 46


2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
ARM GAS  /tmp/ccyt1kA6.s 			page 47


2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 48


2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
ARM GAS  /tmp/ccyt1kA6.s 			page 49


2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 50


2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 51


2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
ARM GAS  /tmp/ccyt1kA6.s 			page 52


2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
ARM GAS  /tmp/ccyt1kA6.s 			page 53


2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
ARM GAS  /tmp/ccyt1kA6.s 			page 54


2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
ARM GAS  /tmp/ccyt1kA6.s 			page 55


2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
ARM GAS  /tmp/ccyt1kA6.s 			page 56


3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
ARM GAS  /tmp/ccyt1kA6.s 			page 57


3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
ARM GAS  /tmp/ccyt1kA6.s 			page 58


3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 59


3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccyt1kA6.s 			page 60


3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccyt1kA6.s 			page 61


3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
ARM GAS  /tmp/ccyt1kA6.s 			page 62


3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
ARM GAS  /tmp/ccyt1kA6.s 			page 63


3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/ccyt1kA6.s 			page 64


3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  /tmp/ccyt1kA6.s 			page 65


3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
ARM GAS  /tmp/ccyt1kA6.s 			page 66


3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  99              		.loc 1 3623 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              		@ link register save eliminated.
 104              	.LVL8:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 105              		.loc 1 3624 0
 106 0000 0023     		movs	r3, #0
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 107              		.loc 1 3626 0
 108 0002 01E0     		b	.L12
 109              	.LVL9:
 110              	.L13:
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 111              		.loc 1 3628 0
 112 0004 0130     		adds	r0, r0, #1
 113              	.LVL10:
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 114              		.loc 1 3629 0
 115 0006 0133     		adds	r3, r3, #1
 116              	.LVL11:
 117              	.L12:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 118              		.loc 1 3626 0
 119 0008 0278     		ldrb	r2, [r0]
 120 000a A52A     		cmp	r2, #165
 121 000c FAD0     		beq	.L13
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 122              		.loc 1 3632 0
 123 000e 9B08     		lsrs	r3, r3, #2
 124              	.LVL12:
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
 125              		.loc 1 3634 0
ARM GAS  /tmp/ccyt1kA6.s 			page 67


 126 0010 98B2     		uxth	r0, r3
 127              	.LVL13:
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 128              		.loc 1 3635 0
 129              		@ sp needed
 130 0012 7047     		bx	lr
 131              		.cfi_endproc
 132              	.LFE42:
 134              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 135              		.align	1
 136              		.syntax unified
 137              		.code	16
 138              		.thumb_func
 139              		.fpu softvfp
 141              	prvResetNextTaskUnblockTime:
 142              	.LFB45:
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 68


3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 143              		.loc 1 3725 0
 144              		.cfi_startproc
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 147              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
ARM GAS  /tmp/ccyt1kA6.s 			page 69


 148              		.loc 1 3728 0
 149 0000 084B     		ldr	r3, .L18
 150 0002 1B68     		ldr	r3, [r3]
 151 0004 1B68     		ldr	r3, [r3]
 152 0006 002B     		cmp	r3, #0
 153 0008 07D0     		beq	.L17
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 154              		.loc 1 3742 0
 155 000a 064B     		ldr	r3, .L18
 156 000c 1B68     		ldr	r3, [r3]
 157 000e DB68     		ldr	r3, [r3, #12]
 158 0010 DB68     		ldr	r3, [r3, #12]
 159              	.LVL14:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 160              		.loc 1 3743 0
 161 0012 5A68     		ldr	r2, [r3, #4]
 162 0014 044B     		ldr	r3, .L18+4
 163              	.LVL15:
 164 0016 1A60     		str	r2, [r3]
 165              	.L14:
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 166              		.loc 1 3745 0
 167              		@ sp needed
 168 0018 7047     		bx	lr
 169              	.L17:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 170              		.loc 1 3734 0
 171 001a 034B     		ldr	r3, .L18+4
 172 001c 0122     		movs	r2, #1
 173 001e 5242     		rsbs	r2, r2, #0
 174 0020 1A60     		str	r2, [r3]
 175 0022 F9E7     		b	.L14
 176              	.L19:
 177              		.align	2
 178              	.L18:
 179 0024 00000000 		.word	.LANCHOR2
 180 0028 00000000 		.word	.LANCHOR3
 181              		.cfi_endproc
 182              	.LFE45:
 184              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 185              		.align	1
 186              		.syntax unified
 187              		.code	16
ARM GAS  /tmp/ccyt1kA6.s 			page 70


 188              		.thumb_func
 189              		.fpu softvfp
 191              	prvInitialiseNewTask:
 192              	.LFB2:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 193              		.loc 1 825 0
 194              		.cfi_startproc
 195              		@ args = 16, pretend = 0, frame = 8
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197              	.LVL16:
 198 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 199              	.LCFI0:
 200              		.cfi_def_cfa_offset 20
 201              		.cfi_offset 4, -20
 202              		.cfi_offset 5, -16
 203              		.cfi_offset 6, -12
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 C646     		mov	lr, r8
 207 0004 00B5     		push	{lr}
 208              	.LCFI1:
 209              		.cfi_def_cfa_offset 24
 210              		.cfi_offset 8, -24
 211 0006 82B0     		sub	sp, sp, #8
 212              	.LCFI2:
 213              		.cfi_def_cfa_offset 32
 214 0008 0090     		str	r0, [sp]
 215 000a 0F00     		movs	r7, r1
 216 000c 1500     		movs	r5, r2
 217 000e 0193     		str	r3, [sp, #4]
 218 0010 089C     		ldr	r4, [sp, #32]
 219 0012 0A9E     		ldr	r6, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 220              		.loc 1 847 0
 221 0014 9200     		lsls	r2, r2, #2
 222              	.LVL17:
 223 0016 A521     		movs	r1, #165
 224              	.LVL18:
 225 0018 306B     		ldr	r0, [r6, #48]
 226              	.LVL19:
 227 001a FFF7FEFF 		bl	memset
 228              	.LVL20:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 229              		.loc 1 857 0
 230 001e 1E4B     		ldr	r3, .L27
 231 0020 EB18     		adds	r3, r5, r3
 232 0022 9B00     		lsls	r3, r3, #2
 233 0024 326B     		ldr	r2, [r6, #48]
 234 0026 9446     		mov	ip, r2
 235 0028 6344     		add	r3, r3, ip
 236              	.LVL21:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237              		.loc 1 858 0
 238 002a 0722     		movs	r2, #7
 239 002c 9343     		bics	r3, r2
 240              	.LVL22:
 241 002e 9846     		mov	r8, r3
ARM GAS  /tmp/ccyt1kA6.s 			page 71


 242              	.LVL23:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 243              		.loc 1 885 0
 244 0030 0023     		movs	r3, #0
 245              	.LVL24:
 246              	.L21:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 247              		.loc 1 885 0 is_stmt 0 discriminator 1
 248 0032 0F2B     		cmp	r3, #15
 249 0034 09D8     		bhi	.L22
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250              		.loc 1 887 0 is_stmt 1
 251 0036 F918     		adds	r1, r7, r3
 252 0038 0878     		ldrb	r0, [r1]
 253 003a F218     		adds	r2, r6, r3
 254 003c 3432     		adds	r2, r2, #52
 255 003e 1070     		strb	r0, [r2]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 256              		.loc 1 892 0
 257 0040 0A78     		ldrb	r2, [r1]
 258 0042 002A     		cmp	r2, #0
 259 0044 01D0     		beq	.L22
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 260              		.loc 1 885 0 discriminator 2
 261 0046 0133     		adds	r3, r3, #1
 262              	.LVL25:
 263 0048 F3E7     		b	.L21
 264              	.L22:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 265              		.loc 1 904 0
 266 004a 4323     		movs	r3, #67
 267              	.LVL26:
 268 004c 0022     		movs	r2, #0
 269 004e F254     		strb	r2, [r6, r3]
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 270              		.loc 1 908 0
 271 0050 372C     		cmp	r4, #55
 272 0052 00D9     		bls	.L24
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 273              		.loc 1 910 0
 274 0054 3724     		movs	r4, #55
 275              	.L24:
 276              	.LVL27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 277              		.loc 1 917 0
 278 0056 F462     		str	r4, [r6, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 279              		.loc 1 920 0
 280 0058 F464     		str	r4, [r6, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 281              		.loc 1 921 0
 282 005a 0025     		movs	r5, #0
 283              	.LVL28:
 284 005c 3565     		str	r5, [r6, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 285              		.loc 1 925 0
 286 005e 301D     		adds	r0, r6, #4
ARM GAS  /tmp/ccyt1kA6.s 			page 72


 287 0060 FFF7FEFF 		bl	vListInitialiseItem
 288              	.LVL29:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 289              		.loc 1 926 0
 290 0064 3000     		movs	r0, r6
 291 0066 1830     		adds	r0, r0, #24
 292 0068 FFF7FEFF 		bl	vListInitialiseItem
 293              	.LVL30:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 294              		.loc 1 930 0
 295 006c 3661     		str	r6, [r6, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 296              		.loc 1 933 0
 297 006e 3823     		movs	r3, #56
 298 0070 1C1B     		subs	r4, r3, r4
 299              	.LVL31:
 300 0072 B461     		str	r4, [r6, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301              		.loc 1 934 0
 302 0074 7662     		str	r6, [r6, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 303              		.loc 1 976 0
 304 0076 7565     		str	r5, [r6, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 305              		.loc 1 977 0
 306 0078 2033     		adds	r3, r3, #32
 307 007a F554     		strb	r5, [r6, r3]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 308              		.loc 1 1004 0
 309 007c 019A     		ldr	r2, [sp, #4]
 310 007e 0099     		ldr	r1, [sp]
 311 0080 4046     		mov	r0, r8
 312 0082 FFF7FEFF 		bl	pxPortInitialiseStack
 313              	.LVL32:
 314 0086 3060     		str	r0, [r6]
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 315              		.loc 1 1008 0
 316 0088 099B     		ldr	r3, [sp, #36]
 317 008a 002B     		cmp	r3, #0
 318 008c 00D0     		beq	.L20
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 319              		.loc 1 1012 0
 320 008e 1E60     		str	r6, [r3]
 321              	.L20:
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 322              		.loc 1 1018 0
 323 0090 02B0     		add	sp, sp, #8
 324              	.LVL33:
 325              		@ sp needed
 326              	.LVL34:
 327              	.LVL35:
 328 0092 04BC     		pop	{r2}
 329 0094 9046     		mov	r8, r2
 330 0096 F0BD     		pop	{r4, r5, r6, r7, pc}
 331              	.L28:
 332              		.align	2
 333              	.L27:
ARM GAS  /tmp/ccyt1kA6.s 			page 73


 334 0098 FFFFFF3F 		.word	1073741823
 335              		.cfi_endproc
 336              	.LFE2:
 338              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 339              		.align	1
 340              		.syntax unified
 341              		.code	16
 342              		.thumb_func
 343              		.fpu softvfp
 345              	prvInitialiseTaskLists:
 346              	.LFB38:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 347              		.loc 1 3431 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351 0000 70B5     		push	{r4, r5, r6, lr}
 352              	.LCFI3:
 353              		.cfi_def_cfa_offset 16
 354              		.cfi_offset 4, -16
 355              		.cfi_offset 5, -12
 356              		.cfi_offset 6, -8
 357              		.cfi_offset 14, -4
 358              	.LVL36:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 359              		.loc 1 3434 0
 360 0002 0024     		movs	r4, #0
 361 0004 07E0     		b	.L30
 362              	.LVL37:
 363              	.L31:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 364              		.loc 1 3436 0 discriminator 3
 365 0006 A300     		lsls	r3, r4, #2
 366 0008 1B19     		adds	r3, r3, r4
 367 000a 9800     		lsls	r0, r3, #2
 368 000c 0E4B     		ldr	r3, .L32
 369 000e C018     		adds	r0, r0, r3
 370 0010 FFF7FEFF 		bl	vListInitialise
 371              	.LVL38:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 372              		.loc 1 3434 0 discriminator 3
 373 0014 0134     		adds	r4, r4, #1
 374              	.LVL39:
 375              	.L30:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 376              		.loc 1 3434 0 is_stmt 0 discriminator 1
 377 0016 372C     		cmp	r4, #55
 378 0018 F5D9     		bls	.L31
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 379              		.loc 1 3439 0 is_stmt 1
 380 001a 0C4D     		ldr	r5, .L32+4
 381 001c 2800     		movs	r0, r5
 382 001e FFF7FEFF 		bl	vListInitialise
 383              	.LVL40:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 384              		.loc 1 3440 0
 385 0022 0B4C     		ldr	r4, .L32+8
ARM GAS  /tmp/ccyt1kA6.s 			page 74


 386              	.LVL41:
 387 0024 2000     		movs	r0, r4
 388 0026 FFF7FEFF 		bl	vListInitialise
 389              	.LVL42:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390              		.loc 1 3441 0
 391 002a 0A48     		ldr	r0, .L32+12
 392 002c FFF7FEFF 		bl	vListInitialise
 393              	.LVL43:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 394              		.loc 1 3445 0
 395 0030 0948     		ldr	r0, .L32+16
 396 0032 FFF7FEFF 		bl	vListInitialise
 397              	.LVL44:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 398              		.loc 1 3451 0
 399 0036 0948     		ldr	r0, .L32+20
 400 0038 FFF7FEFF 		bl	vListInitialise
 401              	.LVL45:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 402              		.loc 1 3457 0
 403 003c 084B     		ldr	r3, .L32+24
 404 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 405              		.loc 1 3458 0
 406 0040 084B     		ldr	r3, .L32+28
 407 0042 1C60     		str	r4, [r3]
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 408              		.loc 1 3459 0
 409              		@ sp needed
 410 0044 70BD     		pop	{r4, r5, r6, pc}
 411              	.L33:
 412 0046 C046     		.align	2
 413              	.L32:
 414 0048 00000000 		.word	pxReadyTasksLists
 415 004c 00000000 		.word	.LANCHOR4
 416 0050 00000000 		.word	.LANCHOR5
 417 0054 00000000 		.word	.LANCHOR1
 418 0058 00000000 		.word	.LANCHOR6
 419 005c 00000000 		.word	.LANCHOR0
 420 0060 00000000 		.word	.LANCHOR2
 421 0064 00000000 		.word	.LANCHOR7
 422              		.cfi_endproc
 423              	.LFE38:
 425              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 426              		.align	1
 427              		.syntax unified
 428              		.code	16
 429              		.thumb_func
 430              		.fpu softvfp
 432              	prvAddNewTaskToReadyList:
 433              	.LFB3:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 434              		.loc 1 1022 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccyt1kA6.s 			page 75


 438              	.LVL46:
 439 0000 10B5     		push	{r4, lr}
 440              	.LCFI4:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 4, -8
 443              		.cfi_offset 14, -4
 444 0002 0400     		movs	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 445              		.loc 1 1025 0
 446 0004 FFF7FEFF 		bl	vPortEnterCritical
 447              	.LVL47:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 448              		.loc 1 1027 0
 449 0008 204A     		ldr	r2, .L42
 450 000a 1368     		ldr	r3, [r2]
 451 000c 0133     		adds	r3, r3, #1
 452 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 453              		.loc 1 1028 0
 454 0010 1F4B     		ldr	r3, .L42+4
 455 0012 1B68     		ldr	r3, [r3]
 456 0014 002B     		cmp	r3, #0
 457 0016 0CD0     		beq	.L39
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 458              		.loc 1 1051 0
 459 0018 1E4B     		ldr	r3, .L42+8
 460 001a 1B68     		ldr	r3, [r3]
 461 001c 002B     		cmp	r3, #0
 462 001e 0DD1     		bne	.L36
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 463              		.loc 1 1053 0
 464 0020 1B4B     		ldr	r3, .L42+4
 465 0022 1B68     		ldr	r3, [r3]
 466 0024 DB6A     		ldr	r3, [r3, #44]
 467 0026 E26A     		ldr	r2, [r4, #44]
 468 0028 9342     		cmp	r3, r2
 469 002a 07D8     		bhi	.L36
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 470              		.loc 1 1055 0
 471 002c 184B     		ldr	r3, .L42+4
 472 002e 1C60     		str	r4, [r3]
 473 0030 04E0     		b	.L36
 474              	.L39:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475              		.loc 1 1032 0
 476 0032 174B     		ldr	r3, .L42+4
 477 0034 1C60     		str	r4, [r3]
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 478              		.loc 1 1034 0
 479 0036 1368     		ldr	r3, [r2]
 480 0038 012B     		cmp	r3, #1
 481 003a 20D0     		beq	.L40
 482              	.L36:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 483              		.loc 1 1068 0
 484 003c 164A     		ldr	r2, .L42+12
 485 003e 1368     		ldr	r3, [r2]
ARM GAS  /tmp/ccyt1kA6.s 			page 76


 486 0040 0133     		adds	r3, r3, #1
 487 0042 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 488              		.loc 1 1073 0
 489 0044 6364     		str	r3, [r4, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490              		.loc 1 1078 0
 491 0046 E26A     		ldr	r2, [r4, #44]
 492 0048 144B     		ldr	r3, .L42+16
 493 004a 1B68     		ldr	r3, [r3]
 494 004c 9A42     		cmp	r2, r3
 495 004e 01D9     		bls	.L37
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 496              		.loc 1 1078 0 is_stmt 0 discriminator 1
 497 0050 124B     		ldr	r3, .L42+16
 498 0052 1A60     		str	r2, [r3]
 499              	.L37:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500              		.loc 1 1078 0 discriminator 3
 501 0054 211D     		adds	r1, r4, #4
 502 0056 9300     		lsls	r3, r2, #2
 503 0058 9B18     		adds	r3, r3, r2
 504 005a 9800     		lsls	r0, r3, #2
 505 005c 104B     		ldr	r3, .L42+20
 506 005e C018     		adds	r0, r0, r3
 507 0060 FFF7FEFF 		bl	vListInsertEnd
 508              	.LVL48:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509              		.loc 1 1082 0 is_stmt 1 discriminator 3
 510 0064 FFF7FEFF 		bl	vPortExitCritical
 511              	.LVL49:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 512              		.loc 1 1084 0 discriminator 3
 513 0068 0A4B     		ldr	r3, .L42+8
 514 006a 1B68     		ldr	r3, [r3]
 515 006c 002B     		cmp	r3, #0
 516 006e 05D0     		beq	.L34
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 517              		.loc 1 1088 0
 518 0070 074B     		ldr	r3, .L42+4
 519 0072 1B68     		ldr	r3, [r3]
 520 0074 DA6A     		ldr	r2, [r3, #44]
 521 0076 E36A     		ldr	r3, [r4, #44]
 522 0078 9A42     		cmp	r2, r3
 523 007a 03D3     		bcc	.L41
 524              	.L34:
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 525              		.loc 1 1101 0
 526              		@ sp needed
 527              	.LVL50:
 528 007c 10BD     		pop	{r4, pc}
 529              	.LVL51:
 530              	.L40:
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 531              		.loc 1 1039 0
 532 007e FFF7FEFF 		bl	prvInitialiseTaskLists
 533              	.LVL52:
ARM GAS  /tmp/ccyt1kA6.s 			page 77


 534 0082 DBE7     		b	.L36
 535              	.L41:
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 536              		.loc 1 1090 0
 537 0084 FFF7FEFF 		bl	vPortYield
 538              	.LVL53:
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 539              		.loc 1 1101 0
 540 0088 F8E7     		b	.L34
 541              	.L43:
 542 008a C046     		.align	2
 543              	.L42:
 544 008c 00000000 		.word	.LANCHOR8
 545 0090 00000000 		.word	.LANCHOR9
 546 0094 00000000 		.word	.LANCHOR10
 547 0098 00000000 		.word	.LANCHOR11
 548 009c 00000000 		.word	.LANCHOR12
 549 00a0 00000000 		.word	pxReadyTasksLists
 550              		.cfi_endproc
 551              	.LFE3:
 553              		.section	.text.prvDeleteTCB,"ax",%progbits
 554              		.align	1
 555              		.syntax unified
 556              		.code	16
 557              		.thumb_func
 558              		.fpu softvfp
 560              	prvDeleteTCB:
 561              	.LFB44:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 562              		.loc 1 3671 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 0
 565              		@ frame_needed = 0, uses_anonymous_args = 0
 566              	.LVL54:
 567 0000 10B5     		push	{r4, lr}
 568              	.LCFI5:
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 4, -8
 571              		.cfi_offset 14, -4
 572 0002 0400     		movs	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 573              		.loc 1 3697 0
 574 0004 5923     		movs	r3, #89
 575 0006 C35C     		ldrb	r3, [r0, r3]
 576 0008 002B     		cmp	r3, #0
 577 000a 06D1     		bne	.L45
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 578              		.loc 1 3701 0
 579 000c 006B     		ldr	r0, [r0, #48]
 580              	.LVL55:
 581 000e FFF7FEFF 		bl	vPortFree
 582              	.LVL56:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 583              		.loc 1 3702 0
 584 0012 2000     		movs	r0, r4
 585 0014 FFF7FEFF 		bl	vPortFree
 586              	.LVL57:
ARM GAS  /tmp/ccyt1kA6.s 			page 78


 587              	.L44:
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 588              		.loc 1 3719 0
 589              		@ sp needed
 590              	.LVL58:
 591 0018 10BD     		pop	{r4, pc}
 592              	.LVL59:
 593              	.L45:
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 594              		.loc 1 3704 0
 595 001a 012B     		cmp	r3, #1
 596 001c 03D0     		beq	.L49
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 597              		.loc 1 3714 0
 598 001e 022B     		cmp	r3, #2
 599 0020 FAD0     		beq	.L44
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 600              		.loc 1 3714 0 is_stmt 0 discriminator 1
 601              		.syntax divided
 602              	@ 3714 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 603 0022 72B6     		 cpsid i 
 604              	@ 0 "" 2
 605              		.thumb
 606              		.syntax unified
 607              	.L48:
 608 0024 FEE7     		b	.L48
 609              	.L49:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 610              		.loc 1 3708 0 is_stmt 1
 611 0026 FFF7FEFF 		bl	vPortFree
 612              	.LVL60:
 613 002a F5E7     		b	.L44
 614              		.cfi_endproc
 615              	.LFE44:
 617              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 618              		.align	1
 619              		.syntax unified
 620              		.code	16
 621              		.thumb_func
 622              		.fpu softvfp
 624              	prvCheckTasksWaitingTermination:
 625              	.LFB39:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626              		.loc 1 3463 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630 0000 10B5     		push	{r4, lr}
 631              	.LCFI6:
 632              		.cfi_def_cfa_offset 8
 633              		.cfi_offset 4, -8
 634              		.cfi_offset 14, -4
 635              	.LBB2:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 636              		.loc 1 3473 0
 637 0002 14E0     		b	.L51
 638              	.L52:
ARM GAS  /tmp/ccyt1kA6.s 			page 79


3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 639              		.loc 1 3475 0
 640 0004 FFF7FEFF 		bl	vPortEnterCritical
 641              	.LVL61:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 642              		.loc 1 3477 0
 643 0008 0B4B     		ldr	r3, .L53
 644 000a DB68     		ldr	r3, [r3, #12]
 645 000c DC68     		ldr	r4, [r3, #12]
 646              	.LVL62:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 647              		.loc 1 3478 0
 648 000e 201D     		adds	r0, r4, #4
 649 0010 FFF7FEFF 		bl	uxListRemove
 650              	.LVL63:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 651              		.loc 1 3479 0
 652 0014 094A     		ldr	r2, .L53+4
 653 0016 1368     		ldr	r3, [r2]
 654 0018 013B     		subs	r3, r3, #1
 655 001a 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 656              		.loc 1 3480 0
 657 001c 084A     		ldr	r2, .L53+8
 658 001e 1368     		ldr	r3, [r2]
 659 0020 013B     		subs	r3, r3, #1
 660 0022 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661              		.loc 1 3482 0
 662 0024 FFF7FEFF 		bl	vPortExitCritical
 663              	.LVL64:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 664              		.loc 1 3484 0
 665 0028 2000     		movs	r0, r4
 666 002a FFF7FEFF 		bl	prvDeleteTCB
 667              	.LVL65:
 668              	.L51:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 669              		.loc 1 3473 0
 670 002e 044B     		ldr	r3, .L53+8
 671 0030 1B68     		ldr	r3, [r3]
 672 0032 002B     		cmp	r3, #0
 673 0034 E6D1     		bne	.L52
 674              	.LBE2:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 675              		.loc 1 3488 0
 676              		@ sp needed
 677 0036 10BD     		pop	{r4, pc}
 678              	.L54:
 679              		.align	2
 680              	.L53:
 681 0038 00000000 		.word	.LANCHOR6
 682 003c 00000000 		.word	.LANCHOR8
 683 0040 00000000 		.word	.LANCHOR13
 684              		.cfi_endproc
 685              	.LFE39:
 687              		.section	.text.prvIdleTask,"ax",%progbits
ARM GAS  /tmp/ccyt1kA6.s 			page 80


 688              		.align	1
 689              		.syntax unified
 690              		.code	16
 691              		.thumb_func
 692              		.fpu softvfp
 694              	prvIdleTask:
 695              	.LFB37:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 696              		.loc 1 3219 0
 697              		.cfi_startproc
 698              		@ Volatile: function does not return.
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701              	.LVL66:
 702 0000 10B5     		push	{r4, lr}
 703              	.LCFI7:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 4, -8
 706              		.cfi_offset 14, -4
 707              	.LVL67:
 708              	.L56:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709              		.loc 1 3235 0
 710 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 711              	.LVL68:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 712              		.loc 1 3258 0
 713 0006 034B     		ldr	r3, .L58
 714 0008 1B68     		ldr	r3, [r3]
 715 000a 012B     		cmp	r3, #1
 716 000c F9D9     		bls	.L56
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 717              		.loc 1 3260 0
 718 000e FFF7FEFF 		bl	vPortYield
 719              	.LVL69:
 720 0012 F6E7     		b	.L56
 721              	.L59:
 722              		.align	2
 723              	.L58:
 724 0014 00000000 		.word	pxReadyTasksLists
 725              		.cfi_endproc
 726              	.LFE37:
 728              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 729              		.align	1
 730              		.syntax unified
 731              		.code	16
 732              		.thumb_func
 733              		.fpu softvfp
 735              	prvAddCurrentTaskToDelayedList:
 736              	.LFB59:
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
ARM GAS  /tmp/ccyt1kA6.s 			page 81


3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccyt1kA6.s 			page 82


3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccyt1kA6.s 			page 83


3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
ARM GAS  /tmp/ccyt1kA6.s 			page 84


3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
ARM GAS  /tmp/ccyt1kA6.s 			page 85


3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccyt1kA6.s 			page 86


4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
ARM GAS  /tmp/ccyt1kA6.s 			page 87


4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
ARM GAS  /tmp/ccyt1kA6.s 			page 88


4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 89


4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
ARM GAS  /tmp/ccyt1kA6.s 			page 90


4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
ARM GAS  /tmp/ccyt1kA6.s 			page 91


4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 92


4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 93


4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 94


4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccyt1kA6.s 			page 95


4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 96


4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccyt1kA6.s 			page 97


4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  /tmp/ccyt1kA6.s 			page 98


4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 99


4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccyt1kA6.s 			page 100


4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccyt1kA6.s 			page 101


4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 737              		.loc 1 4907 0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
 741              	.LVL70:
 742 0000 70B5     		push	{r4, r5, r6, lr}
 743              	.LCFI8:
 744              		.cfi_def_cfa_offset 16
 745              		.cfi_offset 4, -16
 746              		.cfi_offset 5, -12
 747              		.cfi_offset 6, -8
 748              		.cfi_offset 14, -4
 749 0002 0400     		movs	r4, r0
 750 0004 0D00     		movs	r5, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 751              		.loc 1 4909 0
 752 0006 174B     		ldr	r3, .L66
 753 0008 1E68     		ldr	r6, [r3]
 754              	.LVL71:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 755              		.loc 1 4922 0
 756 000a 174B     		ldr	r3, .L66+4
 757 000c 1868     		ldr	r0, [r3]
 758              	.LVL72:
 759 000e 0430     		adds	r0, r0, #4
 760 0010 FFF7FEFF 		bl	uxListRemove
 761              	.LVL73:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
ARM GAS  /tmp/ccyt1kA6.s 			page 102


4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 762              		.loc 1 4935 0
 763 0014 631C     		adds	r3, r4, #1
 764 0016 13D0     		beq	.L64
 765              	.L61:
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 766              		.loc 1 4947 0
 767 0018 3419     		adds	r4, r6, r4
 768              	.LVL74:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 769              		.loc 1 4950 0
 770 001a 134B     		ldr	r3, .L66+4
 771 001c 1B68     		ldr	r3, [r3]
 772 001e 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 773              		.loc 1 4952 0
 774 0020 A642     		cmp	r6, r4
 775 0022 16D8     		bhi	.L65
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 776              		.loc 1 4962 0
 777 0024 114B     		ldr	r3, .L66+8
 778 0026 1868     		ldr	r0, [r3]
 779 0028 0F4B     		ldr	r3, .L66+4
 780 002a 1968     		ldr	r1, [r3]
ARM GAS  /tmp/ccyt1kA6.s 			page 103


 781 002c 0431     		adds	r1, r1, #4
 782 002e FFF7FEFF 		bl	vListInsert
 783              	.LVL75:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 784              		.loc 1 4967 0
 785 0032 0F4B     		ldr	r3, .L66+12
 786 0034 1B68     		ldr	r3, [r3]
 787 0036 A342     		cmp	r3, r4
 788 0038 12D9     		bls	.L60
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 789              		.loc 1 4969 0
 790 003a 0D4B     		ldr	r3, .L66+12
 791 003c 1C60     		str	r4, [r3]
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 104


5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 792              		.loc 1 5015 0
 793 003e 0FE0     		b	.L60
 794              	.LVL76:
 795              	.L64:
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 796              		.loc 1 4935 0 discriminator 1
 797 0040 002D     		cmp	r5, #0
 798 0042 E9D0     		beq	.L61
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 799              		.loc 1 4940 0
 800 0044 084B     		ldr	r3, .L66+4
 801 0046 1968     		ldr	r1, [r3]
 802 0048 0431     		adds	r1, r1, #4
 803 004a 0A48     		ldr	r0, .L66+16
 804 004c FFF7FEFF 		bl	vListInsertEnd
 805              	.LVL77:
 806 0050 06E0     		b	.L60
 807              	.LVL78:
 808              	.L65:
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 809              		.loc 1 4956 0
 810 0052 094B     		ldr	r3, .L66+20
 811 0054 1868     		ldr	r0, [r3]
 812 0056 044B     		ldr	r3, .L66+4
 813 0058 1968     		ldr	r1, [r3]
 814 005a 0431     		adds	r1, r1, #4
 815 005c FFF7FEFF 		bl	vListInsert
 816              	.LVL79:
 817              	.L60:
 818              		.loc 1 5015 0
 819              		@ sp needed
 820              	.LVL80:
 821              	.LVL81:
 822 0060 70BD     		pop	{r4, r5, r6, pc}
 823              	.L67:
 824 0062 C046     		.align	2
 825              	.L66:
 826 0064 00000000 		.word	.LANCHOR14
 827 0068 00000000 		.word	.LANCHOR9
 828 006c 00000000 		.word	.LANCHOR2
 829 0070 00000000 		.word	.LANCHOR3
 830 0074 00000000 		.word	.LANCHOR0
 831 0078 00000000 		.word	.LANCHOR7
 832              		.cfi_endproc
 833              	.LFE59:
 835              		.section	.text.xTaskCreateStatic,"ax",%progbits
 836              		.align	1
 837              		.global	xTaskCreateStatic
 838              		.syntax unified
 839              		.code	16
ARM GAS  /tmp/ccyt1kA6.s 			page 105


 840              		.thumb_func
 841              		.fpu softvfp
 843              	xTaskCreateStatic:
 844              	.LFB0:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 845              		.loc 1 582 0
 846              		.cfi_startproc
 847              		@ args = 12, pretend = 0, frame = 8
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              	.LVL82:
 850 0000 70B5     		push	{r4, r5, r6, lr}
 851              	.LCFI9:
 852              		.cfi_def_cfa_offset 16
 853              		.cfi_offset 4, -16
 854              		.cfi_offset 5, -12
 855              		.cfi_offset 6, -8
 856              		.cfi_offset 14, -4
 857 0002 86B0     		sub	sp, sp, #24
 858              	.LCFI10:
 859              		.cfi_def_cfa_offset 40
 860 0004 0B9D     		ldr	r5, [sp, #44]
 861 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 862              		.loc 1 586 0
 863 0008 002D     		cmp	r5, #0
 864 000a 01D1     		bne	.L69
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 865              		.loc 1 586 0 is_stmt 0 discriminator 1
 866              		.syntax divided
 867              	@ 586 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 868 000c 72B6     		 cpsid i 
 869              	@ 0 "" 2
 870              		.thumb
 871              		.syntax unified
 872              	.L70:
 873 000e FEE7     		b	.L70
 874              	.L69:
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875              		.loc 1 587 0 is_stmt 1
 876 0010 002C     		cmp	r4, #0
 877 0012 01D1     		bne	.L71
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878              		.loc 1 587 0 is_stmt 0 discriminator 1
 879              		.syntax divided
 880              	@ 587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 881 0014 72B6     		 cpsid i 
 882              	@ 0 "" 2
 883              		.thumb
 884              		.syntax unified
 885              	.L72:
 886 0016 FEE7     		b	.L72
 887              	.L71:
 888              	.LBB3:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 889              		.loc 1 594 0 is_stmt 1
 890 0018 5C26     		movs	r6, #92
 891 001a 0496     		str	r6, [sp, #16]
ARM GAS  /tmp/ccyt1kA6.s 			page 106


 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 892              		.loc 1 595 0
 893 001c 049E     		ldr	r6, [sp, #16]
 894 001e 5C2E     		cmp	r6, #92
 895 0020 01D0     		beq	.L73
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896              		.loc 1 595 0 is_stmt 0 discriminator 1
 897              		.syntax divided
 898              	@ 595 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 899 0022 72B6     		 cpsid i 
 900              	@ 0 "" 2
 901              		.thumb
 902              		.syntax unified
 903              	.L74:
 904 0024 FEE7     		b	.L74
 905              	.L73:
 906              	.LVL83:
 907              	.LBE3:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908              		.loc 1 605 0 is_stmt 1
 909 0026 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 910              		.loc 1 611 0
 911 0028 5925     		movs	r5, #89
 912 002a 0226     		movs	r6, #2
 913 002c 6655     		strb	r6, [r4, r5]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 914              		.loc 1 615 0
 915 002e 0025     		movs	r5, #0
 916 0030 0395     		str	r5, [sp, #12]
 917 0032 0294     		str	r4, [sp, #8]
 918 0034 05AD     		add	r5, sp, #20
 919 0036 0195     		str	r5, [sp, #4]
 920 0038 0A9D     		ldr	r5, [sp, #40]
 921 003a 0095     		str	r5, [sp]
 922 003c FFF7FEFF 		bl	prvInitialiseNewTask
 923              	.LVL84:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 924              		.loc 1 616 0
 925 0040 2000     		movs	r0, r4
 926 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 927              	.LVL85:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928              		.loc 1 624 0
 929 0046 0598     		ldr	r0, [sp, #20]
 930 0048 06B0     		add	sp, sp, #24
 931              		@ sp needed
 932              	.LVL86:
 933 004a 70BD     		pop	{r4, r5, r6, pc}
 934              		.cfi_endproc
 935              	.LFE0:
 937              		.section	.text.xTaskCreate,"ax",%progbits
 938              		.align	1
 939              		.global	xTaskCreate
 940              		.syntax unified
 941              		.code	16
 942              		.thumb_func
ARM GAS  /tmp/ccyt1kA6.s 			page 107


 943              		.fpu softvfp
 945              	xTaskCreate:
 946              	.LFB1:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 947              		.loc 1 732 0
 948              		.cfi_startproc
 949              		@ args = 8, pretend = 0, frame = 8
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              	.LVL87:
 952 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 953              	.LCFI11:
 954              		.cfi_def_cfa_offset 20
 955              		.cfi_offset 4, -20
 956              		.cfi_offset 5, -16
 957              		.cfi_offset 6, -12
 958              		.cfi_offset 7, -8
 959              		.cfi_offset 14, -4
 960 0002 87B0     		sub	sp, sp, #28
 961              	.LCFI12:
 962              		.cfi_def_cfa_offset 48
 963 0004 0490     		str	r0, [sp, #16]
 964 0006 0591     		str	r1, [sp, #20]
 965 0008 1400     		movs	r4, r2
 966 000a 1F00     		movs	r7, r3
 967              	.LBB4:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 968              		.loc 1 766 0
 969 000c 9000     		lsls	r0, r2, #2
 970              	.LVL88:
 971 000e FFF7FEFF 		bl	pvPortMalloc
 972              	.LVL89:
 973 0012 061E     		subs	r6, r0, #0
 974              	.LVL90:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 975              		.loc 1 768 0
 976 0014 20D0     		beq	.L79
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 977              		.loc 1 771 0
 978 0016 5C20     		movs	r0, #92
 979              	.LVL91:
 980 0018 FFF7FEFF 		bl	pvPortMalloc
 981              	.LVL92:
 982 001c 051E     		subs	r5, r0, #0
 983              	.LVL93:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 984              		.loc 1 773 0
 985 001e 17D0     		beq	.L77
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 986              		.loc 1 776 0
 987 0020 0663     		str	r6, [r0, #48]
 988              	.LVL94:
 989              	.L78:
 990              	.LBE4:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 991              		.loc 1 792 0
 992 0022 002D     		cmp	r5, #0
 993 0024 1BD0     		beq	.L80
ARM GAS  /tmp/ccyt1kA6.s 			page 108


 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 994              		.loc 1 798 0
 995 0026 0023     		movs	r3, #0
 996 0028 5922     		movs	r2, #89
 997 002a AB54     		strb	r3, [r5, r2]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 998              		.loc 1 802 0
 999 002c 0393     		str	r3, [sp, #12]
 1000 002e 0295     		str	r5, [sp, #8]
 1001 0030 0D9B     		ldr	r3, [sp, #52]
 1002 0032 0193     		str	r3, [sp, #4]
 1003 0034 0C9B     		ldr	r3, [sp, #48]
 1004 0036 0093     		str	r3, [sp]
 1005 0038 3B00     		movs	r3, r7
 1006 003a 2200     		movs	r2, r4
 1007 003c 0599     		ldr	r1, [sp, #20]
 1008 003e 0498     		ldr	r0, [sp, #16]
 1009 0040 FFF7FEFF 		bl	prvInitialiseNewTask
 1010              	.LVL95:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1011              		.loc 1 803 0
 1012 0044 2800     		movs	r0, r5
 1013 0046 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1014              	.LVL96:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1015              		.loc 1 804 0
 1016 004a 0120     		movs	r0, #1
 1017              	.LVL97:
 1018              	.L75:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1019              		.loc 1 812 0
 1020 004c 07B0     		add	sp, sp, #28
 1021              		@ sp needed
 1022              	.LVL98:
 1023              	.LVL99:
 1024 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 1025              	.LVL100:
 1026              	.L77:
 1027              	.LBB5:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1028              		.loc 1 782 0
 1029 0050 3000     		movs	r0, r6
 1030              	.LVL101:
 1031 0052 FFF7FEFF 		bl	vPortFree
 1032              	.LVL102:
 1033 0056 E4E7     		b	.L78
 1034              	.LVL103:
 1035              	.L79:
 1036              	.LBE5:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1037              		.loc 1 808 0
 1038 0058 0120     		movs	r0, #1
 1039              	.LVL104:
 1040 005a 4042     		rsbs	r0, r0, #0
 1041 005c F6E7     		b	.L75
 1042              	.LVL105:
 1043              	.L80:
ARM GAS  /tmp/ccyt1kA6.s 			page 109


 1044 005e 0120     		movs	r0, #1
 1045 0060 4042     		rsbs	r0, r0, #0
 1046              	.LVL106:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1047              		.loc 1 811 0
 1048 0062 F3E7     		b	.L75
 1049              		.cfi_endproc
 1050              	.LFE1:
 1052              		.section	.text.vTaskDelete,"ax",%progbits
 1053              		.align	1
 1054              		.global	vTaskDelete
 1055              		.syntax unified
 1056              		.code	16
 1057              		.thumb_func
 1058              		.fpu softvfp
 1060              	vTaskDelete:
 1061              	.LFB4:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1062              		.loc 1 1107 0
 1063              		.cfi_startproc
 1064              		@ args = 0, pretend = 0, frame = 0
 1065              		@ frame_needed = 0, uses_anonymous_args = 0
 1066              	.LVL107:
 1067 0000 70B5     		push	{r4, r5, r6, lr}
 1068              	.LCFI13:
 1069              		.cfi_def_cfa_offset 16
 1070              		.cfi_offset 4, -16
 1071              		.cfi_offset 5, -12
 1072              		.cfi_offset 6, -8
 1073              		.cfi_offset 14, -4
 1074 0002 0400     		movs	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1075              		.loc 1 1110 0
 1076 0004 FFF7FEFF 		bl	vPortEnterCritical
 1077              	.LVL108:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1078              		.loc 1 1114 0
 1079 0008 002C     		cmp	r4, #0
 1080 000a 26D0     		beq	.L89
 1081              	.LVL109:
 1082              	.L82:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1083              		.loc 1 1117 0 discriminator 4
 1084 000c 251D     		adds	r5, r4, #4
 1085 000e 2800     		movs	r0, r5
 1086 0010 FFF7FEFF 		bl	uxListRemove
 1087              	.LVL110:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1088              		.loc 1 1127 0 discriminator 4
 1089 0014 A36A     		ldr	r3, [r4, #40]
 1090 0016 002B     		cmp	r3, #0
 1091 0018 03D0     		beq	.L83
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1092              		.loc 1 1129 0
 1093 001a 2000     		movs	r0, r4
 1094 001c 1830     		adds	r0, r0, #24
 1095 001e FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccyt1kA6.s 			page 110


 1096              	.LVL111:
 1097              	.L83:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1098              		.loc 1 1140 0
 1099 0022 184A     		ldr	r2, .L92
 1100 0024 1368     		ldr	r3, [r2]
 1101 0026 0133     		adds	r3, r3, #1
 1102 0028 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1103              		.loc 1 1142 0
 1104 002a 174B     		ldr	r3, .L92+4
 1105 002c 1B68     		ldr	r3, [r3]
 1106 002e A342     		cmp	r3, r4
 1107 0030 16D0     		beq	.L90
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1108              		.loc 1 1165 0
 1109 0032 164A     		ldr	r2, .L92+8
 1110 0034 1368     		ldr	r3, [r2]
 1111 0036 013B     		subs	r3, r3, #1
 1112 0038 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1113              		.loc 1 1166 0
 1114 003a 2000     		movs	r0, r4
 1115 003c FFF7FEFF 		bl	prvDeleteTCB
 1116              	.LVL112:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1117              		.loc 1 1170 0
 1118 0040 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1119              	.LVL113:
 1120              	.L85:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1121              		.loc 1 1175 0
 1122 0044 FFF7FEFF 		bl	vPortExitCritical
 1123              	.LVL114:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1124              		.loc 1 1179 0
 1125 0048 114B     		ldr	r3, .L92+12
 1126 004a 1B68     		ldr	r3, [r3]
 1127 004c 002B     		cmp	r3, #0
 1128 004e 03D0     		beq	.L81
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1129              		.loc 1 1181 0
 1130 0050 0D4B     		ldr	r3, .L92+4
 1131 0052 1B68     		ldr	r3, [r3]
 1132 0054 A342     		cmp	r3, r4
 1133 0056 0CD0     		beq	.L91
 1134              	.L81:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1135              		.loc 1 1191 0
 1136              		@ sp needed
 1137              	.LVL115:
 1138              	.LVL116:
 1139 0058 70BD     		pop	{r4, r5, r6, pc}
 1140              	.LVL117:
 1141              	.L89:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1142              		.loc 1 1114 0 discriminator 1
ARM GAS  /tmp/ccyt1kA6.s 			page 111


 1143 005a 0B4B     		ldr	r3, .L92+4
 1144 005c 1C68     		ldr	r4, [r3]
 1145              	.LVL118:
 1146 005e D5E7     		b	.L82
 1147              	.LVL119:
 1148              	.L90:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1149              		.loc 1 1149 0
 1150 0060 2900     		movs	r1, r5
 1151 0062 0C48     		ldr	r0, .L92+16
 1152 0064 FFF7FEFF 		bl	vListInsertEnd
 1153              	.LVL120:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1154              		.loc 1 1154 0
 1155 0068 0B4A     		ldr	r2, .L92+20
 1156 006a 1368     		ldr	r3, [r2]
 1157 006c 0133     		adds	r3, r3, #1
 1158 006e 1360     		str	r3, [r2]
 1159 0070 E8E7     		b	.L85
 1160              	.L91:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1161              		.loc 1 1183 0
 1162 0072 0A4B     		ldr	r3, .L92+24
 1163 0074 1B68     		ldr	r3, [r3]
 1164 0076 002B     		cmp	r3, #0
 1165 0078 01D0     		beq	.L87
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1166              		.loc 1 1183 0 is_stmt 0 discriminator 1
 1167              		.syntax divided
 1168              	@ 1183 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1169 007a 72B6     		 cpsid i 
 1170              	@ 0 "" 2
 1171              		.thumb
 1172              		.syntax unified
 1173              	.L88:
 1174 007c FEE7     		b	.L88
 1175              	.L87:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1176              		.loc 1 1184 0 is_stmt 1
 1177 007e FFF7FEFF 		bl	vPortYield
 1178              	.LVL121:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1179              		.loc 1 1191 0
 1180 0082 E9E7     		b	.L81
 1181              	.L93:
 1182              		.align	2
 1183              	.L92:
 1184 0084 00000000 		.word	.LANCHOR11
 1185 0088 00000000 		.word	.LANCHOR9
 1186 008c 00000000 		.word	.LANCHOR8
 1187 0090 00000000 		.word	.LANCHOR10
 1188 0094 00000000 		.word	.LANCHOR6
 1189 0098 00000000 		.word	.LANCHOR13
 1190 009c 00000000 		.word	.LANCHOR15
 1191              		.cfi_endproc
 1192              	.LFE4:
 1194              		.section	.text.eTaskGetState,"ax",%progbits
ARM GAS  /tmp/ccyt1kA6.s 			page 112


 1195              		.align	1
 1196              		.global	eTaskGetState
 1197              		.syntax unified
 1198              		.code	16
 1199              		.thumb_func
 1200              		.fpu softvfp
 1202              	eTaskGetState:
 1203              	.LFB7:
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1204              		.loc 1 1328 0
 1205              		.cfi_startproc
 1206              		@ args = 0, pretend = 0, frame = 0
 1207              		@ frame_needed = 0, uses_anonymous_args = 0
 1208              	.LVL122:
 1209 0000 70B5     		push	{r4, r5, r6, lr}
 1210              	.LCFI14:
 1211              		.cfi_def_cfa_offset 16
 1212              		.cfi_offset 4, -16
 1213              		.cfi_offset 5, -12
 1214              		.cfi_offset 6, -8
 1215              		.cfi_offset 14, -4
 1216 0002 051E     		subs	r5, r0, #0
 1217              	.LVL123:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1218              		.loc 1 1333 0
 1219 0004 1AD0     		beq	.L105
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1220              		.loc 1 1335 0
 1221 0006 174B     		ldr	r3, .L108
 1222 0008 1B68     		ldr	r3, [r3]
 1223 000a 8342     		cmp	r3, r0
 1224 000c 1FD0     		beq	.L99
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1225              		.loc 1 1342 0
 1226 000e FFF7FEFF 		bl	vPortEnterCritical
 1227              	.LVL124:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1228              		.loc 1 1344 0
 1229 0012 6C69     		ldr	r4, [r5, #20]
 1230              	.LVL125:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1231              		.loc 1 1346 0
 1232 0014 FFF7FEFF 		bl	vPortExitCritical
 1233              	.LVL126:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1234              		.loc 1 1348 0
 1235 0018 134B     		ldr	r3, .L108+4
 1236 001a 1B68     		ldr	r3, [r3]
 1237 001c A342     		cmp	r3, r4
 1238 001e 18D0     		beq	.L100
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1239              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1240 0020 124B     		ldr	r3, .L108+8
 1241 0022 1B68     		ldr	r3, [r3]
 1242 0024 A342     		cmp	r3, r4
 1243 0026 16D0     		beq	.L101
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccyt1kA6.s 			page 113


 1244              		.loc 1 1356 0 is_stmt 1
 1245 0028 114B     		ldr	r3, .L108+12
 1246 002a 9C42     		cmp	r4, r3
 1247 002c 08D0     		beq	.L106
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1248              		.loc 1 1373 0
 1249 002e 114B     		ldr	r3, .L108+16
 1250 0030 9C42     		cmp	r4, r3
 1251 0032 14D0     		beq	.L103
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1252              		.loc 1 1373 0 is_stmt 0 discriminator 1
 1253 0034 002C     		cmp	r4, #0
 1254 0036 08D0     		beq	.L107
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1255              		.loc 1 1386 0 is_stmt 1
 1256 0038 0120     		movs	r0, #1
 1257 003a 09E0     		b	.L97
 1258              	.LVL127:
 1259              	.L105:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1260              		.loc 1 1333 0 discriminator 1
 1261              		.syntax divided
 1262              	@ 1333 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1263 003c 72B6     		 cpsid i 
 1264              	@ 0 "" 2
 1265              		.thumb
 1266              		.syntax unified
 1267              	.L96:
 1268 003e FEE7     		b	.L96
 1269              	.LVL128:
 1270              	.L106:
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1271              		.loc 1 1361 0
 1272 0040 AB6A     		ldr	r3, [r5, #40]
 1273 0042 002B     		cmp	r3, #0
 1274 0044 09D1     		bne	.L102
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1275              		.loc 1 1363 0
 1276 0046 0320     		movs	r0, #3
 1277 0048 02E0     		b	.L97
 1278              	.L107:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1279              		.loc 1 1378 0
 1280 004a 0420     		movs	r0, #4
 1281 004c 00E0     		b	.L97
 1282              	.LVL129:
 1283              	.L99:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1284              		.loc 1 1338 0
 1285 004e 0020     		movs	r0, #0
 1286              	.LVL130:
 1287              	.L97:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1288              		.loc 1 1391 0
 1289              		@ sp needed
 1290              	.LVL131:
 1291 0050 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccyt1kA6.s 			page 114


 1292              	.LVL132:
 1293              	.L100:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1294              		.loc 1 1352 0
 1295 0052 0220     		movs	r0, #2
 1296 0054 FCE7     		b	.L97
 1297              	.L101:
 1298 0056 0220     		movs	r0, #2
 1299 0058 FAE7     		b	.L97
 1300              	.L102:
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1301              		.loc 1 1367 0
 1302 005a 0220     		movs	r0, #2
 1303 005c F8E7     		b	.L97
 1304              	.L103:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1305              		.loc 1 1378 0
 1306 005e 0420     		movs	r0, #4
 1307 0060 F6E7     		b	.L97
 1308              	.L109:
 1309 0062 C046     		.align	2
 1310              	.L108:
 1311 0064 00000000 		.word	.LANCHOR9
 1312 0068 00000000 		.word	.LANCHOR2
 1313 006c 00000000 		.word	.LANCHOR7
 1314 0070 00000000 		.word	.LANCHOR0
 1315 0074 00000000 		.word	.LANCHOR6
 1316              		.cfi_endproc
 1317              	.LFE7:
 1319              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1320              		.align	1
 1321              		.global	uxTaskPriorityGet
 1322              		.syntax unified
 1323              		.code	16
 1324              		.thumb_func
 1325              		.fpu softvfp
 1327              	uxTaskPriorityGet:
 1328              	.LFB8:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1329              		.loc 1 1399 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              	.LVL133:
 1334 0000 10B5     		push	{r4, lr}
 1335              	.LCFI15:
 1336              		.cfi_def_cfa_offset 8
 1337              		.cfi_offset 4, -8
 1338              		.cfi_offset 14, -4
 1339 0002 0400     		movs	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1340              		.loc 1 1403 0
 1341 0004 FFF7FEFF 		bl	vPortEnterCritical
 1342              	.LVL134:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1343              		.loc 1 1407 0
 1344 0008 002C     		cmp	r4, #0
ARM GAS  /tmp/ccyt1kA6.s 			page 115


 1345 000a 04D0     		beq	.L112
 1346              	.LVL135:
 1347              	.L111:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1348              		.loc 1 1408 0 discriminator 4
 1349 000c E46A     		ldr	r4, [r4, #44]
 1350              	.LVL136:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1351              		.loc 1 1410 0 discriminator 4
 1352 000e FFF7FEFF 		bl	vPortExitCritical
 1353              	.LVL137:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1354              		.loc 1 1413 0 discriminator 4
 1355 0012 2000     		movs	r0, r4
 1356              		@ sp needed
 1357              	.LVL138:
 1358 0014 10BD     		pop	{r4, pc}
 1359              	.LVL139:
 1360              	.L112:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1361              		.loc 1 1407 0 discriminator 1
 1362 0016 014B     		ldr	r3, .L113
 1363 0018 1C68     		ldr	r4, [r3]
 1364              	.LVL140:
 1365 001a F7E7     		b	.L111
 1366              	.L114:
 1367              		.align	2
 1368              	.L113:
 1369 001c 00000000 		.word	.LANCHOR9
 1370              		.cfi_endproc
 1371              	.LFE8:
 1373              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1374              		.align	1
 1375              		.global	uxTaskPriorityGetFromISR
 1376              		.syntax unified
 1377              		.code	16
 1378              		.thumb_func
 1379              		.fpu softvfp
 1381              	uxTaskPriorityGetFromISR:
 1382              	.LFB9:
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1383              		.loc 1 1421 0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 1387              	.LVL141:
 1388 0000 10B5     		push	{r4, lr}
 1389              	.LCFI16:
 1390              		.cfi_def_cfa_offset 8
 1391              		.cfi_offset 4, -8
 1392              		.cfi_offset 14, -4
 1393 0002 0400     		movs	r4, r0
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1394              		.loc 1 1443 0
 1395 0004 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1396              	.LVL142:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  /tmp/ccyt1kA6.s 			page 116


 1397              		.loc 1 1447 0
 1398 0008 002C     		cmp	r4, #0
 1399 000a 04D0     		beq	.L117
 1400              	.LVL143:
 1401              	.L116:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1402              		.loc 1 1448 0 discriminator 4
 1403 000c E46A     		ldr	r4, [r4, #44]
 1404              	.LVL144:
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1405              		.loc 1 1450 0 discriminator 4
 1406 000e FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1407              	.LVL145:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1408              		.loc 1 1453 0 discriminator 4
 1409 0012 2000     		movs	r0, r4
 1410              		@ sp needed
 1411              	.LVL146:
 1412 0014 10BD     		pop	{r4, pc}
 1413              	.LVL147:
 1414              	.L117:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1415              		.loc 1 1447 0 discriminator 1
 1416 0016 014B     		ldr	r3, .L118
 1417 0018 1C68     		ldr	r4, [r3]
 1418              	.LVL148:
 1419 001a F7E7     		b	.L116
 1420              	.L119:
 1421              		.align	2
 1422              	.L118:
 1423 001c 00000000 		.word	.LANCHOR9
 1424              		.cfi_endproc
 1425              	.LFE9:
 1427              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1428              		.align	1
 1429              		.global	vTaskPrioritySet
 1430              		.syntax unified
 1431              		.code	16
 1432              		.thumb_func
 1433              		.fpu softvfp
 1435              	vTaskPrioritySet:
 1436              	.LFB10:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1437              		.loc 1 1461 0
 1438              		.cfi_startproc
 1439              		@ args = 0, pretend = 0, frame = 0
 1440              		@ frame_needed = 0, uses_anonymous_args = 0
 1441              	.LVL149:
 1442 0000 70B5     		push	{r4, r5, r6, lr}
 1443              	.LCFI17:
 1444              		.cfi_def_cfa_offset 16
 1445              		.cfi_offset 4, -16
 1446              		.cfi_offset 5, -12
 1447              		.cfi_offset 6, -8
 1448              		.cfi_offset 14, -4
 1449 0002 0400     		movs	r4, r0
 1450 0004 0D00     		movs	r5, r1
ARM GAS  /tmp/ccyt1kA6.s 			page 117


 1451              	.LVL150:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1452              		.loc 1 1466 0
 1453 0006 3729     		cmp	r1, #55
 1454 0008 01D9     		bls	.L121
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1455              		.loc 1 1466 0 is_stmt 0 discriminator 1
 1456              		.syntax divided
 1457              	@ 1466 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1458 000a 72B6     		 cpsid i 
 1459              	@ 0 "" 2
 1460              		.thumb
 1461              		.syntax unified
 1462              	.L122:
 1463 000c FEE7     		b	.L122
 1464              	.L121:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1465              		.loc 1 1478 0 is_stmt 1
 1466 000e FFF7FEFF 		bl	vPortEnterCritical
 1467              	.LVL151:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1468              		.loc 1 1482 0
 1469 0012 002C     		cmp	r4, #0
 1470 0014 01D1     		bne	.L123
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1471              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1472 0016 234B     		ldr	r3, .L134
 1473 0018 1C68     		ldr	r4, [r3]
 1474              	.LVL152:
 1475              	.L123:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1476              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1477 001a E26C     		ldr	r2, [r4, #76]
 1478              	.LVL153:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1479              		.loc 1 1496 0 discriminator 4
 1480 001c 9542     		cmp	r5, r2
 1481 001e 32D0     		beq	.L124
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1482              		.loc 1 1500 0
 1483 0020 34D9     		bls	.L125
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1484              		.loc 1 1502 0
 1485 0022 204B     		ldr	r3, .L134
 1486 0024 1B68     		ldr	r3, [r3]
 1487 0026 A342     		cmp	r3, r4
 1488 0028 36D0     		beq	.L131
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1489              		.loc 1 1507 0
 1490 002a 1E4B     		ldr	r3, .L134
 1491 002c 1B68     		ldr	r3, [r3]
 1492 002e DB6A     		ldr	r3, [r3, #44]
 1493 0030 AB42     		cmp	r3, r5
 1494 0032 33D9     		bls	.L132
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1495              		.loc 1 1464 0
 1496 0034 0026     		movs	r6, #0
ARM GAS  /tmp/ccyt1kA6.s 			page 118


 1497              	.L126:
 1498              	.LVL154:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1499              		.loc 1 1540 0
 1500 0036 E16A     		ldr	r1, [r4, #44]
 1501              	.LVL155:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1502              		.loc 1 1546 0
 1503 0038 8A42     		cmp	r2, r1
 1504 003a 00D1     		bne	.L127
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1505              		.loc 1 1548 0
 1506 003c E562     		str	r5, [r4, #44]
 1507              	.L127:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1508              		.loc 1 1556 0
 1509 003e E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1510              		.loc 1 1566 0
 1511 0040 A369     		ldr	r3, [r4, #24]
 1512 0042 002B     		cmp	r3, #0
 1513 0044 02DB     		blt	.L128
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1514              		.loc 1 1568 0
 1515 0046 3822     		movs	r2, #56
 1516              	.LVL156:
 1517 0048 551B     		subs	r5, r2, r5
 1518              	.LVL157:
 1519 004a A561     		str	r5, [r4, #24]
 1520              	.L128:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1521              		.loc 1 1579 0
 1522 004c 1423     		movs	r3, #20
 1523 004e 4B43     		muls	r3, r1
 1524 0050 154A     		ldr	r2, .L134+4
 1525 0052 9B18     		adds	r3, r3, r2
 1526 0054 6269     		ldr	r2, [r4, #20]
 1527 0056 9A42     		cmp	r2, r3
 1528 0058 11D1     		bne	.L129
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1529              		.loc 1 1584 0
 1530 005a 251D     		adds	r5, r4, #4
 1531 005c 2800     		movs	r0, r5
 1532 005e FFF7FEFF 		bl	uxListRemove
 1533              	.LVL158:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1534              		.loc 1 1595 0
 1535 0062 E36A     		ldr	r3, [r4, #44]
 1536 0064 114A     		ldr	r2, .L134+8
 1537 0066 1268     		ldr	r2, [r2]
 1538 0068 9342     		cmp	r3, r2
 1539 006a 01D9     		bls	.L130
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1540              		.loc 1 1595 0 is_stmt 0 discriminator 1
 1541 006c 0F4A     		ldr	r2, .L134+8
 1542 006e 1360     		str	r3, [r2]
 1543              	.L130:
ARM GAS  /tmp/ccyt1kA6.s 			page 119


1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1544              		.loc 1 1595 0 discriminator 3
 1545 0070 1420     		movs	r0, #20
 1546 0072 5843     		muls	r0, r3
 1547 0074 0C4B     		ldr	r3, .L134+4
 1548 0076 C018     		adds	r0, r0, r3
 1549 0078 2900     		movs	r1, r5
 1550 007a FFF7FEFF 		bl	vListInsertEnd
 1551              	.LVL159:
 1552              	.L129:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1553              		.loc 1 1602 0 is_stmt 1
 1554 007e 002E     		cmp	r6, #0
 1555 0080 01D0     		beq	.L124
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1556              		.loc 1 1604 0
 1557 0082 FFF7FEFF 		bl	vPortYield
 1558              	.LVL160:
 1559              	.L124:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1560              		.loc 1 1616 0
 1561 0086 FFF7FEFF 		bl	vPortExitCritical
 1562              	.LVL161:
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1563              		.loc 1 1617 0
 1564              		@ sp needed
 1565              	.LVL162:
 1566 008a 70BD     		pop	{r4, r5, r6, pc}
 1567              	.LVL163:
 1568              	.L125:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1569              		.loc 1 1523 0
 1570 008c 054B     		ldr	r3, .L134
 1571 008e 1B68     		ldr	r3, [r3]
 1572 0090 A342     		cmp	r3, r4
 1573 0092 05D0     		beq	.L133
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1574              		.loc 1 1464 0
 1575 0094 0026     		movs	r6, #0
 1576 0096 CEE7     		b	.L126
 1577              	.L131:
 1578 0098 0026     		movs	r6, #0
 1579 009a CCE7     		b	.L126
 1580              	.L132:
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1581              		.loc 1 1509 0
 1582 009c 0126     		movs	r6, #1
 1583 009e CAE7     		b	.L126
 1584              	.L133:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1585              		.loc 1 1528 0
 1586 00a0 0126     		movs	r6, #1
 1587 00a2 C8E7     		b	.L126
 1588              	.L135:
 1589              		.align	2
 1590              	.L134:
 1591 00a4 00000000 		.word	.LANCHOR9
ARM GAS  /tmp/ccyt1kA6.s 			page 120


 1592 00a8 00000000 		.word	pxReadyTasksLists
 1593 00ac 00000000 		.word	.LANCHOR12
 1594              		.cfi_endproc
 1595              	.LFE10:
 1597              		.section	.text.vTaskResume,"ax",%progbits
 1598              		.align	1
 1599              		.global	vTaskResume
 1600              		.syntax unified
 1601              		.code	16
 1602              		.thumb_func
 1603              		.fpu softvfp
 1605              	vTaskResume:
 1606              	.LFB13:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1607              		.loc 1 1772 0
 1608              		.cfi_startproc
 1609              		@ args = 0, pretend = 0, frame = 0
 1610              		@ frame_needed = 0, uses_anonymous_args = 0
 1611              	.LVL164:
 1612 0000 70B5     		push	{r4, r5, r6, lr}
 1613              	.LCFI18:
 1614              		.cfi_def_cfa_offset 16
 1615              		.cfi_offset 4, -16
 1616              		.cfi_offset 5, -12
 1617              		.cfi_offset 6, -8
 1618              		.cfi_offset 14, -4
 1619 0002 041E     		subs	r4, r0, #0
 1620              	.LVL165:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1621              		.loc 1 1776 0
 1622 0004 0DD0     		beq	.L142
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1623              		.loc 1 1780 0 discriminator 1
 1624 0006 154B     		ldr	r3, .L144
 1625 0008 1B68     		ldr	r3, [r3]
 1626 000a 8342     		cmp	r3, r0
 1627 000c 08D0     		beq	.L136
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1628              		.loc 1 1782 0
 1629 000e FFF7FEFF 		bl	vPortEnterCritical
 1630              	.LVL166:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1631              		.loc 1 1784 0
 1632 0012 2000     		movs	r0, r4
 1633 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1634              	.LVL167:
 1635 0018 0028     		cmp	r0, #0
 1636 001a 04D1     		bne	.L143
 1637              	.L140:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1638              		.loc 1 1811 0
 1639 001c FFF7FEFF 		bl	vPortExitCritical
 1640              	.LVL168:
 1641              	.L136:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1642              		.loc 1 1817 0
 1643              		@ sp needed
ARM GAS  /tmp/ccyt1kA6.s 			page 121


 1644              	.LVL169:
 1645 0020 70BD     		pop	{r4, r5, r6, pc}
 1646              	.LVL170:
 1647              	.L142:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1648              		.loc 1 1776 0 discriminator 1
 1649              		.syntax divided
 1650              	@ 1776 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1651 0022 72B6     		 cpsid i 
 1652              	@ 0 "" 2
 1653              		.thumb
 1654              		.syntax unified
 1655              	.L138:
 1656 0024 FEE7     		b	.L138
 1657              	.LVL171:
 1658              	.L143:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1659              		.loc 1 1790 0
 1660 0026 251D     		adds	r5, r4, #4
 1661 0028 2800     		movs	r0, r5
 1662 002a FFF7FEFF 		bl	uxListRemove
 1663              	.LVL172:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1664              		.loc 1 1791 0
 1665 002e E36A     		ldr	r3, [r4, #44]
 1666 0030 0B4A     		ldr	r2, .L144+4
 1667 0032 1268     		ldr	r2, [r2]
 1668 0034 9342     		cmp	r3, r2
 1669 0036 01D9     		bls	.L141
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1670              		.loc 1 1791 0 is_stmt 0 discriminator 1
 1671 0038 094A     		ldr	r2, .L144+4
 1672 003a 1360     		str	r3, [r2]
 1673              	.L141:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1674              		.loc 1 1791 0 discriminator 3
 1675 003c 1420     		movs	r0, #20
 1676 003e 5843     		muls	r0, r3
 1677 0040 084B     		ldr	r3, .L144+8
 1678 0042 C018     		adds	r0, r0, r3
 1679 0044 2900     		movs	r1, r5
 1680 0046 FFF7FEFF 		bl	vListInsertEnd
 1681              	.LVL173:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1682              		.loc 1 1794 0 is_stmt 1 discriminator 3
 1683 004a E26A     		ldr	r2, [r4, #44]
 1684 004c 034B     		ldr	r3, .L144
 1685 004e 1B68     		ldr	r3, [r3]
 1686 0050 DB6A     		ldr	r3, [r3, #44]
 1687 0052 9A42     		cmp	r2, r3
 1688 0054 E2D3     		bcc	.L140
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1689              		.loc 1 1799 0
 1690 0056 FFF7FEFF 		bl	vPortYield
 1691              	.LVL174:
 1692 005a DFE7     		b	.L140
 1693              	.L145:
ARM GAS  /tmp/ccyt1kA6.s 			page 122


 1694              		.align	2
 1695              	.L144:
 1696 005c 00000000 		.word	.LANCHOR9
 1697 0060 00000000 		.word	.LANCHOR12
 1698 0064 00000000 		.word	pxReadyTasksLists
 1699              		.cfi_endproc
 1700              	.LFE13:
 1702              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1703              		.align	1
 1704              		.global	xTaskResumeFromISR
 1705              		.syntax unified
 1706              		.code	16
 1707              		.thumb_func
 1708              		.fpu softvfp
 1710              	xTaskResumeFromISR:
 1711              	.LFB14:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1712              		.loc 1 1826 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 0, uses_anonymous_args = 0
 1716              	.LVL175:
 1717 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1718              	.LCFI19:
 1719              		.cfi_def_cfa_offset 24
 1720              		.cfi_offset 3, -24
 1721              		.cfi_offset 4, -20
 1722              		.cfi_offset 5, -16
 1723              		.cfi_offset 6, -12
 1724              		.cfi_offset 7, -8
 1725              		.cfi_offset 14, -4
 1726 0002 041E     		subs	r4, r0, #0
 1727              	.LVL176:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1728              		.loc 1 1831 0
 1729 0004 01D1     		bne	.L147
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1730              		.loc 1 1831 0 is_stmt 0 discriminator 1
 1731              		.syntax divided
 1732              	@ 1831 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1733 0006 72B6     		 cpsid i 
 1734              	@ 0 "" 2
 1735              		.thumb
 1736              		.syntax unified
 1737              	.L148:
 1738 0008 FEE7     		b	.L148
 1739              	.L147:
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1740              		.loc 1 1851 0 is_stmt 1
 1741 000a FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 1742              	.LVL177:
 1743 000e 0500     		movs	r5, r0
 1744              	.LVL178:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1745              		.loc 1 1853 0
 1746 0010 2000     		movs	r0, r4
 1747              	.LVL179:
ARM GAS  /tmp/ccyt1kA6.s 			page 123


 1748 0012 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1749              	.LVL180:
 1750 0016 0028     		cmp	r0, #0
 1751 0018 2AD0     		beq	.L153
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1752              		.loc 1 1858 0
 1753 001a 164B     		ldr	r3, .L155
 1754 001c 1B68     		ldr	r3, [r3]
 1755 001e 002B     		cmp	r3, #0
 1756 0020 1FD1     		bne	.L150
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1757              		.loc 1 1862 0
 1758 0022 154B     		ldr	r3, .L155+4
 1759 0024 1B68     		ldr	r3, [r3]
 1760 0026 DB6A     		ldr	r3, [r3, #44]
 1761 0028 E26A     		ldr	r2, [r4, #44]
 1762 002a 9A42     		cmp	r2, r3
 1763 002c 17D2     		bcs	.L154
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1764              		.loc 1 1827 0
 1765 002e 0027     		movs	r7, #0
 1766              	.L151:
 1767              	.LVL181:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1768              		.loc 1 1871 0
 1769 0030 261D     		adds	r6, r4, #4
 1770 0032 3000     		movs	r0, r6
 1771 0034 FFF7FEFF 		bl	uxListRemove
 1772              	.LVL182:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1773              		.loc 1 1872 0
 1774 0038 E36A     		ldr	r3, [r4, #44]
 1775 003a 104A     		ldr	r2, .L155+8
 1776 003c 1268     		ldr	r2, [r2]
 1777 003e 9342     		cmp	r3, r2
 1778 0040 01D9     		bls	.L152
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1779              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1780 0042 0E4A     		ldr	r2, .L155+8
 1781 0044 1360     		str	r3, [r2]
 1782              	.L152:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1783              		.loc 1 1872 0 discriminator 3
 1784 0046 1420     		movs	r0, #20
 1785 0048 5843     		muls	r0, r3
 1786 004a 0D4B     		ldr	r3, .L155+12
 1787 004c C018     		adds	r0, r0, r3
 1788 004e 3100     		movs	r1, r6
 1789 0050 FFF7FEFF 		bl	vListInsertEnd
 1790              	.LVL183:
 1791              	.L149:
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1792              		.loc 1 1887 0 is_stmt 1
 1793 0054 2800     		movs	r0, r5
 1794 0056 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 1795              	.LVL184:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 124


 1796              		.loc 1 1890 0
 1797 005a 3800     		movs	r0, r7
 1798              		@ sp needed
 1799              	.LVL185:
 1800              	.LVL186:
 1801              	.LVL187:
 1802 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1803              	.LVL188:
 1804              	.L154:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1805              		.loc 1 1864 0
 1806 005e 0127     		movs	r7, #1
 1807 0060 E6E7     		b	.L151
 1808              	.L150:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1809              		.loc 1 1879 0
 1810 0062 2100     		movs	r1, r4
 1811 0064 1831     		adds	r1, r1, #24
 1812 0066 0748     		ldr	r0, .L155+16
 1813 0068 FFF7FEFF 		bl	vListInsertEnd
 1814              	.LVL189:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1815              		.loc 1 1827 0
 1816 006c 0027     		movs	r7, #0
 1817 006e F1E7     		b	.L149
 1818              	.L153:
 1819 0070 0027     		movs	r7, #0
 1820 0072 EFE7     		b	.L149
 1821              	.L156:
 1822              		.align	2
 1823              	.L155:
 1824 0074 00000000 		.word	.LANCHOR15
 1825 0078 00000000 		.word	.LANCHOR9
 1826 007c 00000000 		.word	.LANCHOR12
 1827 0080 00000000 		.word	pxReadyTasksLists
 1828 0084 00000000 		.word	.LANCHOR1
 1829              		.cfi_endproc
 1830              	.LFE14:
 1832              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1833              		.align	1
 1834              		.global	vTaskStartScheduler
 1835              		.syntax unified
 1836              		.code	16
 1837              		.thumb_func
 1838              		.fpu softvfp
 1840              	vTaskStartScheduler:
 1841              	.LFB15:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1842              		.loc 1 1896 0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 16
 1845              		@ frame_needed = 0, uses_anonymous_args = 0
 1846 0000 10B5     		push	{r4, lr}
 1847              	.LCFI20:
 1848              		.cfi_def_cfa_offset 8
 1849              		.cfi_offset 4, -8
 1850              		.cfi_offset 14, -4
ARM GAS  /tmp/ccyt1kA6.s 			page 125


 1851 0002 88B0     		sub	sp, sp, #32
 1852              	.LCFI21:
 1853              		.cfi_def_cfa_offset 40
 1854              	.LBB6:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1855              		.loc 1 1902 0
 1856 0004 0024     		movs	r4, #0
 1857 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1858              		.loc 1 1903 0
 1859 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1860              		.loc 1 1908 0
 1861 000a 07AA     		add	r2, sp, #28
 1862 000c 06A9     		add	r1, sp, #24
 1863 000e 05A8     		add	r0, sp, #20
 1864 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1865              	.LVL190:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1866              		.loc 1 1909 0
 1867 0014 059B     		ldr	r3, [sp, #20]
 1868 0016 0293     		str	r3, [sp, #8]
 1869 0018 069B     		ldr	r3, [sp, #24]
 1870 001a 0193     		str	r3, [sp, #4]
 1871 001c 0094     		str	r4, [sp]
 1872 001e 0023     		movs	r3, #0
 1873 0020 079A     		ldr	r2, [sp, #28]
 1874 0022 1049     		ldr	r1, .L165
 1875 0024 1048     		ldr	r0, .L165+4
 1876 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1877              	.LVL191:
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1878              		.loc 1 1917 0
 1879 002a 0028     		cmp	r0, #0
 1880 002c 07D0     		beq	.L158
 1881              	.LVL192:
 1882              	.LBE6:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1883              		.loc 1 1942 0
 1884 002e FFF7FEFF 		bl	xTimerCreateTimerTask
 1885              	.LVL193:
 1886              	.L159:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1887              		.loc 1 1951 0
 1888 0032 0128     		cmp	r0, #1
 1889 0034 05D0     		beq	.L163
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1890              		.loc 1 2006 0
 1891 0036 431C     		adds	r3, r0, #1
 1892 0038 11D0     		beq	.L164
 1893              	.LVL194:
 1894              	.L157:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1895              		.loc 1 2012 0
 1896 003a 08B0     		add	sp, sp, #32
 1897              		@ sp needed
 1898 003c 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccyt1kA6.s 			page 126


 1899              	.L158:
 1900              	.LVL195:
 1901              	.LBB7:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1902              		.loc 1 1923 0
 1903 003e 0020     		movs	r0, #0
 1904 0040 F7E7     		b	.L159
 1905              	.LVL196:
 1906              	.L163:
 1907              	.LBE7:
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1908              		.loc 1 1967 0
 1909              		.syntax divided
 1910              	@ 1967 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1911 0042 72B6     		 cpsid i 
 1912              	@ 0 "" 2
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1913              		.loc 1 1977 0
 1914              		.thumb
 1915              		.syntax unified
 1916 0044 094B     		ldr	r3, .L165+8
 1917 0046 0122     		movs	r2, #1
 1918 0048 5242     		rsbs	r2, r2, #0
 1919 004a 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1920              		.loc 1 1978 0
 1921 004c 084B     		ldr	r3, .L165+12
 1922 004e 0232     		adds	r2, r2, #2
 1923 0050 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1924              		.loc 1 1979 0
 1925 0052 084B     		ldr	r3, .L165+16
 1926 0054 0022     		movs	r2, #0
 1927 0056 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1928              		.loc 1 1991 0
 1929 0058 FFF7FEFF 		bl	xPortStartScheduler
 1930              	.LVL197:
 1931 005c EDE7     		b	.L157
 1932              	.LVL198:
 1933              	.L164:
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1934              		.loc 1 2006 0 discriminator 1
 1935              		.syntax divided
 1936              	@ 2006 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1937 005e 72B6     		 cpsid i 
 1938              	@ 0 "" 2
 1939              		.thumb
 1940              		.syntax unified
 1941              	.L162:
 1942 0060 FEE7     		b	.L162
 1943              	.L166:
 1944 0062 C046     		.align	2
 1945              	.L165:
 1946 0064 00000000 		.word	.LC53
 1947 0068 00000000 		.word	prvIdleTask
 1948 006c 00000000 		.word	.LANCHOR3
ARM GAS  /tmp/ccyt1kA6.s 			page 127


 1949 0070 00000000 		.word	.LANCHOR10
 1950 0074 00000000 		.word	.LANCHOR14
 1951              		.cfi_endproc
 1952              	.LFE15:
 1954              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1955              		.align	1
 1956              		.global	vTaskEndScheduler
 1957              		.syntax unified
 1958              		.code	16
 1959              		.thumb_func
 1960              		.fpu softvfp
 1962              	vTaskEndScheduler:
 1963              	.LFB16:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1964              		.loc 1 2016 0
 1965              		.cfi_startproc
 1966              		@ args = 0, pretend = 0, frame = 0
 1967              		@ frame_needed = 0, uses_anonymous_args = 0
 1968 0000 10B5     		push	{r4, lr}
 1969              	.LCFI22:
 1970              		.cfi_def_cfa_offset 8
 1971              		.cfi_offset 4, -8
 1972              		.cfi_offset 14, -4
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1973              		.loc 1 2020 0
 1974              		.syntax divided
 1975              	@ 2020 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1976 0002 72B6     		 cpsid i 
 1977              	@ 0 "" 2
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1978              		.loc 1 2021 0
 1979              		.thumb
 1980              		.syntax unified
 1981 0004 024B     		ldr	r3, .L168
 1982 0006 0022     		movs	r2, #0
 1983 0008 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1984              		.loc 1 2022 0
 1985 000a FFF7FEFF 		bl	vPortEndScheduler
 1986              	.LVL199:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1987              		.loc 1 2023 0
 1988              		@ sp needed
 1989 000e 10BD     		pop	{r4, pc}
 1990              	.L169:
 1991              		.align	2
 1992              	.L168:
 1993 0010 00000000 		.word	.LANCHOR10
 1994              		.cfi_endproc
 1995              	.LFE16:
 1997              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1998              		.align	1
 1999              		.global	vTaskSuspendAll
 2000              		.syntax unified
 2001              		.code	16
 2002              		.thumb_func
 2003              		.fpu softvfp
ARM GAS  /tmp/ccyt1kA6.s 			page 128


 2005              	vTaskSuspendAll:
 2006              	.LFB17:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2007              		.loc 1 2027 0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 0
 2010              		@ frame_needed = 0, uses_anonymous_args = 0
 2011              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2012              		.loc 1 2032 0
 2013 0000 024A     		ldr	r2, .L171
 2014 0002 1368     		ldr	r3, [r2]
 2015 0004 0133     		adds	r3, r3, #1
 2016 0006 1360     		str	r3, [r2]
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2017              		.loc 1 2033 0
 2018              		@ sp needed
 2019 0008 7047     		bx	lr
 2020              	.L172:
 2021 000a C046     		.align	2
 2022              	.L171:
 2023 000c 00000000 		.word	.LANCHOR15
 2024              		.cfi_endproc
 2025              	.LFE17:
 2027              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2028              		.align	1
 2029              		.global	xTaskGetTickCount
 2030              		.syntax unified
 2031              		.code	16
 2032              		.thumb_func
 2033              		.fpu softvfp
 2035              	xTaskGetTickCount:
 2036              	.LFB19:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2037              		.loc 1 2210 0
 2038              		.cfi_startproc
 2039              		@ args = 0, pretend = 0, frame = 0
 2040              		@ frame_needed = 0, uses_anonymous_args = 0
 2041              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2042              		.loc 1 2216 0
 2043 0000 014B     		ldr	r3, .L174
 2044 0002 1868     		ldr	r0, [r3]
 2045              	.LVL200:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2046              		.loc 1 2221 0
 2047              		@ sp needed
 2048 0004 7047     		bx	lr
 2049              	.L175:
 2050 0006 C046     		.align	2
 2051              	.L174:
 2052 0008 00000000 		.word	.LANCHOR14
 2053              		.cfi_endproc
 2054              	.LFE19:
 2056              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2057              		.align	1
 2058              		.global	xTaskGetTickCountFromISR
ARM GAS  /tmp/ccyt1kA6.s 			page 129


 2059              		.syntax unified
 2060              		.code	16
 2061              		.thumb_func
 2062              		.fpu softvfp
 2064              	xTaskGetTickCountFromISR:
 2065              	.LFB20:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2066              		.loc 1 2225 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 0
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070              		@ link register save eliminated.
 2071              	.LVL201:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2072              		.loc 1 2247 0
 2073 0000 014B     		ldr	r3, .L177
 2074 0002 1868     		ldr	r0, [r3]
 2075              	.LVL202:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2076              		.loc 1 2252 0
 2077              		@ sp needed
 2078 0004 7047     		bx	lr
 2079              	.L178:
 2080 0006 C046     		.align	2
 2081              	.L177:
 2082 0008 00000000 		.word	.LANCHOR14
 2083              		.cfi_endproc
 2084              	.LFE20:
 2086              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2087              		.align	1
 2088              		.global	uxTaskGetNumberOfTasks
 2089              		.syntax unified
 2090              		.code	16
 2091              		.thumb_func
 2092              		.fpu softvfp
 2094              	uxTaskGetNumberOfTasks:
 2095              	.LFB21:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2096              		.loc 1 2256 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 0
 2099              		@ frame_needed = 0, uses_anonymous_args = 0
 2100              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2101              		.loc 1 2259 0
 2102 0000 014B     		ldr	r3, .L180
 2103 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2104              		.loc 1 2260 0
 2105              		@ sp needed
 2106 0004 7047     		bx	lr
 2107              	.L181:
 2108 0006 C046     		.align	2
 2109              	.L180:
 2110 0008 00000000 		.word	.LANCHOR8
 2111              		.cfi_endproc
 2112              	.LFE21:
ARM GAS  /tmp/ccyt1kA6.s 			page 130


 2114              		.section	.text.pcTaskGetName,"ax",%progbits
 2115              		.align	1
 2116              		.global	pcTaskGetName
 2117              		.syntax unified
 2118              		.code	16
 2119              		.thumb_func
 2120              		.fpu softvfp
 2122              	pcTaskGetName:
 2123              	.LFB22:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2124              		.loc 1 2264 0
 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 0
 2127              		@ frame_needed = 0, uses_anonymous_args = 0
 2128              		@ link register save eliminated.
 2129              	.LVL203:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2130              		.loc 1 2269 0
 2131 0000 0028     		cmp	r0, #0
 2132 0002 03D0     		beq	.L186
 2133              	.LVL204:
 2134              	.L183:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2135              		.loc 1 2270 0 discriminator 4
 2136 0004 0028     		cmp	r0, #0
 2137 0006 04D0     		beq	.L187
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2138              		.loc 1 2271 0
 2139 0008 3430     		adds	r0, r0, #52
 2140              	.LVL205:
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2141              		.loc 1 2272 0
 2142              		@ sp needed
 2143 000a 7047     		bx	lr
 2144              	.LVL206:
 2145              	.L186:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2146              		.loc 1 2269 0 discriminator 1
 2147 000c 024B     		ldr	r3, .L188
 2148 000e 1868     		ldr	r0, [r3]
 2149              	.LVL207:
 2150 0010 F8E7     		b	.L183
 2151              	.LVL208:
 2152              	.L187:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2153              		.loc 1 2270 0 discriminator 1
 2154              		.syntax divided
 2155              	@ 2270 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2156 0012 72B6     		 cpsid i 
 2157              	@ 0 "" 2
 2158              		.thumb
 2159              		.syntax unified
 2160              	.L185:
 2161 0014 FEE7     		b	.L185
 2162              	.L189:
 2163 0016 C046     		.align	2
 2164              	.L188:
ARM GAS  /tmp/ccyt1kA6.s 			page 131


 2165 0018 00000000 		.word	.LANCHOR9
 2166              		.cfi_endproc
 2167              	.LFE22:
 2169              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2170              		.align	1
 2171              		.global	xTaskIncrementTick
 2172              		.syntax unified
 2173              		.code	16
 2174              		.thumb_func
 2175              		.fpu softvfp
 2177              	xTaskIncrementTick:
 2178              	.LFB24:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2179              		.loc 1 2584 0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 0
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2184              	.LCFI23:
 2185              		.cfi_def_cfa_offset 24
 2186              		.cfi_offset 3, -24
 2187              		.cfi_offset 4, -20
 2188              		.cfi_offset 5, -16
 2189              		.cfi_offset 6, -12
 2190              		.cfi_offset 7, -8
 2191              		.cfi_offset 14, -4
 2192              	.LVL209:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2193              		.loc 1 2593 0
 2194 0002 394B     		ldr	r3, .L211
 2195 0004 1B68     		ldr	r3, [r3]
 2196 0006 002B     		cmp	r3, #0
 2197 0008 61D1     		bne	.L191
 2198              	.LBB8:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2199              		.loc 1 2597 0
 2200 000a 384B     		ldr	r3, .L211+4
 2201 000c 1D68     		ldr	r5, [r3]
 2202 000e 0135     		adds	r5, r5, #1
 2203              	.LVL210:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2204              		.loc 1 2601 0
 2205 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2206              		.loc 1 2603 0
 2207 0012 002D     		cmp	r5, #0
 2208 0014 12D1     		bne	.L192
 2209              	.LBB9:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2210              		.loc 1 2605 0
 2211 0016 364B     		ldr	r3, .L211+8
 2212 0018 1B68     		ldr	r3, [r3]
 2213 001a 1B68     		ldr	r3, [r3]
 2214 001c 002B     		cmp	r3, #0
 2215 001e 01D0     		beq	.L193
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2216              		.loc 1 2605 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccyt1kA6.s 			page 132


 2217              		.syntax divided
 2218              	@ 2605 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2219 0020 72B6     		 cpsid i 
 2220              	@ 0 "" 2
 2221              		.thumb
 2222              		.syntax unified
 2223              	.L194:
 2224 0022 FEE7     		b	.L194
 2225              	.L193:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2226              		.loc 1 2605 0 discriminator 2
 2227 0024 324A     		ldr	r2, .L211+8
 2228 0026 1168     		ldr	r1, [r2]
 2229              	.LVL211:
 2230 0028 324B     		ldr	r3, .L211+12
 2231 002a 1868     		ldr	r0, [r3]
 2232 002c 1060     		str	r0, [r2]
 2233 002e 1960     		str	r1, [r3]
 2234 0030 314A     		ldr	r2, .L211+16
 2235 0032 1368     		ldr	r3, [r2]
 2236 0034 0133     		adds	r3, r3, #1
 2237 0036 1360     		str	r3, [r2]
 2238 0038 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2239              	.LVL212:
 2240              	.L192:
 2241              	.LBE9:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2242              		.loc 1 2616 0 is_stmt 1
 2243 003c 2F4B     		ldr	r3, .L211+20
 2244 003e 1B68     		ldr	r3, [r3]
 2245 0040 AB42     		cmp	r3, r5
 2246 0042 3AD9     		bls	.L205
 2247              	.LBE8:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2248              		.loc 1 2587 0
 2249 0044 0024     		movs	r4, #0
 2250              	.LVL213:
 2251              	.L196:
 2252              	.LBB10:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2253              		.loc 1 2699 0
 2254 0046 2E4B     		ldr	r3, .L211+24
 2255 0048 1B68     		ldr	r3, [r3]
 2256 004a DA6A     		ldr	r2, [r3, #44]
 2257 004c 9300     		lsls	r3, r2, #2
 2258 004e 9B18     		adds	r3, r3, r2
 2259 0050 9A00     		lsls	r2, r3, #2
 2260 0052 2C4B     		ldr	r3, .L211+28
 2261 0054 D358     		ldr	r3, [r2, r3]
 2262 0056 012B     		cmp	r3, #1
 2263 0058 3ED9     		bls	.L203
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2264              		.loc 1 2701 0
 2265 005a 0124     		movs	r4, #1
 2266              	.LVL214:
 2267 005c 3CE0     		b	.L203
 2268              	.LVL215:
ARM GAS  /tmp/ccyt1kA6.s 			page 133


 2269              	.L206:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2270              		.loc 1 2682 0
 2271 005e 0124     		movs	r4, #1
 2272              	.LVL216:
 2273              	.L195:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2274              		.loc 1 2620 0
 2275 0060 234B     		ldr	r3, .L211+8
 2276 0062 1B68     		ldr	r3, [r3]
 2277 0064 1B68     		ldr	r3, [r3]
 2278 0066 002B     		cmp	r3, #0
 2279 0068 29D0     		beq	.L209
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2280              		.loc 1 2636 0
 2281 006a 214B     		ldr	r3, .L211+8
 2282 006c 1B68     		ldr	r3, [r3]
 2283 006e DB68     		ldr	r3, [r3, #12]
 2284 0070 DE68     		ldr	r6, [r3, #12]
 2285              	.LVL217:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2286              		.loc 1 2637 0
 2287 0072 7368     		ldr	r3, [r6, #4]
 2288              	.LVL218:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2289              		.loc 1 2639 0
 2290 0074 9D42     		cmp	r5, r3
 2291 0076 27D3     		bcc	.L210
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2292              		.loc 1 2655 0
 2293 0078 371D     		adds	r7, r6, #4
 2294 007a 3800     		movs	r0, r7
 2295 007c FFF7FEFF 		bl	uxListRemove
 2296              	.LVL219:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2297              		.loc 1 2659 0
 2298 0080 B36A     		ldr	r3, [r6, #40]
 2299 0082 002B     		cmp	r3, #0
 2300 0084 03D0     		beq	.L199
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2301              		.loc 1 2661 0
 2302 0086 3000     		movs	r0, r6
 2303 0088 1830     		adds	r0, r0, #24
 2304 008a FFF7FEFF 		bl	uxListRemove
 2305              	.LVL220:
 2306              	.L199:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2307              		.loc 1 2670 0
 2308 008e F26A     		ldr	r2, [r6, #44]
 2309 0090 1D4B     		ldr	r3, .L211+32
 2310 0092 1B68     		ldr	r3, [r3]
 2311 0094 9A42     		cmp	r2, r3
 2312 0096 01D9     		bls	.L200
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2313              		.loc 1 2670 0 is_stmt 0 discriminator 1
 2314 0098 1B4B     		ldr	r3, .L211+32
 2315 009a 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccyt1kA6.s 			page 134


 2316              	.L200:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2317              		.loc 1 2670 0 discriminator 3
 2318 009c 9300     		lsls	r3, r2, #2
 2319 009e 9B18     		adds	r3, r3, r2
 2320 00a0 9800     		lsls	r0, r3, #2
 2321 00a2 184B     		ldr	r3, .L211+28
 2322 00a4 C018     		adds	r0, r0, r3
 2323 00a6 3900     		movs	r1, r7
 2324 00a8 FFF7FEFF 		bl	vListInsertEnd
 2325              	.LVL221:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2326              		.loc 1 2680 0 is_stmt 1 discriminator 3
 2327 00ac F26A     		ldr	r2, [r6, #44]
 2328 00ae 144B     		ldr	r3, .L211+24
 2329 00b0 1B68     		ldr	r3, [r3]
 2330 00b2 DB6A     		ldr	r3, [r3, #44]
 2331 00b4 9A42     		cmp	r2, r3
 2332 00b6 D2D2     		bcs	.L206
 2333 00b8 D2E7     		b	.L195
 2334              	.LVL222:
 2335              	.L205:
 2336              	.LBE10:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2337              		.loc 1 2587 0
 2338 00ba 0024     		movs	r4, #0
 2339 00bc D0E7     		b	.L195
 2340              	.LVL223:
 2341              	.L209:
 2342              	.LBB11:
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2343              		.loc 1 2627 0
 2344 00be 0F4B     		ldr	r3, .L211+20
 2345 00c0 0122     		movs	r2, #1
 2346 00c2 5242     		rsbs	r2, r2, #0
 2347 00c4 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2348              		.loc 1 2628 0
 2349 00c6 BEE7     		b	.L196
 2350              	.LVL224:
 2351              	.L210:
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 2352              		.loc 1 2646 0
 2353 00c8 0C4A     		ldr	r2, .L211+20
 2354 00ca 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2355              		.loc 1 2647 0
 2356 00cc BBE7     		b	.L196
 2357              	.LVL225:
 2358              	.L191:
 2359              	.LBE11:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2360              		.loc 1 2727 0
 2361 00ce 0F4A     		ldr	r2, .L211+36
 2362 00d0 1368     		ldr	r3, [r2]
 2363 00d2 0133     		adds	r3, r3, #1
 2364 00d4 1360     		str	r3, [r2]
ARM GAS  /tmp/ccyt1kA6.s 			page 135


2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2365              		.loc 1 2587 0
 2366 00d6 0024     		movs	r4, #0
 2367              	.LVL226:
 2368              	.L203:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2369              		.loc 1 2740 0
 2370 00d8 0D4B     		ldr	r3, .L211+40
 2371 00da 1B68     		ldr	r3, [r3]
 2372 00dc 002B     		cmp	r3, #0
 2373 00de 00D0     		beq	.L190
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2374              		.loc 1 2742 0
 2375 00e0 0124     		movs	r4, #1
 2376              	.LVL227:
 2377              	.L190:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2378              		.loc 1 2752 0
 2379 00e2 2000     		movs	r0, r4
 2380              		@ sp needed
 2381 00e4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2382              	.L212:
 2383 00e6 C046     		.align	2
 2384              	.L211:
 2385 00e8 00000000 		.word	.LANCHOR15
 2386 00ec 00000000 		.word	.LANCHOR14
 2387 00f0 00000000 		.word	.LANCHOR2
 2388 00f4 00000000 		.word	.LANCHOR7
 2389 00f8 00000000 		.word	.LANCHOR16
 2390 00fc 00000000 		.word	.LANCHOR3
 2391 0100 00000000 		.word	.LANCHOR9
 2392 0104 00000000 		.word	pxReadyTasksLists
 2393 0108 00000000 		.word	.LANCHOR12
 2394 010c 00000000 		.word	.LANCHOR17
 2395 0110 00000000 		.word	.LANCHOR18
 2396              		.cfi_endproc
 2397              	.LFE24:
 2399              		.section	.text.xTaskResumeAll,"ax",%progbits
 2400              		.align	1
 2401              		.global	xTaskResumeAll
 2402              		.syntax unified
 2403              		.code	16
 2404              		.thumb_func
 2405              		.fpu softvfp
 2407              	xTaskResumeAll:
 2408              	.LFB18:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2409              		.loc 1 2100 0
 2410              		.cfi_startproc
 2411              		@ args = 0, pretend = 0, frame = 0
 2412              		@ frame_needed = 0, uses_anonymous_args = 0
 2413 0000 70B5     		push	{r4, r5, r6, lr}
 2414              	.LCFI24:
 2415              		.cfi_def_cfa_offset 16
 2416              		.cfi_offset 4, -16
 2417              		.cfi_offset 5, -12
 2418              		.cfi_offset 6, -8
ARM GAS  /tmp/ccyt1kA6.s 			page 136


 2419              		.cfi_offset 14, -4
 2420              	.LVL228:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2421              		.loc 1 2106 0
 2422 0002 314B     		ldr	r3, .L229
 2423 0004 1B68     		ldr	r3, [r3]
 2424 0006 002B     		cmp	r3, #0
 2425 0008 01D1     		bne	.L214
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2426              		.loc 1 2106 0 is_stmt 0 discriminator 1
 2427              		.syntax divided
 2428              	@ 2106 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2429 000a 72B6     		 cpsid i 
 2430              	@ 0 "" 2
 2431              		.thumb
 2432              		.syntax unified
 2433              	.L215:
 2434 000c FEE7     		b	.L215
 2435              	.L214:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2436              		.loc 1 2113 0 is_stmt 1
 2437 000e FFF7FEFF 		bl	vPortEnterCritical
 2438              	.LVL229:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2439              		.loc 1 2115 0
 2440 0012 2D4B     		ldr	r3, .L229
 2441 0014 1A68     		ldr	r2, [r3]
 2442 0016 013A     		subs	r2, r2, #1
 2443 0018 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2444              		.loc 1 2117 0
 2445 001a 1B68     		ldr	r3, [r3]
 2446 001c 002B     		cmp	r3, #0
 2447 001e 4ED1     		bne	.L225
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2448              		.loc 1 2119 0
 2449 0020 2A4B     		ldr	r3, .L229+4
 2450 0022 1B68     		ldr	r3, [r3]
 2451 0024 002B     		cmp	r3, #0
 2452 0026 04D1     		bne	.L226
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2453              		.loc 1 2102 0
 2454 0028 0024     		movs	r4, #0
 2455              	.LVL230:
 2456              	.L216:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2457              		.loc 1 2203 0
 2458 002a FFF7FEFF 		bl	vPortExitCritical
 2459              	.LVL231:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2460              		.loc 1 2206 0
 2461 002e 2000     		movs	r0, r4
 2462              		@ sp needed
 2463              	.LVL232:
 2464 0030 70BD     		pop	{r4, r5, r6, pc}
 2465              	.LVL233:
 2466              	.L226:
ARM GAS  /tmp/ccyt1kA6.s 			page 137


2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2467              		.loc 1 2101 0
 2468 0032 0024     		movs	r4, #0
 2469              	.LVL234:
 2470              	.L217:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2471              		.loc 1 2123 0
 2472 0034 264B     		ldr	r3, .L229+8
 2473 0036 1B68     		ldr	r3, [r3]
 2474 0038 002B     		cmp	r3, #0
 2475 003a 23D0     		beq	.L228
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2476              		.loc 1 2125 0
 2477 003c 244B     		ldr	r3, .L229+8
 2478 003e DB68     		ldr	r3, [r3, #12]
 2479 0040 DC68     		ldr	r4, [r3, #12]
 2480              	.LVL235:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2481              		.loc 1 2126 0
 2482 0042 2000     		movs	r0, r4
 2483 0044 1830     		adds	r0, r0, #24
 2484 0046 FFF7FEFF 		bl	uxListRemove
 2485              	.LVL236:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2486              		.loc 1 2127 0
 2487 004a 251D     		adds	r5, r4, #4
 2488 004c 2800     		movs	r0, r5
 2489 004e FFF7FEFF 		bl	uxListRemove
 2490              	.LVL237:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2491              		.loc 1 2128 0
 2492 0052 E26A     		ldr	r2, [r4, #44]
 2493 0054 1F4B     		ldr	r3, .L229+12
 2494 0056 1B68     		ldr	r3, [r3]
 2495 0058 9A42     		cmp	r2, r3
 2496 005a 01D9     		bls	.L218
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2497              		.loc 1 2128 0 is_stmt 0 discriminator 1
 2498 005c 1D4B     		ldr	r3, .L229+12
 2499 005e 1A60     		str	r2, [r3]
 2500              	.L218:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2501              		.loc 1 2128 0 discriminator 3
 2502 0060 9300     		lsls	r3, r2, #2
 2503 0062 9B18     		adds	r3, r3, r2
 2504 0064 9800     		lsls	r0, r3, #2
 2505 0066 1C4B     		ldr	r3, .L229+16
 2506 0068 C018     		adds	r0, r0, r3
 2507 006a 2900     		movs	r1, r5
 2508 006c FFF7FEFF 		bl	vListInsertEnd
 2509              	.LVL238:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2510              		.loc 1 2132 0 is_stmt 1 discriminator 3
 2511 0070 1A4B     		ldr	r3, .L229+20
 2512 0072 1B68     		ldr	r3, [r3]
 2513 0074 DB6A     		ldr	r3, [r3, #44]
 2514 0076 E26A     		ldr	r2, [r4, #44]
ARM GAS  /tmp/ccyt1kA6.s 			page 138


 2515 0078 9A42     		cmp	r2, r3
 2516 007a DBD3     		bcc	.L217
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2517              		.loc 1 2134 0
 2518 007c 184B     		ldr	r3, .L229+24
 2519 007e 0122     		movs	r2, #1
 2520 0080 1A60     		str	r2, [r3]
 2521 0082 D7E7     		b	.L217
 2522              	.L228:
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2523              		.loc 1 2142 0
 2524 0084 002C     		cmp	r4, #0
 2525 0086 01D0     		beq	.L221
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2526              		.loc 1 2150 0
 2527 0088 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2528              	.LVL239:
 2529              	.L221:
 2530              	.LBB12:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2531              		.loc 1 2158 0
 2532 008c 154B     		ldr	r3, .L229+28
 2533 008e 1C68     		ldr	r4, [r3]
 2534              	.LVL240:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2535              		.loc 1 2160 0
 2536 0090 002C     		cmp	r4, #0
 2537 0092 0CD0     		beq	.L222
 2538              	.L224:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2539              		.loc 1 2164 0
 2540 0094 FFF7FEFF 		bl	xTaskIncrementTick
 2541              	.LVL241:
 2542 0098 0028     		cmp	r0, #0
 2543 009a 02D0     		beq	.L223
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2544              		.loc 1 2166 0
 2545 009c 104B     		ldr	r3, .L229+24
 2546 009e 0122     		movs	r2, #1
 2547 00a0 1A60     		str	r2, [r3]
 2548              	.L223:
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2549              		.loc 1 2172 0
 2550 00a2 013C     		subs	r4, r4, #1
 2551              	.LVL242:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2552              		.loc 1 2173 0
 2553 00a4 002C     		cmp	r4, #0
 2554 00a6 F5D1     		bne	.L224
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2555              		.loc 1 2175 0
 2556 00a8 0E4B     		ldr	r3, .L229+28
 2557 00aa 0022     		movs	r2, #0
 2558 00ac 1A60     		str	r2, [r3]
 2559              	.L222:
 2560              	.LBE12:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccyt1kA6.s 			page 139


 2561              		.loc 1 2183 0
 2562 00ae 0C4B     		ldr	r3, .L229+24
 2563 00b0 1B68     		ldr	r3, [r3]
 2564 00b2 002B     		cmp	r3, #0
 2565 00b4 05D0     		beq	.L227
 2566              	.LVL243:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2567              		.loc 1 2190 0
 2568 00b6 FFF7FEFF 		bl	vPortYield
 2569              	.LVL244:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2570              		.loc 1 2187 0
 2571 00ba 0124     		movs	r4, #1
 2572              	.LVL245:
 2573 00bc B5E7     		b	.L216
 2574              	.LVL246:
 2575              	.L225:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2576              		.loc 1 2102 0
 2577 00be 0024     		movs	r4, #0
 2578 00c0 B3E7     		b	.L216
 2579              	.LVL247:
 2580              	.L227:
 2581 00c2 0024     		movs	r4, #0
 2582              	.LVL248:
 2583 00c4 B1E7     		b	.L216
 2584              	.L230:
 2585 00c6 C046     		.align	2
 2586              	.L229:
 2587 00c8 00000000 		.word	.LANCHOR15
 2588 00cc 00000000 		.word	.LANCHOR8
 2589 00d0 00000000 		.word	.LANCHOR1
 2590 00d4 00000000 		.word	.LANCHOR12
 2591 00d8 00000000 		.word	pxReadyTasksLists
 2592 00dc 00000000 		.word	.LANCHOR9
 2593 00e0 00000000 		.word	.LANCHOR18
 2594 00e4 00000000 		.word	.LANCHOR17
 2595              		.cfi_endproc
 2596              	.LFE18:
 2598              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2599              		.align	1
 2600              		.global	vTaskDelayUntil
 2601              		.syntax unified
 2602              		.code	16
 2603              		.thumb_func
 2604              		.fpu softvfp
 2606              	vTaskDelayUntil:
 2607              	.LFB5:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2608              		.loc 1 1199 0
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 0
 2611              		@ frame_needed = 0, uses_anonymous_args = 0
 2612              	.LVL249:
 2613 0000 70B5     		push	{r4, r5, r6, lr}
 2614              	.LCFI25:
 2615              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccyt1kA6.s 			page 140


 2616              		.cfi_offset 4, -16
 2617              		.cfi_offset 5, -12
 2618              		.cfi_offset 6, -8
 2619              		.cfi_offset 14, -4
 2620 0002 0500     		movs	r5, r0
 2621 0004 0C00     		movs	r4, r1
 2622              	.LVL250:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2623              		.loc 1 1203 0
 2624 0006 0028     		cmp	r0, #0
 2625 0008 03D0     		beq	.L246
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2626              		.loc 1 1204 0
 2627 000a 0029     		cmp	r1, #0
 2628 000c 03D1     		bne	.L234
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2629              		.loc 1 1204 0 is_stmt 0 discriminator 1
 2630              		.syntax divided
 2631              	@ 1204 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2632 000e 72B6     		 cpsid i 
 2633              	@ 0 "" 2
 2634              		.thumb
 2635              		.syntax unified
 2636              	.L235:
 2637 0010 FEE7     		b	.L235
 2638              	.L246:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2639              		.loc 1 1203 0 is_stmt 1 discriminator 1
 2640              		.syntax divided
 2641              	@ 1203 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2642 0012 72B6     		 cpsid i 
 2643              	@ 0 "" 2
 2644              		.thumb
 2645              		.syntax unified
 2646              	.L233:
 2647 0014 FEE7     		b	.L233
 2648              	.L234:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2649              		.loc 1 1205 0
 2650 0016 154B     		ldr	r3, .L247
 2651 0018 1B68     		ldr	r3, [r3]
 2652 001a 002B     		cmp	r3, #0
 2653 001c 01D0     		beq	.L236
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2654              		.loc 1 1205 0 is_stmt 0 discriminator 1
 2655              		.syntax divided
 2656              	@ 1205 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2657 001e 72B6     		 cpsid i 
 2658              	@ 0 "" 2
 2659              		.thumb
 2660              		.syntax unified
 2661              	.L237:
 2662 0020 FEE7     		b	.L237
 2663              	.L236:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2664              		.loc 1 1207 0 is_stmt 1
 2665 0022 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/ccyt1kA6.s 			page 141


 2666              	.LVL251:
 2667              	.LBB13:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2668              		.loc 1 1211 0
 2669 0026 124B     		ldr	r3, .L247+4
 2670 0028 1B68     		ldr	r3, [r3]
 2671              	.LVL252:
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2672              		.loc 1 1214 0
 2673 002a 2A68     		ldr	r2, [r5]
 2674 002c 1019     		adds	r0, r2, r4
 2675              	.LVL253:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2676              		.loc 1 1216 0
 2677 002e 9A42     		cmp	r2, r3
 2678 0030 13D9     		bls	.L238
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2679              		.loc 1 1223 0
 2680 0032 8242     		cmp	r2, r0
 2681 0034 07D8     		bhi	.L239
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2682              		.loc 1 1248 0
 2683 0036 2860     		str	r0, [r5]
 2684              	.LVL254:
 2685              	.L240:
 2686              	.LBE13:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2687              		.loc 1 1263 0
 2688 0038 FFF7FEFF 		bl	xTaskResumeAll
 2689              	.LVL255:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2690              		.loc 1 1267 0
 2691 003c 0028     		cmp	r0, #0
 2692 003e 01D1     		bne	.L231
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2693              		.loc 1 1269 0
 2694 0040 FFF7FEFF 		bl	vPortYield
 2695              	.LVL256:
 2696              	.L231:
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2697              		.loc 1 1275 0
 2698              		@ sp needed
 2699              	.LVL257:
 2700              	.LVL258:
 2701 0044 70BD     		pop	{r4, r5, r6, pc}
 2702              	.LVL259:
 2703              	.L239:
 2704              	.LBB14:
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2705              		.loc 1 1223 0 discriminator 1
 2706 0046 8342     		cmp	r3, r0
 2707 0048 01D3     		bcc	.L241
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2708              		.loc 1 1248 0
 2709 004a 2860     		str	r0, [r5]
 2710 004c F4E7     		b	.L240
 2711              	.L241:
ARM GAS  /tmp/ccyt1kA6.s 			page 142


 2712              	.LVL260:
 2713 004e 2860     		str	r0, [r5]
 2714              	.L242:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2715              		.loc 1 1256 0
 2716 0050 C01A     		subs	r0, r0, r3
 2717              	.LVL261:
 2718 0052 0021     		movs	r1, #0
 2719 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2720              	.LVL262:
 2721 0058 EEE7     		b	.L240
 2722              	.LVL263:
 2723              	.L238:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2724              		.loc 1 1237 0
 2725 005a 8242     		cmp	r2, r0
 2726 005c 01D8     		bhi	.L243
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2727              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2728 005e 8342     		cmp	r3, r0
 2729 0060 01D2     		bcs	.L244
 2730              	.L243:
 2731              	.LVL264:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2732              		.loc 1 1248 0 is_stmt 1
 2733 0062 2860     		str	r0, [r5]
 2734 0064 F4E7     		b	.L242
 2735              	.LVL265:
 2736              	.L244:
 2737 0066 2860     		str	r0, [r5]
 2738 0068 E6E7     		b	.L240
 2739              	.L248:
 2740 006a C046     		.align	2
 2741              	.L247:
 2742 006c 00000000 		.word	.LANCHOR15
 2743 0070 00000000 		.word	.LANCHOR14
 2744              	.LBE14:
 2745              		.cfi_endproc
 2746              	.LFE5:
 2748              		.section	.text.vTaskDelay,"ax",%progbits
 2749              		.align	1
 2750              		.global	vTaskDelay
 2751              		.syntax unified
 2752              		.code	16
 2753              		.thumb_func
 2754              		.fpu softvfp
 2756              	vTaskDelay:
 2757              	.LFB6:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2758              		.loc 1 1283 0
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 0
 2761              		@ frame_needed = 0, uses_anonymous_args = 0
 2762              	.LVL266:
 2763 0000 10B5     		push	{r4, lr}
 2764              	.LCFI26:
 2765              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccyt1kA6.s 			page 143


 2766              		.cfi_offset 4, -8
 2767              		.cfi_offset 14, -4
 2768 0002 041E     		subs	r4, r0, #0
 2769              	.LVL267:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2770              		.loc 1 1287 0
 2771 0004 0FD0     		beq	.L250
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2772              		.loc 1 1289 0
 2773 0006 094B     		ldr	r3, .L254
 2774 0008 1B68     		ldr	r3, [r3]
 2775 000a 002B     		cmp	r3, #0
 2776 000c 01D0     		beq	.L251
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2777              		.loc 1 1289 0 is_stmt 0 discriminator 1
 2778              		.syntax divided
 2779              	@ 1289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2780 000e 72B6     		 cpsid i 
 2781              	@ 0 "" 2
 2782              		.thumb
 2783              		.syntax unified
 2784              	.L252:
 2785 0010 FEE7     		b	.L252
 2786              	.L251:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2787              		.loc 1 1290 0 is_stmt 1
 2788 0012 FFF7FEFF 		bl	vTaskSuspendAll
 2789              	.LVL268:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2790              		.loc 1 1301 0
 2791 0016 0021     		movs	r1, #0
 2792 0018 2000     		movs	r0, r4
 2793 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2794              	.LVL269:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2795              		.loc 1 1303 0
 2796 001e FFF7FEFF 		bl	xTaskResumeAll
 2797              	.LVL270:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2798              		.loc 1 1312 0
 2799 0022 0028     		cmp	r0, #0
 2800 0024 01D1     		bne	.L249
 2801              	.LVL271:
 2802              	.L250:
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2803              		.loc 1 1314 0
 2804 0026 FFF7FEFF 		bl	vPortYield
 2805              	.LVL272:
 2806              	.L249:
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2807              		.loc 1 1320 0
 2808              		@ sp needed
 2809              	.LVL273:
 2810 002a 10BD     		pop	{r4, pc}
 2811              	.L255:
 2812              		.align	2
 2813              	.L254:
ARM GAS  /tmp/ccyt1kA6.s 			page 144


 2814 002c 00000000 		.word	.LANCHOR15
 2815              		.cfi_endproc
 2816              	.LFE6:
 2818              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2819              		.align	1
 2820              		.global	vTaskSwitchContext
 2821              		.syntax unified
 2822              		.code	16
 2823              		.thumb_func
 2824              		.fpu softvfp
 2826              	vTaskSwitchContext:
 2827              	.LFB25:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2828              		.loc 1 2846 0
 2829              		.cfi_startproc
 2830              		@ args = 0, pretend = 0, frame = 0
 2831              		@ frame_needed = 0, uses_anonymous_args = 0
 2832 0000 30B5     		push	{r4, r5, lr}
 2833              	.LCFI27:
 2834              		.cfi_def_cfa_offset 12
 2835              		.cfi_offset 4, -12
 2836              		.cfi_offset 5, -8
 2837              		.cfi_offset 14, -4
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2838              		.loc 1 2847 0
 2839 0002 1D4B     		ldr	r3, .L267
 2840 0004 1B68     		ldr	r3, [r3]
 2841 0006 002B     		cmp	r3, #0
 2842 0008 03D0     		beq	.L257
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2843              		.loc 1 2851 0
 2844 000a 1C4B     		ldr	r3, .L267+4
 2845 000c 0122     		movs	r2, #1
 2846 000e 1A60     		str	r2, [r3]
 2847              	.L256:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2848              		.loc 1 2901 0
 2849              		@ sp needed
 2850 0010 30BD     		pop	{r4, r5, pc}
 2851              	.L257:
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2852              		.loc 1 2855 0
 2853 0012 1A4B     		ldr	r3, .L267+4
 2854 0014 0022     		movs	r2, #0
 2855 0016 1A60     		str	r2, [r3]
 2856              	.LBB15:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2857              		.loc 1 2890 0
 2858 0018 194B     		ldr	r3, .L267+8
 2859 001a 1B68     		ldr	r3, [r3]
 2860              	.LVL274:
 2861              	.L259:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2862              		.loc 1 2890 0 is_stmt 0 discriminator 4
 2863 001c 9A00     		lsls	r2, r3, #2
 2864 001e D218     		adds	r2, r2, r3
 2865 0020 9100     		lsls	r1, r2, #2
ARM GAS  /tmp/ccyt1kA6.s 			page 145


 2866 0022 184A     		ldr	r2, .L267+12
 2867 0024 8A58     		ldr	r2, [r1, r2]
 2868 0026 002A     		cmp	r2, #0
 2869 0028 05D1     		bne	.L264
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2870              		.loc 1 2890 0 discriminator 5
 2871 002a 002B     		cmp	r3, #0
 2872 002c 01D0     		beq	.L265
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2873              		.loc 1 2890 0 discriminator 3
 2874 002e 013B     		subs	r3, r3, #1
 2875              	.LVL275:
 2876 0030 F4E7     		b	.L259
 2877              	.L265:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2878              		.loc 1 2890 0 discriminator 2
 2879              		.syntax divided
 2880              	@ 2890 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2881 0032 72B6     		 cpsid i 
 2882              	@ 0 "" 2
 2883              		.thumb
 2884              		.syntax unified
 2885              	.L261:
 2886 0034 FEE7     		b	.L261
 2887              	.L264:
 2888              	.LVL276:
 2889              	.LBB16:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2890              		.loc 1 2890 0 discriminator 6
 2891 0036 134D     		ldr	r5, .L267+12
 2892 0038 9900     		lsls	r1, r3, #2
 2893 003a CA18     		adds	r2, r1, r3
 2894 003c 9000     		lsls	r0, r2, #2
 2895 003e 2818     		adds	r0, r5, r0
 2896 0040 4268     		ldr	r2, [r0, #4]
 2897 0042 5468     		ldr	r4, [r2, #4]
 2898 0044 4460     		str	r4, [r0, #4]
 2899 0046 C918     		adds	r1, r1, r3
 2900 0048 8A00     		lsls	r2, r1, #2
 2901 004a 0832     		adds	r2, r2, #8
 2902 004c 5219     		adds	r2, r2, r5
 2903 004e 9442     		cmp	r4, r2
 2904 0050 0BD0     		beq	.L266
 2905              	.L263:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2906              		.loc 1 2890 0 discriminator 9
 2907 0052 9A00     		lsls	r2, r3, #2
 2908 0054 D218     		adds	r2, r2, r3
 2909 0056 9100     		lsls	r1, r2, #2
 2910 0058 0A4A     		ldr	r2, .L267+12
 2911 005a 5218     		adds	r2, r2, r1
 2912 005c 5268     		ldr	r2, [r2, #4]
 2913 005e D168     		ldr	r1, [r2, #12]
 2914 0060 094A     		ldr	r2, .L267+16
 2915 0062 1160     		str	r1, [r2]
 2916              	.LBE16:
 2917 0064 064A     		ldr	r2, .L267+8
ARM GAS  /tmp/ccyt1kA6.s 			page 146


 2918 0066 1360     		str	r3, [r2]
 2919              	.LBE15:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2920              		.loc 1 2901 0 is_stmt 1 discriminator 9
 2921 0068 D2E7     		b	.L256
 2922              	.L266:
 2923              	.LBB18:
 2924              	.LBB17:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2925              		.loc 1 2890 0 discriminator 7
 2926 006a 6068     		ldr	r0, [r4, #4]
 2927 006c 1421     		movs	r1, #20
 2928 006e 5943     		muls	r1, r3
 2929 0070 6A18     		adds	r2, r5, r1
 2930 0072 5060     		str	r0, [r2, #4]
 2931 0074 EDE7     		b	.L263
 2932              	.L268:
 2933 0076 C046     		.align	2
 2934              	.L267:
 2935 0078 00000000 		.word	.LANCHOR15
 2936 007c 00000000 		.word	.LANCHOR18
 2937 0080 00000000 		.word	.LANCHOR12
 2938 0084 00000000 		.word	pxReadyTasksLists
 2939 0088 00000000 		.word	.LANCHOR9
 2940              	.LBE17:
 2941              	.LBE18:
 2942              		.cfi_endproc
 2943              	.LFE25:
 2945              		.section	.text.vTaskSuspend,"ax",%progbits
 2946              		.align	1
 2947              		.global	vTaskSuspend
 2948              		.syntax unified
 2949              		.code	16
 2950              		.thumb_func
 2951              		.fpu softvfp
 2953              	vTaskSuspend:
 2954              	.LFB11:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2955              		.loc 1 1625 0
 2956              		.cfi_startproc
 2957              		@ args = 0, pretend = 0, frame = 0
 2958              		@ frame_needed = 0, uses_anonymous_args = 0
 2959              	.LVL277:
 2960 0000 70B5     		push	{r4, r5, r6, lr}
 2961              	.LCFI28:
 2962              		.cfi_def_cfa_offset 16
 2963              		.cfi_offset 4, -16
 2964              		.cfi_offset 5, -12
 2965              		.cfi_offset 6, -8
 2966              		.cfi_offset 14, -4
 2967 0002 0400     		movs	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2968              		.loc 1 1628 0
 2969 0004 FFF7FEFF 		bl	vPortEnterCritical
 2970              	.LVL278:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2971              		.loc 1 1632 0
ARM GAS  /tmp/ccyt1kA6.s 			page 147


 2972 0008 002C     		cmp	r4, #0
 2973 000a 1DD0     		beq	.L279
 2974              	.LVL279:
 2975              	.L270:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2976              		.loc 1 1638 0 discriminator 4
 2977 000c 251D     		adds	r5, r4, #4
 2978 000e 2800     		movs	r0, r5
 2979 0010 FFF7FEFF 		bl	uxListRemove
 2980              	.LVL280:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2981              		.loc 1 1648 0 discriminator 4
 2982 0014 A36A     		ldr	r3, [r4, #40]
 2983 0016 002B     		cmp	r3, #0
 2984 0018 03D0     		beq	.L271
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2985              		.loc 1 1650 0
 2986 001a 2000     		movs	r0, r4
 2987 001c 1830     		adds	r0, r0, #24
 2988 001e FFF7FEFF 		bl	uxListRemove
 2989              	.LVL281:
 2990              	.L271:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2991              		.loc 1 1657 0
 2992 0022 2900     		movs	r1, r5
 2993 0024 1C48     		ldr	r0, .L284
 2994 0026 FFF7FEFF 		bl	vListInsertEnd
 2995              	.LVL282:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2996              		.loc 1 1661 0
 2997 002a 5823     		movs	r3, #88
 2998 002c E35C     		ldrb	r3, [r4, r3]
 2999 002e 012B     		cmp	r3, #1
 3000 0030 0DD0     		beq	.L280
 3001              	.L272:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3002              		.loc 1 1670 0
 3003 0032 FFF7FEFF 		bl	vPortExitCritical
 3004              	.LVL283:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3005              		.loc 1 1672 0
 3006 0036 194B     		ldr	r3, .L284+4
 3007 0038 1B68     		ldr	r3, [r3]
 3008 003a 002B     		cmp	r3, #0
 3009 003c 0BD1     		bne	.L281
 3010              	.L273:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3011              		.loc 1 1687 0
 3012 003e 184B     		ldr	r3, .L284+8
 3013 0040 1B68     		ldr	r3, [r3]
 3014 0042 A342     		cmp	r3, r4
 3015 0044 0ED0     		beq	.L282
 3016              	.L269:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3017              		.loc 1 1718 0
 3018              		@ sp needed
 3019              	.LVL284:
ARM GAS  /tmp/ccyt1kA6.s 			page 148


 3020              	.LVL285:
 3021 0046 70BD     		pop	{r4, r5, r6, pc}
 3022              	.LVL286:
 3023              	.L279:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3024              		.loc 1 1632 0 discriminator 1
 3025 0048 154B     		ldr	r3, .L284+8
 3026 004a 1C68     		ldr	r4, [r3]
 3027              	.LVL287:
 3028 004c DEE7     		b	.L270
 3029              	.LVL288:
 3030              	.L280:
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3031              		.loc 1 1665 0
 3032 004e 5733     		adds	r3, r3, #87
 3033 0050 0022     		movs	r2, #0
 3034 0052 E254     		strb	r2, [r4, r3]
 3035 0054 EDE7     		b	.L272
 3036              	.L281:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3037              		.loc 1 1676 0
 3038 0056 FFF7FEFF 		bl	vPortEnterCritical
 3039              	.LVL289:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3040              		.loc 1 1678 0
 3041 005a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3042              	.LVL290:
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3043              		.loc 1 1680 0
 3044 005e FFF7FEFF 		bl	vPortExitCritical
 3045              	.LVL291:
 3046 0062 ECE7     		b	.L273
 3047              	.L282:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3048              		.loc 1 1689 0
 3049 0064 0D4B     		ldr	r3, .L284+4
 3050 0066 1B68     		ldr	r3, [r3]
 3051 0068 002B     		cmp	r3, #0
 3052 006a 08D0     		beq	.L275
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3053              		.loc 1 1692 0
 3054 006c 0D4B     		ldr	r3, .L284+12
 3055 006e 1B68     		ldr	r3, [r3]
 3056 0070 002B     		cmp	r3, #0
 3057 0072 01D0     		beq	.L276
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3058              		.loc 1 1692 0 is_stmt 0 discriminator 1
 3059              		.syntax divided
 3060              	@ 1692 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3061 0074 72B6     		 cpsid i 
 3062              	@ 0 "" 2
 3063              		.thumb
 3064              		.syntax unified
 3065              	.L277:
 3066 0076 FEE7     		b	.L277
 3067              	.L276:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 149


 3068              		.loc 1 1693 0 is_stmt 1
 3069 0078 FFF7FEFF 		bl	vPortYield
 3070              	.LVL292:
 3071 007c E3E7     		b	.L269
 3072              	.L275:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3073              		.loc 1 1700 0
 3074 007e 064B     		ldr	r3, .L284
 3075 0080 1A68     		ldr	r2, [r3]
 3076 0082 094B     		ldr	r3, .L284+16
 3077 0084 1B68     		ldr	r3, [r3]
 3078 0086 9A42     		cmp	r2, r3
 3079 0088 02D0     		beq	.L283
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3080              		.loc 1 1710 0
 3081 008a FFF7FEFF 		bl	vTaskSwitchContext
 3082              	.LVL293:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3083              		.loc 1 1718 0
 3084 008e DAE7     		b	.L269
 3085              	.L283:
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3086              		.loc 1 1706 0
 3087 0090 034B     		ldr	r3, .L284+8
 3088 0092 0022     		movs	r2, #0
 3089 0094 1A60     		str	r2, [r3]
 3090 0096 D6E7     		b	.L269
 3091              	.L285:
 3092              		.align	2
 3093              	.L284:
 3094 0098 00000000 		.word	.LANCHOR0
 3095 009c 00000000 		.word	.LANCHOR10
 3096 00a0 00000000 		.word	.LANCHOR9
 3097 00a4 00000000 		.word	.LANCHOR15
 3098 00a8 00000000 		.word	.LANCHOR8
 3099              		.cfi_endproc
 3100              	.LFE11:
 3102              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3103              		.align	1
 3104              		.global	vTaskPlaceOnEventList
 3105              		.syntax unified
 3106              		.code	16
 3107              		.thumb_func
 3108              		.fpu softvfp
 3110              	vTaskPlaceOnEventList:
 3111              	.LFB26:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3112              		.loc 1 2905 0
 3113              		.cfi_startproc
 3114              		@ args = 0, pretend = 0, frame = 0
 3115              		@ frame_needed = 0, uses_anonymous_args = 0
 3116              	.LVL294:
 3117 0000 10B5     		push	{r4, lr}
 3118              	.LCFI29:
 3119              		.cfi_def_cfa_offset 8
 3120              		.cfi_offset 4, -8
 3121              		.cfi_offset 14, -4
ARM GAS  /tmp/ccyt1kA6.s 			page 150


 3122 0002 0C00     		movs	r4, r1
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3123              		.loc 1 2906 0
 3124 0004 0028     		cmp	r0, #0
 3125 0006 01D1     		bne	.L287
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3126              		.loc 1 2906 0 is_stmt 0 discriminator 1
 3127              		.syntax divided
 3128              	@ 2906 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3129 0008 72B6     		 cpsid i 
 3130              	@ 0 "" 2
 3131              		.thumb
 3132              		.syntax unified
 3133              	.L288:
 3134 000a FEE7     		b	.L288
 3135              	.L287:
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3136              		.loc 1 2915 0 is_stmt 1
 3137 000c 044B     		ldr	r3, .L289
 3138 000e 1968     		ldr	r1, [r3]
 3139              	.LVL295:
 3140 0010 1831     		adds	r1, r1, #24
 3141 0012 FFF7FEFF 		bl	vListInsert
 3142              	.LVL296:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3143              		.loc 1 2917 0
 3144 0016 0121     		movs	r1, #1
 3145 0018 2000     		movs	r0, r4
 3146 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3147              	.LVL297:
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3148              		.loc 1 2918 0
 3149              		@ sp needed
 3150              	.LVL298:
 3151 001e 10BD     		pop	{r4, pc}
 3152              	.L290:
 3153              		.align	2
 3154              	.L289:
 3155 0020 00000000 		.word	.LANCHOR9
 3156              		.cfi_endproc
 3157              	.LFE26:
 3159              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3160              		.align	1
 3161              		.global	vTaskPlaceOnUnorderedEventList
 3162              		.syntax unified
 3163              		.code	16
 3164              		.thumb_func
 3165              		.fpu softvfp
 3167              	vTaskPlaceOnUnorderedEventList:
 3168              	.LFB27:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3169              		.loc 1 2922 0
 3170              		.cfi_startproc
 3171              		@ args = 0, pretend = 0, frame = 0
 3172              		@ frame_needed = 0, uses_anonymous_args = 0
 3173              	.LVL299:
 3174 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccyt1kA6.s 			page 151


 3175              	.LCFI30:
 3176              		.cfi_def_cfa_offset 16
 3177              		.cfi_offset 4, -16
 3178              		.cfi_offset 5, -12
 3179              		.cfi_offset 6, -8
 3180              		.cfi_offset 14, -4
 3181 0002 1400     		movs	r4, r2
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3182              		.loc 1 2923 0
 3183 0004 0028     		cmp	r0, #0
 3184 0006 01D1     		bne	.L292
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3185              		.loc 1 2923 0 is_stmt 0 discriminator 1
 3186              		.syntax divided
 3187              	@ 2923 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3188 0008 72B6     		 cpsid i 
 3189              	@ 0 "" 2
 3190              		.thumb
 3191              		.syntax unified
 3192              	.L293:
 3193 000a FEE7     		b	.L293
 3194              	.L292:
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3195              		.loc 1 2927 0 is_stmt 1
 3196 000c 0A4B     		ldr	r3, .L296
 3197 000e 1B68     		ldr	r3, [r3]
 3198 0010 002B     		cmp	r3, #0
 3199 0012 01D1     		bne	.L294
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3200              		.loc 1 2927 0 is_stmt 0 discriminator 1
 3201              		.syntax divided
 3202              	@ 2927 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3203 0014 72B6     		 cpsid i 
 3204              	@ 0 "" 2
 3205              		.thumb
 3206              		.syntax unified
 3207              	.L295:
 3208 0016 FEE7     		b	.L295
 3209              	.L294:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3210              		.loc 1 2932 0 is_stmt 1
 3211 0018 084A     		ldr	r2, .L296+4
 3212              	.LVL300:
 3213 001a 1568     		ldr	r5, [r2]
 3214 001c 8023     		movs	r3, #128
 3215 001e 1B06     		lsls	r3, r3, #24
 3216 0020 1943     		orrs	r1, r3
 3217              	.LVL301:
 3218 0022 A961     		str	r1, [r5, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3219              		.loc 1 2939 0
 3220 0024 1168     		ldr	r1, [r2]
 3221 0026 1831     		adds	r1, r1, #24
 3222 0028 FFF7FEFF 		bl	vListInsertEnd
 3223              	.LVL302:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3224              		.loc 1 2941 0
ARM GAS  /tmp/ccyt1kA6.s 			page 152


 3225 002c 0121     		movs	r1, #1
 3226 002e 2000     		movs	r0, r4
 3227 0030 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3228              	.LVL303:
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3229              		.loc 1 2942 0
 3230              		@ sp needed
 3231              	.LVL304:
 3232 0034 70BD     		pop	{r4, r5, r6, pc}
 3233              	.L297:
 3234 0036 C046     		.align	2
 3235              	.L296:
 3236 0038 00000000 		.word	.LANCHOR15
 3237 003c 00000000 		.word	.LANCHOR9
 3238              		.cfi_endproc
 3239              	.LFE27:
 3241              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3242              		.align	1
 3243              		.global	vTaskPlaceOnEventListRestricted
 3244              		.syntax unified
 3245              		.code	16
 3246              		.thumb_func
 3247              		.fpu softvfp
 3249              	vTaskPlaceOnEventListRestricted:
 3250              	.LFB28:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3251              		.loc 1 2948 0
 3252              		.cfi_startproc
 3253              		@ args = 0, pretend = 0, frame = 0
 3254              		@ frame_needed = 0, uses_anonymous_args = 0
 3255              	.LVL305:
 3256 0000 70B5     		push	{r4, r5, r6, lr}
 3257              	.LCFI31:
 3258              		.cfi_def_cfa_offset 16
 3259              		.cfi_offset 4, -16
 3260              		.cfi_offset 5, -12
 3261              		.cfi_offset 6, -8
 3262              		.cfi_offset 14, -4
 3263 0002 0C00     		movs	r4, r1
 3264 0004 1500     		movs	r5, r2
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3265              		.loc 1 2949 0
 3266 0006 0028     		cmp	r0, #0
 3267 0008 01D1     		bne	.L299
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3268              		.loc 1 2949 0 is_stmt 0 discriminator 1
 3269              		.syntax divided
 3270              	@ 2949 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3271 000a 72B6     		 cpsid i 
 3272              	@ 0 "" 2
 3273              		.thumb
 3274              		.syntax unified
 3275              	.L300:
 3276 000c FEE7     		b	.L300
 3277              	.L299:
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3278              		.loc 1 2961 0 is_stmt 1
ARM GAS  /tmp/ccyt1kA6.s 			page 153


 3279 000e 074B     		ldr	r3, .L303
 3280 0010 1968     		ldr	r1, [r3]
 3281              	.LVL306:
 3282 0012 1831     		adds	r1, r1, #24
 3283 0014 FFF7FEFF 		bl	vListInsertEnd
 3284              	.LVL307:
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3285              		.loc 1 2966 0
 3286 0018 002D     		cmp	r5, #0
 3287 001a 01D0     		beq	.L301
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3288              		.loc 1 2968 0
 3289 001c 0124     		movs	r4, #1
 3290              	.LVL308:
 3291 001e 6442     		rsbs	r4, r4, #0
 3292              	.L301:
 3293              	.LVL309:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3294              		.loc 1 2972 0
 3295 0020 2900     		movs	r1, r5
 3296 0022 2000     		movs	r0, r4
 3297 0024 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3298              	.LVL310:
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3299              		.loc 1 2973 0
 3300              		@ sp needed
 3301              	.LVL311:
 3302              	.LVL312:
 3303 0028 70BD     		pop	{r4, r5, r6, pc}
 3304              	.L304:
 3305 002a C046     		.align	2
 3306              	.L303:
 3307 002c 00000000 		.word	.LANCHOR9
 3308              		.cfi_endproc
 3309              	.LFE28:
 3311              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3312              		.align	1
 3313              		.global	xTaskRemoveFromEventList
 3314              		.syntax unified
 3315              		.code	16
 3316              		.thumb_func
 3317              		.fpu softvfp
 3319              	xTaskRemoveFromEventList:
 3320              	.LFB29:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3321              		.loc 1 2979 0
 3322              		.cfi_startproc
 3323              		@ args = 0, pretend = 0, frame = 0
 3324              		@ frame_needed = 0, uses_anonymous_args = 0
 3325              	.LVL313:
 3326 0000 70B5     		push	{r4, r5, r6, lr}
 3327              	.LCFI32:
 3328              		.cfi_def_cfa_offset 16
 3329              		.cfi_offset 4, -16
 3330              		.cfi_offset 5, -12
 3331              		.cfi_offset 6, -8
 3332              		.cfi_offset 14, -4
ARM GAS  /tmp/ccyt1kA6.s 			page 154


2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3333              		.loc 1 2996 0
 3334 0002 C368     		ldr	r3, [r0, #12]
 3335 0004 DC68     		ldr	r4, [r3, #12]
 3336              	.LVL314:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3337              		.loc 1 2997 0
 3338 0006 002C     		cmp	r4, #0
 3339 0008 01D1     		bne	.L306
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3340              		.loc 1 2997 0 is_stmt 0 discriminator 1
 3341              		.syntax divided
 3342              	@ 2997 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3343 000a 72B6     		 cpsid i 
 3344              	@ 0 "" 2
 3345              		.thumb
 3346              		.syntax unified
 3347              	.L307:
 3348 000c FEE7     		b	.L307
 3349              	.L306:
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3350              		.loc 1 2998 0 is_stmt 1
 3351 000e 2500     		movs	r5, r4
 3352 0010 1835     		adds	r5, r5, #24
 3353 0012 2800     		movs	r0, r5
 3354              	.LVL315:
 3355 0014 FFF7FEFF 		bl	uxListRemove
 3356              	.LVL316:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3357              		.loc 1 3000 0
 3358 0018 144B     		ldr	r3, .L313
 3359 001a 1B68     		ldr	r3, [r3]
 3360 001c 002B     		cmp	r3, #0
 3361 001e 1DD1     		bne	.L308
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3362              		.loc 1 3002 0
 3363 0020 251D     		adds	r5, r4, #4
 3364 0022 2800     		movs	r0, r5
 3365 0024 FFF7FEFF 		bl	uxListRemove
 3366              	.LVL317:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3367              		.loc 1 3003 0
 3368 0028 E26A     		ldr	r2, [r4, #44]
 3369 002a 114B     		ldr	r3, .L313+4
 3370 002c 1B68     		ldr	r3, [r3]
 3371 002e 9A42     		cmp	r2, r3
 3372 0030 01D9     		bls	.L309
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3373              		.loc 1 3003 0 is_stmt 0 discriminator 1
 3374 0032 0F4B     		ldr	r3, .L313+4
 3375 0034 1A60     		str	r2, [r3]
 3376              	.L309:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3377              		.loc 1 3003 0 discriminator 3
 3378 0036 9300     		lsls	r3, r2, #2
 3379 0038 9B18     		adds	r3, r3, r2
 3380 003a 9800     		lsls	r0, r3, #2
ARM GAS  /tmp/ccyt1kA6.s 			page 155


 3381 003c 0D4B     		ldr	r3, .L313+8
 3382 003e C018     		adds	r0, r0, r3
 3383 0040 2900     		movs	r1, r5
 3384 0042 FFF7FEFF 		bl	vListInsertEnd
 3385              	.LVL318:
 3386              	.L310:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3387              		.loc 1 3012 0 is_stmt 1
 3388 0046 E26A     		ldr	r2, [r4, #44]
 3389 0048 0B4B     		ldr	r3, .L313+12
 3390 004a 1B68     		ldr	r3, [r3]
 3391 004c DB6A     		ldr	r3, [r3, #44]
 3392 004e 9A42     		cmp	r2, r3
 3393 0050 09D9     		bls	.L312
 3394              	.LVL319:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3395              		.loc 1 3021 0
 3396 0052 0A4B     		ldr	r3, .L313+16
 3397 0054 0122     		movs	r2, #1
 3398 0056 1A60     		str	r2, [r3]
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3399              		.loc 1 3017 0
 3400 0058 0120     		movs	r0, #1
 3401              	.LVL320:
 3402              	.L305:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3403              		.loc 1 3043 0
 3404              		@ sp needed
 3405              	.LVL321:
 3406 005a 70BD     		pop	{r4, r5, r6, pc}
 3407              	.LVL322:
 3408              	.L308:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3409              		.loc 1 3009 0
 3410 005c 2900     		movs	r1, r5
 3411 005e 0848     		ldr	r0, .L313+20
 3412 0060 FFF7FEFF 		bl	vListInsertEnd
 3413              	.LVL323:
 3414 0064 EFE7     		b	.L310
 3415              	.L312:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3416              		.loc 1 3025 0
 3417 0066 0020     		movs	r0, #0
 3418              	.LVL324:
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3419              		.loc 1 3042 0
 3420 0068 F7E7     		b	.L305
 3421              	.L314:
 3422 006a C046     		.align	2
 3423              	.L313:
 3424 006c 00000000 		.word	.LANCHOR15
 3425 0070 00000000 		.word	.LANCHOR12
 3426 0074 00000000 		.word	pxReadyTasksLists
 3427 0078 00000000 		.word	.LANCHOR9
 3428 007c 00000000 		.word	.LANCHOR18
 3429 0080 00000000 		.word	.LANCHOR1
 3430              		.cfi_endproc
ARM GAS  /tmp/ccyt1kA6.s 			page 156


 3431              	.LFE29:
 3433              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3434              		.align	1
 3435              		.global	vTaskRemoveFromUnorderedEventList
 3436              		.syntax unified
 3437              		.code	16
 3438              		.thumb_func
 3439              		.fpu softvfp
 3441              	vTaskRemoveFromUnorderedEventList:
 3442              	.LFB30:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3443              		.loc 1 3047 0
 3444              		.cfi_startproc
 3445              		@ args = 0, pretend = 0, frame = 0
 3446              		@ frame_needed = 0, uses_anonymous_args = 0
 3447              	.LVL325:
 3448 0000 70B5     		push	{r4, r5, r6, lr}
 3449              	.LCFI33:
 3450              		.cfi_def_cfa_offset 16
 3451              		.cfi_offset 4, -16
 3452              		.cfi_offset 5, -12
 3453              		.cfi_offset 6, -8
 3454              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3455              		.loc 1 3052 0
 3456 0002 174B     		ldr	r3, .L323
 3457 0004 1B68     		ldr	r3, [r3]
 3458 0006 002B     		cmp	r3, #0
 3459 0008 01D1     		bne	.L316
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3460              		.loc 1 3052 0 is_stmt 0 discriminator 1
 3461              		.syntax divided
 3462              	@ 3052 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3463 000a 72B6     		 cpsid i 
 3464              	@ 0 "" 2
 3465              		.thumb
 3466              		.syntax unified
 3467              	.L317:
 3468 000c FEE7     		b	.L317
 3469              	.L316:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3470              		.loc 1 3055 0 is_stmt 1
 3471 000e 8023     		movs	r3, #128
 3472 0010 1B06     		lsls	r3, r3, #24
 3473 0012 1943     		orrs	r1, r3
 3474              	.LVL326:
 3475 0014 0160     		str	r1, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3476              		.loc 1 3059 0
 3477 0016 C468     		ldr	r4, [r0, #12]
 3478              	.LVL327:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3479              		.loc 1 3060 0
 3480 0018 002C     		cmp	r4, #0
 3481 001a 1ED0     		beq	.L322
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3482              		.loc 1 3061 0
ARM GAS  /tmp/ccyt1kA6.s 			page 157


 3483 001c FFF7FEFF 		bl	uxListRemove
 3484              	.LVL328:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3485              		.loc 1 3066 0
 3486 0020 251D     		adds	r5, r4, #4
 3487 0022 2800     		movs	r0, r5
 3488 0024 FFF7FEFF 		bl	uxListRemove
 3489              	.LVL329:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3490              		.loc 1 3067 0
 3491 0028 E26A     		ldr	r2, [r4, #44]
 3492 002a 0E4B     		ldr	r3, .L323+4
 3493 002c 1B68     		ldr	r3, [r3]
 3494 002e 9A42     		cmp	r2, r3
 3495 0030 01D9     		bls	.L320
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3496              		.loc 1 3067 0 is_stmt 0 discriminator 1
 3497 0032 0C4B     		ldr	r3, .L323+4
 3498 0034 1A60     		str	r2, [r3]
 3499              	.L320:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3500              		.loc 1 3067 0 discriminator 3
 3501 0036 9300     		lsls	r3, r2, #2
 3502 0038 9B18     		adds	r3, r3, r2
 3503 003a 9800     		lsls	r0, r3, #2
 3504 003c 0A4B     		ldr	r3, .L323+8
 3505 003e C018     		adds	r0, r0, r3
 3506 0040 2900     		movs	r1, r5
 3507 0042 FFF7FEFF 		bl	vListInsertEnd
 3508              	.LVL330:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3509              		.loc 1 3069 0 is_stmt 1 discriminator 3
 3510 0046 E26A     		ldr	r2, [r4, #44]
 3511 0048 084B     		ldr	r3, .L323+12
 3512 004a 1B68     		ldr	r3, [r3]
 3513 004c DB6A     		ldr	r3, [r3, #44]
 3514 004e 9A42     		cmp	r2, r3
 3515 0050 02D9     		bls	.L315
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3516              		.loc 1 3075 0
 3517 0052 074B     		ldr	r3, .L323+16
 3518 0054 0122     		movs	r2, #1
 3519 0056 1A60     		str	r2, [r3]
 3520              	.L315:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3521              		.loc 1 3077 0
 3522              		@ sp needed
 3523              	.LVL331:
 3524              	.LVL332:
 3525 0058 70BD     		pop	{r4, r5, r6, pc}
 3526              	.LVL333:
 3527              	.L322:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3528              		.loc 1 3060 0 discriminator 1
 3529              		.syntax divided
 3530              	@ 3060 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3531 005a 72B6     		 cpsid i 
ARM GAS  /tmp/ccyt1kA6.s 			page 158


 3532              	@ 0 "" 2
 3533              		.thumb
 3534              		.syntax unified
 3535              	.L319:
 3536 005c FEE7     		b	.L319
 3537              	.L324:
 3538 005e C046     		.align	2
 3539              	.L323:
 3540 0060 00000000 		.word	.LANCHOR15
 3541 0064 00000000 		.word	.LANCHOR12
 3542 0068 00000000 		.word	pxReadyTasksLists
 3543 006c 00000000 		.word	.LANCHOR9
 3544 0070 00000000 		.word	.LANCHOR18
 3545              		.cfi_endproc
 3546              	.LFE30:
 3548              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3549              		.align	1
 3550              		.global	vTaskSetTimeOutState
 3551              		.syntax unified
 3552              		.code	16
 3553              		.thumb_func
 3554              		.fpu softvfp
 3556              	vTaskSetTimeOutState:
 3557              	.LFB31:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3558              		.loc 1 3081 0
 3559              		.cfi_startproc
 3560              		@ args = 0, pretend = 0, frame = 0
 3561              		@ frame_needed = 0, uses_anonymous_args = 0
 3562              	.LVL334:
 3563 0000 10B5     		push	{r4, lr}
 3564              	.LCFI34:
 3565              		.cfi_def_cfa_offset 8
 3566              		.cfi_offset 4, -8
 3567              		.cfi_offset 14, -4
 3568 0002 041E     		subs	r4, r0, #0
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3569              		.loc 1 3082 0
 3570 0004 01D1     		bne	.L326
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3571              		.loc 1 3082 0 is_stmt 0 discriminator 1
 3572              		.syntax divided
 3573              	@ 3082 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3574 0006 72B6     		 cpsid i 
 3575              	@ 0 "" 2
 3576              		.thumb
 3577              		.syntax unified
 3578              	.L327:
 3579 0008 FEE7     		b	.L327
 3580              	.L326:
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3581              		.loc 1 3083 0 is_stmt 1
 3582 000a FFF7FEFF 		bl	vPortEnterCritical
 3583              	.LVL335:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3584              		.loc 1 3085 0
 3585 000e 044B     		ldr	r3, .L328
ARM GAS  /tmp/ccyt1kA6.s 			page 159


 3586 0010 1B68     		ldr	r3, [r3]
 3587 0012 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3588              		.loc 1 3086 0
 3589 0014 034B     		ldr	r3, .L328+4
 3590 0016 1B68     		ldr	r3, [r3]
 3591 0018 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3592              		.loc 1 3088 0
 3593 001a FFF7FEFF 		bl	vPortExitCritical
 3594              	.LVL336:
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3595              		.loc 1 3089 0
 3596              		@ sp needed
 3597              	.LVL337:
 3598 001e 10BD     		pop	{r4, pc}
 3599              	.L329:
 3600              		.align	2
 3601              	.L328:
 3602 0020 00000000 		.word	.LANCHOR16
 3603 0024 00000000 		.word	.LANCHOR14
 3604              		.cfi_endproc
 3605              	.LFE31:
 3607              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3608              		.align	1
 3609              		.global	vTaskInternalSetTimeOutState
 3610              		.syntax unified
 3611              		.code	16
 3612              		.thumb_func
 3613              		.fpu softvfp
 3615              	vTaskInternalSetTimeOutState:
 3616              	.LFB32:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3617              		.loc 1 3093 0
 3618              		.cfi_startproc
 3619              		@ args = 0, pretend = 0, frame = 0
 3620              		@ frame_needed = 0, uses_anonymous_args = 0
 3621              		@ link register save eliminated.
 3622              	.LVL338:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3623              		.loc 1 3095 0
 3624 0000 034B     		ldr	r3, .L331
 3625 0002 1B68     		ldr	r3, [r3]
 3626 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3627              		.loc 1 3096 0
 3628 0006 034B     		ldr	r3, .L331+4
 3629 0008 1B68     		ldr	r3, [r3]
 3630 000a 4360     		str	r3, [r0, #4]
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3631              		.loc 1 3097 0
 3632              		@ sp needed
 3633 000c 7047     		bx	lr
 3634              	.L332:
 3635 000e C046     		.align	2
 3636              	.L331:
 3637 0010 00000000 		.word	.LANCHOR16
ARM GAS  /tmp/ccyt1kA6.s 			page 160


 3638 0014 00000000 		.word	.LANCHOR14
 3639              		.cfi_endproc
 3640              	.LFE32:
 3642              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3643              		.align	1
 3644              		.global	xTaskCheckForTimeOut
 3645              		.syntax unified
 3646              		.code	16
 3647              		.thumb_func
 3648              		.fpu softvfp
 3650              	xTaskCheckForTimeOut:
 3651              	.LFB33:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3652              		.loc 1 3101 0
 3653              		.cfi_startproc
 3654              		@ args = 0, pretend = 0, frame = 0
 3655              		@ frame_needed = 0, uses_anonymous_args = 0
 3656              	.LVL339:
 3657 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3658              	.LCFI35:
 3659              		.cfi_def_cfa_offset 24
 3660              		.cfi_offset 3, -24
 3661              		.cfi_offset 4, -20
 3662              		.cfi_offset 5, -16
 3663              		.cfi_offset 6, -12
 3664              		.cfi_offset 7, -8
 3665              		.cfi_offset 14, -4
 3666 0002 0500     		movs	r5, r0
 3667 0004 0C00     		movs	r4, r1
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3668              		.loc 1 3104 0
 3669 0006 0028     		cmp	r0, #0
 3670 0008 03D0     		beq	.L343
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3671              		.loc 1 3105 0
 3672 000a 0029     		cmp	r1, #0
 3673 000c 03D1     		bne	.L336
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3674              		.loc 1 3105 0 is_stmt 0 discriminator 1
 3675              		.syntax divided
 3676              	@ 3105 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3677 000e 72B6     		 cpsid i 
 3678              	@ 0 "" 2
 3679              		.thumb
 3680              		.syntax unified
 3681              	.L337:
 3682 0010 FEE7     		b	.L337
 3683              	.L343:
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3684              		.loc 1 3104 0 is_stmt 1 discriminator 1
 3685              		.syntax divided
 3686              	@ 3104 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3687 0012 72B6     		 cpsid i 
 3688              	@ 0 "" 2
 3689              		.thumb
 3690              		.syntax unified
 3691              	.L335:
ARM GAS  /tmp/ccyt1kA6.s 			page 161


 3692 0014 FEE7     		b	.L335
 3693              	.L336:
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3694              		.loc 1 3107 0
 3695 0016 FFF7FEFF 		bl	vPortEnterCritical
 3696              	.LVL340:
 3697              	.LBB19:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3698              		.loc 1 3110 0
 3699 001a 114B     		ldr	r3, .L345
 3700 001c 1968     		ldr	r1, [r3]
 3701              	.LVL341:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3702              		.loc 1 3111 0
 3703 001e 6868     		ldr	r0, [r5, #4]
 3704 0020 0A1A     		subs	r2, r1, r0
 3705              	.LVL342:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3706              		.loc 1 3125 0
 3707 0022 2368     		ldr	r3, [r4]
 3708 0024 5E1C     		adds	r6, r3, #1
 3709 0026 16D0     		beq	.L341
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3710              		.loc 1 3135 0
 3711 0028 0E4E     		ldr	r6, .L345+4
 3712 002a 3668     		ldr	r6, [r6]
 3713 002c 2F68     		ldr	r7, [r5]
 3714 002e B742     		cmp	r7, r6
 3715 0030 01D0     		beq	.L339
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3716              		.loc 1 3135 0 is_stmt 0 discriminator 1
 3717 0032 8842     		cmp	r0, r1
 3718 0034 11D9     		bls	.L342
 3719              	.L339:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3720              		.loc 1 3144 0 is_stmt 1
 3721 0036 9342     		cmp	r3, r2
 3722 0038 03D8     		bhi	.L344
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3723              		.loc 1 3153 0
 3724 003a 0023     		movs	r3, #0
 3725 003c 2360     		str	r3, [r4]
 3726              	.LVL343:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3727              		.loc 1 3154 0
 3728 003e 0124     		movs	r4, #1
 3729              	.LVL344:
 3730 0040 05E0     		b	.L338
 3731              	.LVL345:
 3732              	.L344:
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3733              		.loc 1 3147 0
 3734 0042 9B1A     		subs	r3, r3, r2
 3735 0044 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3736              		.loc 1 3148 0
 3737 0046 2800     		movs	r0, r5
ARM GAS  /tmp/ccyt1kA6.s 			page 162


 3738 0048 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3739              	.LVL346:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3740              		.loc 1 3149 0
 3741 004c 0024     		movs	r4, #0
 3742              	.LVL347:
 3743              	.L338:
 3744              	.LBE19:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3745              		.loc 1 3157 0
 3746 004e FFF7FEFF 		bl	vPortExitCritical
 3747              	.LVL348:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3748              		.loc 1 3160 0
 3749 0052 2000     		movs	r0, r4
 3750              		@ sp needed
 3751              	.LVL349:
 3752              	.LVL350:
 3753 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3754              	.LVL351:
 3755              	.L341:
 3756              	.LBB20:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3757              		.loc 1 3130 0
 3758 0056 0024     		movs	r4, #0
 3759              	.LVL352:
 3760 0058 F9E7     		b	.L338
 3761              	.LVL353:
 3762              	.L342:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3763              		.loc 1 3142 0
 3764 005a 0124     		movs	r4, #1
 3765              	.LVL354:
 3766 005c F7E7     		b	.L338
 3767              	.L346:
 3768 005e C046     		.align	2
 3769              	.L345:
 3770 0060 00000000 		.word	.LANCHOR14
 3771 0064 00000000 		.word	.LANCHOR16
 3772              	.LBE20:
 3773              		.cfi_endproc
 3774              	.LFE33:
 3776              		.section	.text.vTaskMissedYield,"ax",%progbits
 3777              		.align	1
 3778              		.global	vTaskMissedYield
 3779              		.syntax unified
 3780              		.code	16
 3781              		.thumb_func
 3782              		.fpu softvfp
 3784              	vTaskMissedYield:
 3785              	.LFB34:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3786              		.loc 1 3164 0
 3787              		.cfi_startproc
 3788              		@ args = 0, pretend = 0, frame = 0
 3789              		@ frame_needed = 0, uses_anonymous_args = 0
 3790              		@ link register save eliminated.
ARM GAS  /tmp/ccyt1kA6.s 			page 163


3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3791              		.loc 1 3165 0
 3792 0000 014B     		ldr	r3, .L348
 3793 0002 0122     		movs	r2, #1
 3794 0004 1A60     		str	r2, [r3]
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3795              		.loc 1 3166 0
 3796              		@ sp needed
 3797 0006 7047     		bx	lr
 3798              	.L349:
 3799              		.align	2
 3800              	.L348:
 3801 0008 00000000 		.word	.LANCHOR18
 3802              		.cfi_endproc
 3803              	.LFE34:
 3805              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3806              		.align	1
 3807              		.global	uxTaskGetTaskNumber
 3808              		.syntax unified
 3809              		.code	16
 3810              		.thumb_func
 3811              		.fpu softvfp
 3813              	uxTaskGetTaskNumber:
 3814              	.LFB35:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 3815              		.loc 1 3172 0
 3816              		.cfi_startproc
 3817              		@ args = 0, pretend = 0, frame = 0
 3818              		@ frame_needed = 0, uses_anonymous_args = 0
 3819              		@ link register save eliminated.
 3820              	.LVL355:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3821              		.loc 1 3176 0
 3822 0000 0028     		cmp	r0, #0
 3823 0002 01D0     		beq	.L352
 3824              	.LVL356:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3825              		.loc 1 3179 0
 3826 0004 806C     		ldr	r0, [r0, #72]
 3827              	.LVL357:
 3828              	.L350:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3829              		.loc 1 3187 0
 3830              		@ sp needed
 3831 0006 7047     		bx	lr
 3832              	.LVL358:
 3833              	.L352:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3834              		.loc 1 3183 0
 3835 0008 0020     		movs	r0, #0
 3836              	.LVL359:
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3837              		.loc 1 3186 0
 3838 000a FCE7     		b	.L350
 3839              		.cfi_endproc
 3840              	.LFE35:
 3842              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
ARM GAS  /tmp/ccyt1kA6.s 			page 164


 3843              		.align	1
 3844              		.global	vTaskSetTaskNumber
 3845              		.syntax unified
 3846              		.code	16
 3847              		.thumb_func
 3848              		.fpu softvfp
 3850              	vTaskSetTaskNumber:
 3851              	.LFB36:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3852              		.loc 1 3195 0
 3853              		.cfi_startproc
 3854              		@ args = 0, pretend = 0, frame = 0
 3855              		@ frame_needed = 0, uses_anonymous_args = 0
 3856              		@ link register save eliminated.
 3857              	.LVL360:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3858              		.loc 1 3198 0
 3859 0000 0028     		cmp	r0, #0
 3860 0002 00D0     		beq	.L353
 3861              	.LVL361:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3862              		.loc 1 3201 0
 3863 0004 8164     		str	r1, [r0, #72]
 3864              	.LVL362:
 3865              	.L353:
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3866              		.loc 1 3203 0
 3867              		@ sp needed
 3868 0006 7047     		bx	lr
 3869              		.cfi_endproc
 3870              	.LFE36:
 3872              		.section	.text.vTaskGetInfo,"ax",%progbits
 3873              		.align	1
 3874              		.global	vTaskGetInfo
 3875              		.syntax unified
 3876              		.code	16
 3877              		.thumb_func
 3878              		.fpu softvfp
 3880              	vTaskGetInfo:
 3881              	.LFB40:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3882              		.loc 1 3494 0
 3883              		.cfi_startproc
 3884              		@ args = 0, pretend = 0, frame = 0
 3885              		@ frame_needed = 0, uses_anonymous_args = 0
 3886              	.LVL363:
 3887 0000 70B5     		push	{r4, r5, r6, lr}
 3888              	.LCFI36:
 3889              		.cfi_def_cfa_offset 16
 3890              		.cfi_offset 4, -16
 3891              		.cfi_offset 5, -12
 3892              		.cfi_offset 6, -8
 3893              		.cfi_offset 14, -4
 3894 0002 0500     		movs	r5, r0
 3895 0004 0C00     		movs	r4, r1
 3896 0006 1600     		movs	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 165


 3897              		.loc 1 3498 0
 3898 0008 0028     		cmp	r0, #0
 3899 000a 1BD0     		beq	.L363
 3900              	.LVL364:
 3901              	.L356:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 3902              		.loc 1 3500 0 discriminator 4
 3903 000c 2560     		str	r5, [r4]
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 3904              		.loc 1 3501 0 discriminator 4
 3905 000e 2A00     		movs	r2, r5
 3906 0010 3432     		adds	r2, r2, #52
 3907 0012 6260     		str	r2, [r4, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 3908              		.loc 1 3502 0 discriminator 4
 3909 0014 EA6A     		ldr	r2, [r5, #44]
 3910 0016 2261     		str	r2, [r4, #16]
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 3911              		.loc 1 3503 0 discriminator 4
 3912 0018 2A6B     		ldr	r2, [r5, #48]
 3913 001a E261     		str	r2, [r4, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3914              		.loc 1 3504 0 discriminator 4
 3915 001c 6A6C     		ldr	r2, [r5, #68]
 3916 001e A260     		str	r2, [r4, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3917              		.loc 1 3508 0 discriminator 4
 3918 0020 EA6C     		ldr	r2, [r5, #76]
 3919 0022 6261     		str	r2, [r4, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3920              		.loc 1 3522 0 discriminator 4
 3921 0024 0022     		movs	r2, #0
 3922 0026 A261     		str	r2, [r4, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3923              		.loc 1 3529 0 discriminator 4
 3924 0028 052B     		cmp	r3, #5
 3925 002a 1BD0     		beq	.L357
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3926              		.loc 1 3531 0
 3927 002c 124A     		ldr	r2, .L367
 3928 002e 1268     		ldr	r2, [r2]
 3929 0030 AA42     		cmp	r2, r5
 3930 0032 0AD0     		beq	.L364
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3931              		.loc 1 3537 0
 3932 0034 2373     		strb	r3, [r4, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3933              		.loc 1 3544 0
 3934 0036 032B     		cmp	r3, #3
 3935 0038 0AD0     		beq	.L365
 3936              	.LVL365:
 3937              	.L359:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3938              		.loc 1 3566 0
 3939 003a 002E     		cmp	r6, #0
 3940 003c 17D1     		bne	.L366
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccyt1kA6.s 			page 166


 3941              		.loc 1 3580 0
 3942 003e 0023     		movs	r3, #0
 3943 0040 2384     		strh	r3, [r4, #32]
 3944              	.L355:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3945              		.loc 1 3582 0
 3946              		@ sp needed
 3947              	.LVL366:
 3948              	.LVL367:
 3949              	.LVL368:
 3950 0042 70BD     		pop	{r4, r5, r6, pc}
 3951              	.LVL369:
 3952              	.L363:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3953              		.loc 1 3498 0 discriminator 1
 3954 0044 0C4A     		ldr	r2, .L367
 3955              	.LVL370:
 3956 0046 1568     		ldr	r5, [r2]
 3957              	.LVL371:
 3958 0048 E0E7     		b	.L356
 3959              	.LVL372:
 3960              	.L364:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3961              		.loc 1 3533 0
 3962 004a 0023     		movs	r3, #0
 3963              	.LVL373:
 3964 004c 2373     		strb	r3, [r4, #12]
 3965 004e F4E7     		b	.L359
 3966              	.LVL374:
 3967              	.L365:
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 3968              		.loc 1 3546 0
 3969 0050 FFF7FEFF 		bl	vTaskSuspendAll
 3970              	.LVL375:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 3971              		.loc 1 3548 0
 3972 0054 AB6A     		ldr	r3, [r5, #40]
 3973 0056 002B     		cmp	r3, #0
 3974 0058 01D0     		beq	.L360
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 3975              		.loc 1 3550 0
 3976 005a 0223     		movs	r3, #2
 3977 005c 2373     		strb	r3, [r4, #12]
 3978              	.L360:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3979              		.loc 1 3553 0
 3980 005e FFF7FEFF 		bl	xTaskResumeAll
 3981              	.LVL376:
 3982 0062 EAE7     		b	.L359
 3983              	.LVL377:
 3984              	.L357:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3985              		.loc 1 3561 0
 3986 0064 2800     		movs	r0, r5
 3987 0066 FFF7FEFF 		bl	eTaskGetState
 3988              	.LVL378:
 3989 006a 2073     		strb	r0, [r4, #12]
ARM GAS  /tmp/ccyt1kA6.s 			page 167


 3990 006c E5E7     		b	.L359
 3991              	.L366:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3992              		.loc 1 3574 0
 3993 006e 286B     		ldr	r0, [r5, #48]
 3994 0070 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3995              	.LVL379:
 3996 0074 2084     		strh	r0, [r4, #32]
 3997 0076 E4E7     		b	.L355
 3998              	.L368:
 3999              		.align	2
 4000              	.L367:
 4001 0078 00000000 		.word	.LANCHOR9
 4002              		.cfi_endproc
 4003              	.LFE40:
 4005              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4006              		.align	1
 4007              		.syntax unified
 4008              		.code	16
 4009              		.thumb_func
 4010              		.fpu softvfp
 4012              	prvListTasksWithinSingleList:
 4013              	.LFB41:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4014              		.loc 1 3590 0
 4015              		.cfi_startproc
 4016              		@ args = 0, pretend = 0, frame = 8
 4017              		@ frame_needed = 0, uses_anonymous_args = 0
 4018              	.LVL380:
 4019 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4020              	.LCFI37:
 4021              		.cfi_def_cfa_offset 20
 4022              		.cfi_offset 4, -20
 4023              		.cfi_offset 5, -16
 4024              		.cfi_offset 6, -12
 4025              		.cfi_offset 7, -8
 4026              		.cfi_offset 14, -4
 4027 0002 CE46     		mov	lr, r9
 4028 0004 4746     		mov	r7, r8
 4029 0006 80B5     		push	{r7, lr}
 4030              	.LCFI38:
 4031              		.cfi_def_cfa_offset 28
 4032              		.cfi_offset 8, -28
 4033              		.cfi_offset 9, -24
 4034 0008 83B0     		sub	sp, sp, #12
 4035              	.LCFI39:
 4036              		.cfi_def_cfa_offset 40
 4037 000a 8146     		mov	r9, r0
 4038 000c 0D00     		movs	r5, r1
 4039 000e 0192     		str	r2, [sp, #4]
 4040              	.LVL381:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4041              		.loc 1 3594 0
 4042 0010 0B68     		ldr	r3, [r1]
 4043 0012 002B     		cmp	r3, #0
 4044 0014 24D0     		beq	.L374
 4045              	.LVL382:
ARM GAS  /tmp/ccyt1kA6.s 			page 168


 4046              	.LBB21:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4047              		.loc 1 3596 0
 4048 0016 4B68     		ldr	r3, [r1, #4]
 4049 0018 5B68     		ldr	r3, [r3, #4]
 4050 001a 4B60     		str	r3, [r1, #4]
 4051 001c 0822     		movs	r2, #8
 4052              	.LVL383:
 4053 001e 9046     		mov	r8, r2
 4054 0020 8844     		add	r8, r8, r1
 4055 0022 4345     		cmp	r3, r8
 4056 0024 03D0     		beq	.L375
 4057              	.L371:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4058              		.loc 1 3596 0 is_stmt 0 discriminator 3
 4059 0026 6B68     		ldr	r3, [r5, #4]
 4060 0028 DE68     		ldr	r6, [r3, #12]
 4061              	.LVL384:
 4062              	.LBE21:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4063              		.loc 1 3592 0 is_stmt 1 discriminator 3
 4064 002a 0024     		movs	r4, #0
 4065 002c 10E0     		b	.L373
 4066              	.LVL385:
 4067              	.L375:
 4068              	.LBB22:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4069              		.loc 1 3596 0 discriminator 1
 4070 002e 5B68     		ldr	r3, [r3, #4]
 4071 0030 4B60     		str	r3, [r1, #4]
 4072 0032 F8E7     		b	.L371
 4073              	.LVL386:
 4074              	.L372:
 4075              	.LBE22:
 4076              	.LBB23:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4077              		.loc 1 3604 0 discriminator 3
 4078 0034 6B68     		ldr	r3, [r5, #4]
 4079 0036 DF68     		ldr	r7, [r3, #12]
 4080              	.LVL387:
 4081              	.LBE23:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4082              		.loc 1 3605 0 discriminator 3
 4083 0038 E300     		lsls	r3, r4, #3
 4084 003a 1B19     		adds	r3, r3, r4
 4085 003c 9900     		lsls	r1, r3, #2
 4086 003e 4944     		add	r1, r1, r9
 4087 0040 019B     		ldr	r3, [sp, #4]
 4088 0042 0122     		movs	r2, #1
 4089 0044 3800     		movs	r0, r7
 4090 0046 FFF7FEFF 		bl	vTaskGetInfo
 4091              	.LVL388:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4092              		.loc 1 3606 0 discriminator 3
 4093 004a 0134     		adds	r4, r4, #1
 4094              	.LVL389:
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccyt1kA6.s 			page 169


 4095              		.loc 1 3607 0 discriminator 3
 4096 004c BE42     		cmp	r6, r7
 4097 004e 08D0     		beq	.L369
 4098              	.LVL390:
 4099              	.L373:
 4100              	.LBB24:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4101              		.loc 1 3604 0
 4102 0050 6B68     		ldr	r3, [r5, #4]
 4103 0052 5B68     		ldr	r3, [r3, #4]
 4104 0054 6B60     		str	r3, [r5, #4]
 4105 0056 9845     		cmp	r8, r3
 4106 0058 ECD1     		bne	.L372
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4107              		.loc 1 3604 0 is_stmt 0 discriminator 1
 4108 005a 5B68     		ldr	r3, [r3, #4]
 4109 005c 6B60     		str	r3, [r5, #4]
 4110 005e E9E7     		b	.L372
 4111              	.LVL391:
 4112              	.L374:
 4113              	.LBE24:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4114              		.loc 1 3592 0 is_stmt 1
 4115 0060 0024     		movs	r4, #0
 4116              	.LVL392:
 4117              	.L369:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4118              		.loc 1 3615 0
 4119 0062 2000     		movs	r0, r4
 4120 0064 03B0     		add	sp, sp, #12
 4121              		@ sp needed
 4122              	.LVL393:
 4123              	.LVL394:
 4124 0066 0CBC     		pop	{r2, r3}
 4125 0068 9046     		mov	r8, r2
 4126 006a 9946     		mov	r9, r3
 4127 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 4128              		.cfi_endproc
 4129              	.LFE41:
 4131              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4132              		.align	1
 4133              		.global	uxTaskGetSystemState
 4134              		.syntax unified
 4135              		.code	16
 4136              		.thumb_func
 4137              		.fpu softvfp
 4139              	uxTaskGetSystemState:
 4140              	.LFB23:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4141              		.loc 1 2404 0
 4142              		.cfi_startproc
 4143              		@ args = 0, pretend = 0, frame = 0
 4144              		@ frame_needed = 0, uses_anonymous_args = 0
 4145              	.LVL395:
 4146 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4147              	.LCFI40:
 4148              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccyt1kA6.s 			page 170


 4149              		.cfi_offset 3, -24
 4150              		.cfi_offset 4, -20
 4151              		.cfi_offset 5, -16
 4152              		.cfi_offset 6, -12
 4153              		.cfi_offset 7, -8
 4154              		.cfi_offset 14, -4
 4155 0002 0600     		movs	r6, r0
 4156 0004 0C00     		movs	r4, r1
 4157 0006 1700     		movs	r7, r2
 4158              	.LVL396:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4159              		.loc 1 2407 0
 4160 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4161              	.LVL397:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4162              		.loc 1 2410 0
 4163 000c 224B     		ldr	r3, .L380
 4164 000e 1B68     		ldr	r3, [r3]
 4165 0010 A342     		cmp	r3, r4
 4166 0012 3CD8     		bhi	.L379
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4167              		.loc 1 2405 0
 4168 0014 3824     		movs	r4, #56
 4169              	.LVL398:
 4170 0016 0025     		movs	r5, #0
 4171              	.LVL399:
 4172              	.L378:
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4173              		.loc 1 2416 0 discriminator 1
 4174 0018 013C     		subs	r4, r4, #1
 4175              	.LVL400:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4176              		.loc 1 2417 0 discriminator 1
 4177 001a EB00     		lsls	r3, r5, #3
 4178 001c 5B19     		adds	r3, r3, r5
 4179 001e 9800     		lsls	r0, r3, #2
 4180 0020 A300     		lsls	r3, r4, #2
 4181 0022 1B19     		adds	r3, r3, r4
 4182 0024 9900     		lsls	r1, r3, #2
 4183 0026 1D4B     		ldr	r3, .L380+4
 4184 0028 C918     		adds	r1, r1, r3
 4185 002a 3018     		adds	r0, r6, r0
 4186 002c 0122     		movs	r2, #1
 4187 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4188              	.LVL401:
 4189 0032 2D18     		adds	r5, r5, r0
 4190              	.LVL402:
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4191              		.loc 1 2419 0 discriminator 1
 4192 0034 002C     		cmp	r4, #0
 4193 0036 EFD1     		bne	.L378
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4194              		.loc 1 2423 0
 4195 0038 EB00     		lsls	r3, r5, #3
 4196 003a 5B19     		adds	r3, r3, r5
 4197 003c 9800     		lsls	r0, r3, #2
 4198 003e 184B     		ldr	r3, .L380+8
ARM GAS  /tmp/ccyt1kA6.s 			page 171


 4199 0040 1968     		ldr	r1, [r3]
 4200 0042 3018     		adds	r0, r6, r0
 4201 0044 0222     		movs	r2, #2
 4202 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4203              	.LVL403:
 4204 004a 2D18     		adds	r5, r5, r0
 4205              	.LVL404:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4206              		.loc 1 2424 0
 4207 004c EB00     		lsls	r3, r5, #3
 4208 004e 5B19     		adds	r3, r3, r5
 4209 0050 9800     		lsls	r0, r3, #2
 4210 0052 144B     		ldr	r3, .L380+12
 4211 0054 1968     		ldr	r1, [r3]
 4212 0056 3018     		adds	r0, r6, r0
 4213 0058 0222     		movs	r2, #2
 4214 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4215              	.LVL405:
 4216 005e 2D18     		adds	r5, r5, r0
 4217              	.LVL406:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4218              		.loc 1 2430 0
 4219 0060 EB00     		lsls	r3, r5, #3
 4220 0062 5B19     		adds	r3, r3, r5
 4221 0064 9800     		lsls	r0, r3, #2
 4222 0066 3018     		adds	r0, r6, r0
 4223 0068 0422     		movs	r2, #4
 4224 006a 0F49     		ldr	r1, .L380+16
 4225 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4226              	.LVL407:
 4227 0070 2D18     		adds	r5, r5, r0
 4228              	.LVL408:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4229              		.loc 1 2438 0
 4230 0072 EB00     		lsls	r3, r5, #3
 4231 0074 5B19     		adds	r3, r3, r5
 4232 0076 9800     		lsls	r0, r3, #2
 4233 0078 3018     		adds	r0, r6, r0
 4234 007a 0322     		movs	r2, #3
 4235 007c 0B49     		ldr	r1, .L380+20
 4236 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4237              	.LVL409:
 4238 0082 2D18     		adds	r5, r5, r0
 4239              	.LVL410:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4240              		.loc 1 2455 0
 4241 0084 002F     		cmp	r7, #0
 4242 0086 03D0     		beq	.L377
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4243              		.loc 1 2457 0
 4244 0088 0023     		movs	r3, #0
 4245 008a 3B60     		str	r3, [r7]
 4246 008c 00E0     		b	.L377
 4247              	.LVL411:
 4248              	.L379:
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4249              		.loc 1 2405 0
ARM GAS  /tmp/ccyt1kA6.s 			page 172


 4250 008e 0025     		movs	r5, #0
 4251              	.LVL412:
 4252              	.L377:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4253              		.loc 1 2467 0
 4254 0090 FFF7FEFF 		bl	xTaskResumeAll
 4255              	.LVL413:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4256              		.loc 1 2470 0
 4257 0094 2800     		movs	r0, r5
 4258              		@ sp needed
 4259              	.LVL414:
 4260              	.LVL415:
 4261              	.LVL416:
 4262 0096 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4263              	.L381:
 4264              		.align	2
 4265              	.L380:
 4266 0098 00000000 		.word	.LANCHOR8
 4267 009c 00000000 		.word	pxReadyTasksLists
 4268 00a0 00000000 		.word	.LANCHOR2
 4269 00a4 00000000 		.word	.LANCHOR7
 4270 00a8 00000000 		.word	.LANCHOR6
 4271 00ac 00000000 		.word	.LANCHOR0
 4272              		.cfi_endproc
 4273              	.LFE23:
 4275              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4276              		.align	1
 4277              		.global	uxTaskGetStackHighWaterMark
 4278              		.syntax unified
 4279              		.code	16
 4280              		.thumb_func
 4281              		.fpu softvfp
 4283              	uxTaskGetStackHighWaterMark:
 4284              	.LFB43:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4285              		.loc 1 3643 0
 4286              		.cfi_startproc
 4287              		@ args = 0, pretend = 0, frame = 0
 4288              		@ frame_needed = 0, uses_anonymous_args = 0
 4289              	.LVL417:
 4290 0000 10B5     		push	{r4, lr}
 4291              	.LCFI41:
 4292              		.cfi_def_cfa_offset 8
 4293              		.cfi_offset 4, -8
 4294              		.cfi_offset 14, -4
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4295              		.loc 1 3648 0
 4296 0002 0028     		cmp	r0, #0
 4297 0004 03D0     		beq	.L384
 4298              	.LVL418:
 4299              	.L383:
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4300              		.loc 1 3652 0 discriminator 4
 4301 0006 006B     		ldr	r0, [r0, #48]
 4302              	.LVL419:
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 173


 4303              		.loc 1 3660 0 discriminator 4
 4304 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4305              	.LVL420:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4306              		.loc 1 3663 0 discriminator 4
 4307              		@ sp needed
 4308 000c 10BD     		pop	{r4, pc}
 4309              	.LVL421:
 4310              	.L384:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4311              		.loc 1 3648 0 discriminator 1
 4312 000e 014B     		ldr	r3, .L385
 4313 0010 1868     		ldr	r0, [r3]
 4314              	.LVL422:
 4315 0012 F8E7     		b	.L383
 4316              	.L386:
 4317              		.align	2
 4318              	.L385:
 4319 0014 00000000 		.word	.LANCHOR9
 4320              		.cfi_endproc
 4321              	.LFE43:
 4323              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4324              		.align	1
 4325              		.global	xTaskGetCurrentTaskHandle
 4326              		.syntax unified
 4327              		.code	16
 4328              		.thumb_func
 4329              		.fpu softvfp
 4331              	xTaskGetCurrentTaskHandle:
 4332              	.LFB46:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4333              		.loc 1 3751 0
 4334              		.cfi_startproc
 4335              		@ args = 0, pretend = 0, frame = 0
 4336              		@ frame_needed = 0, uses_anonymous_args = 0
 4337              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4338              		.loc 1 3757 0
 4339 0000 014B     		ldr	r3, .L388
 4340 0002 1868     		ldr	r0, [r3]
 4341              	.LVL423:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4342              		.loc 1 3760 0
 4343              		@ sp needed
 4344 0004 7047     		bx	lr
 4345              	.L389:
 4346 0006 C046     		.align	2
 4347              	.L388:
 4348 0008 00000000 		.word	.LANCHOR9
 4349              		.cfi_endproc
 4350              	.LFE46:
 4352              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4353              		.align	1
 4354              		.global	xTaskGetSchedulerState
 4355              		.syntax unified
 4356              		.code	16
 4357              		.thumb_func
ARM GAS  /tmp/ccyt1kA6.s 			page 174


 4358              		.fpu softvfp
 4360              	xTaskGetSchedulerState:
 4361              	.LFB47:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4362              		.loc 1 3768 0
 4363              		.cfi_startproc
 4364              		@ args = 0, pretend = 0, frame = 0
 4365              		@ frame_needed = 0, uses_anonymous_args = 0
 4366              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4367              		.loc 1 3771 0
 4368 0000 064B     		ldr	r3, .L395
 4369 0002 1B68     		ldr	r3, [r3]
 4370 0004 002B     		cmp	r3, #0
 4371 0006 07D0     		beq	.L392
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4372              		.loc 1 3777 0
 4373 0008 054B     		ldr	r3, .L395+4
 4374 000a 1B68     		ldr	r3, [r3]
 4375 000c 002B     		cmp	r3, #0
 4376 000e 01D0     		beq	.L394
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4377              		.loc 1 3783 0
 4378 0010 0020     		movs	r0, #0
 4379              	.LVL424:
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4380              		.loc 1 3787 0
 4381 0012 02E0     		b	.L390
 4382              	.LVL425:
 4383              	.L394:
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4384              		.loc 1 3779 0
 4385 0014 0220     		movs	r0, #2
 4386 0016 00E0     		b	.L390
 4387              	.L392:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4388              		.loc 1 3773 0
 4389 0018 0120     		movs	r0, #1
 4390              	.L390:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4391              		.loc 1 3788 0
 4392              		@ sp needed
 4393 001a 7047     		bx	lr
 4394              	.L396:
 4395              		.align	2
 4396              	.L395:
 4397 001c 00000000 		.word	.LANCHOR10
 4398 0020 00000000 		.word	.LANCHOR15
 4399              		.cfi_endproc
 4400              	.LFE47:
 4402              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4403              		.align	1
 4404              		.global	xTaskPriorityInherit
 4405              		.syntax unified
 4406              		.code	16
 4407              		.thumb_func
 4408              		.fpu softvfp
ARM GAS  /tmp/ccyt1kA6.s 			page 175


 4410              	xTaskPriorityInherit:
 4411              	.LFB48:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4412              		.loc 1 3796 0
 4413              		.cfi_startproc
 4414              		@ args = 0, pretend = 0, frame = 0
 4415              		@ frame_needed = 0, uses_anonymous_args = 0
 4416              	.LVL426:
 4417 0000 70B5     		push	{r4, r5, r6, lr}
 4418              	.LCFI42:
 4419              		.cfi_def_cfa_offset 16
 4420              		.cfi_offset 4, -16
 4421              		.cfi_offset 5, -12
 4422              		.cfi_offset 6, -8
 4423              		.cfi_offset 14, -4
 4424 0002 041E     		subs	r4, r0, #0
 4425              	.LVL427:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4426              		.loc 1 3803 0
 4427 0004 3ED0     		beq	.L404
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4428              		.loc 1 3808 0
 4429 0006 C36A     		ldr	r3, [r0, #44]
 4430 0008 1F4A     		ldr	r2, .L408
 4431 000a 1268     		ldr	r2, [r2]
 4432 000c D26A     		ldr	r2, [r2, #44]
 4433 000e 9342     		cmp	r3, r2
 4434 0010 2ED2     		bcs	.L399
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4435              		.loc 1 3813 0
 4436 0012 8269     		ldr	r2, [r0, #24]
 4437 0014 002A     		cmp	r2, #0
 4438 0016 05DB     		blt	.L400
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4439              		.loc 1 3815 0
 4440 0018 1B4A     		ldr	r2, .L408
 4441 001a 1268     		ldr	r2, [r2]
 4442 001c D16A     		ldr	r1, [r2, #44]
 4443 001e 3822     		movs	r2, #56
 4444 0020 521A     		subs	r2, r2, r1
 4445 0022 8261     		str	r2, [r0, #24]
 4446              	.L400:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4447              		.loc 1 3824 0
 4448 0024 9A00     		lsls	r2, r3, #2
 4449 0026 D318     		adds	r3, r2, r3
 4450 0028 9A00     		lsls	r2, r3, #2
 4451 002a 184B     		ldr	r3, .L408+4
 4452 002c D218     		adds	r2, r2, r3
 4453 002e 6369     		ldr	r3, [r4, #20]
 4454 0030 9342     		cmp	r3, r2
 4455 0032 05D0     		beq	.L406
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4456              		.loc 1 3842 0
 4457 0034 144B     		ldr	r3, .L408
 4458 0036 1B68     		ldr	r3, [r3]
 4459 0038 DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccyt1kA6.s 			page 176


 4460 003a E362     		str	r3, [r4, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4461              		.loc 1 3848 0
 4462 003c 0120     		movs	r0, #1
 4463              	.LVL428:
 4464              	.L397:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4465              		.loc 1 3875 0
 4466              		@ sp needed
 4467              	.LVL429:
 4468 003e 70BD     		pop	{r4, r5, r6, pc}
 4469              	.LVL430:
 4470              	.L406:
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4471              		.loc 1 3826 0
 4472 0040 251D     		adds	r5, r4, #4
 4473 0042 2800     		movs	r0, r5
 4474              	.LVL431:
 4475 0044 FFF7FEFF 		bl	uxListRemove
 4476              	.LVL432:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4477              		.loc 1 3836 0
 4478 0048 0F4B     		ldr	r3, .L408
 4479 004a 1B68     		ldr	r3, [r3]
 4480 004c DB6A     		ldr	r3, [r3, #44]
 4481 004e E362     		str	r3, [r4, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4482              		.loc 1 3837 0
 4483 0050 0F4A     		ldr	r2, .L408+8
 4484 0052 1268     		ldr	r2, [r2]
 4485 0054 9342     		cmp	r3, r2
 4486 0056 01D9     		bls	.L403
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4487              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4488 0058 0D4A     		ldr	r2, .L408+8
 4489 005a 1360     		str	r3, [r2]
 4490              	.L403:
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4491              		.loc 1 3837 0 discriminator 3
 4492 005c 9A00     		lsls	r2, r3, #2
 4493 005e D318     		adds	r3, r2, r3
 4494 0060 9800     		lsls	r0, r3, #2
 4495 0062 0A4B     		ldr	r3, .L408+4
 4496 0064 C018     		adds	r0, r0, r3
 4497 0066 2900     		movs	r1, r5
 4498 0068 FFF7FEFF 		bl	vListInsertEnd
 4499              	.LVL433:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4500              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4501 006c 0120     		movs	r0, #1
 4502 006e E6E7     		b	.L397
 4503              	.LVL434:
 4504              	.L399:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4505              		.loc 1 3852 0
 4506 0070 C26C     		ldr	r2, [r0, #76]
 4507 0072 054B     		ldr	r3, .L408
ARM GAS  /tmp/ccyt1kA6.s 			page 177


 4508 0074 1B68     		ldr	r3, [r3]
 4509 0076 DB6A     		ldr	r3, [r3, #44]
 4510 0078 9A42     		cmp	r2, r3
 4511 007a 01D2     		bcs	.L407
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4512              		.loc 1 3861 0
 4513 007c 0120     		movs	r0, #1
 4514              	.LVL435:
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4515              		.loc 1 3874 0
 4516 007e DEE7     		b	.L397
 4517              	.LVL436:
 4518              	.L407:
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4519              		.loc 1 3798 0
 4520 0080 0020     		movs	r0, #0
 4521              	.LVL437:
 4522 0082 DCE7     		b	.L397
 4523              	.LVL438:
 4524              	.L404:
 4525 0084 0020     		movs	r0, #0
 4526              	.LVL439:
 4527 0086 DAE7     		b	.L397
 4528              	.L409:
 4529              		.align	2
 4530              	.L408:
 4531 0088 00000000 		.word	.LANCHOR9
 4532 008c 00000000 		.word	pxReadyTasksLists
 4533 0090 00000000 		.word	.LANCHOR12
 4534              		.cfi_endproc
 4535              	.LFE48:
 4537              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4538              		.align	1
 4539              		.global	xTaskPriorityDisinherit
 4540              		.syntax unified
 4541              		.code	16
 4542              		.thumb_func
 4543              		.fpu softvfp
 4545              	xTaskPriorityDisinherit:
 4546              	.LFB49:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4547              		.loc 1 3883 0
 4548              		.cfi_startproc
 4549              		@ args = 0, pretend = 0, frame = 0
 4550              		@ frame_needed = 0, uses_anonymous_args = 0
 4551              	.LVL440:
 4552 0000 70B5     		push	{r4, r5, r6, lr}
 4553              	.LCFI43:
 4554              		.cfi_def_cfa_offset 16
 4555              		.cfi_offset 4, -16
 4556              		.cfi_offset 5, -12
 4557              		.cfi_offset 6, -8
 4558              		.cfi_offset 14, -4
 4559 0002 041E     		subs	r4, r0, #0
 4560              	.LVL441:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4561              		.loc 1 3887 0
ARM GAS  /tmp/ccyt1kA6.s 			page 178


 4562 0004 2AD0     		beq	.L417
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4563              		.loc 1 3893 0
 4564 0006 184B     		ldr	r3, .L420
 4565 0008 1B68     		ldr	r3, [r3]
 4566 000a 8342     		cmp	r3, r0
 4567 000c 01D0     		beq	.L412
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4568              		.loc 1 3893 0 is_stmt 0 discriminator 1
 4569              		.syntax divided
 4570              	@ 3893 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4571 000e 72B6     		 cpsid i 
 4572              	@ 0 "" 2
 4573              		.thumb
 4574              		.syntax unified
 4575              	.L413:
 4576 0010 FEE7     		b	.L413
 4577              	.L412:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4578              		.loc 1 3894 0 is_stmt 1
 4579 0012 036D     		ldr	r3, [r0, #80]
 4580 0014 002B     		cmp	r3, #0
 4581 0016 01D1     		bne	.L414
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4582              		.loc 1 3894 0 is_stmt 0 discriminator 1
 4583              		.syntax divided
 4584              	@ 3894 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4585 0018 72B6     		 cpsid i 
 4586              	@ 0 "" 2
 4587              		.thumb
 4588              		.syntax unified
 4589              	.L415:
 4590 001a FEE7     		b	.L415
 4591              	.L414:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4592              		.loc 1 3895 0 is_stmt 1
 4593 001c 013B     		subs	r3, r3, #1
 4594 001e 0365     		str	r3, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4595              		.loc 1 3899 0
 4596 0020 C26A     		ldr	r2, [r0, #44]
 4597 0022 C16C     		ldr	r1, [r0, #76]
 4598 0024 8A42     		cmp	r2, r1
 4599 0026 1BD0     		beq	.L418
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4600              		.loc 1 3902 0
 4601 0028 002B     		cmp	r3, #0
 4602 002a 1BD1     		bne	.L419
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4603              		.loc 1 3909 0
 4604 002c 051D     		adds	r5, r0, #4
 4605 002e 2800     		movs	r0, r5
 4606              	.LVL442:
 4607 0030 FFF7FEFF 		bl	uxListRemove
 4608              	.LVL443:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4609              		.loc 1 3921 0
ARM GAS  /tmp/ccyt1kA6.s 			page 179


 4610 0034 E36C     		ldr	r3, [r4, #76]
 4611 0036 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4612              		.loc 1 3926 0
 4613 0038 3822     		movs	r2, #56
 4614 003a D21A     		subs	r2, r2, r3
 4615 003c A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4616              		.loc 1 3927 0
 4617 003e 0B4A     		ldr	r2, .L420+4
 4618 0040 1268     		ldr	r2, [r2]
 4619 0042 9342     		cmp	r3, r2
 4620 0044 01D9     		bls	.L416
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4621              		.loc 1 3927 0 is_stmt 0 discriminator 1
 4622 0046 094A     		ldr	r2, .L420+4
 4623 0048 1360     		str	r3, [r2]
 4624              	.L416:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4625              		.loc 1 3927 0 discriminator 3
 4626 004a 1420     		movs	r0, #20
 4627 004c 5843     		muls	r0, r3
 4628 004e 084B     		ldr	r3, .L420+8
 4629 0050 C018     		adds	r0, r0, r3
 4630 0052 2900     		movs	r1, r5
 4631 0054 FFF7FEFF 		bl	vListInsertEnd
 4632              	.LVL444:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4633              		.loc 1 3937 0 is_stmt 1 discriminator 3
 4634 0058 0120     		movs	r0, #1
 4635 005a 00E0     		b	.L410
 4636              	.LVL445:
 4637              	.L417:
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4638              		.loc 1 3885 0
 4639 005c 0020     		movs	r0, #0
 4640              	.LVL446:
 4641              	.L410:
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4642              		.loc 1 3955 0
 4643              		@ sp needed
 4644              	.LVL447:
 4645 005e 70BD     		pop	{r4, r5, r6, pc}
 4646              	.LVL448:
 4647              	.L418:
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4648              		.loc 1 3885 0
 4649 0060 0020     		movs	r0, #0
 4650              	.LVL449:
 4651 0062 FCE7     		b	.L410
 4652              	.LVL450:
 4653              	.L419:
 4654 0064 0020     		movs	r0, #0
 4655              	.LVL451:
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4656              		.loc 1 3954 0
 4657 0066 FAE7     		b	.L410
ARM GAS  /tmp/ccyt1kA6.s 			page 180


 4658              	.L421:
 4659              		.align	2
 4660              	.L420:
 4661 0068 00000000 		.word	.LANCHOR9
 4662 006c 00000000 		.word	.LANCHOR12
 4663 0070 00000000 		.word	pxReadyTasksLists
 4664              		.cfi_endproc
 4665              	.LFE49:
 4667              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4668              		.align	1
 4669              		.global	vTaskPriorityDisinheritAfterTimeout
 4670              		.syntax unified
 4671              		.code	16
 4672              		.thumb_func
 4673              		.fpu softvfp
 4675              	vTaskPriorityDisinheritAfterTimeout:
 4676              	.LFB50:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4677              		.loc 1 3963 0
 4678              		.cfi_startproc
 4679              		@ args = 0, pretend = 0, frame = 0
 4680              		@ frame_needed = 0, uses_anonymous_args = 0
 4681              	.LVL452:
 4682 0000 70B5     		push	{r4, r5, r6, lr}
 4683              	.LCFI44:
 4684              		.cfi_def_cfa_offset 16
 4685              		.cfi_offset 4, -16
 4686              		.cfi_offset 5, -12
 4687              		.cfi_offset 6, -8
 4688              		.cfi_offset 14, -4
 4689 0002 041E     		subs	r4, r0, #0
 4690              	.LVL453:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4691              		.loc 1 3968 0
 4692 0004 0DD0     		beq	.L422
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4693              		.loc 1 3972 0
 4694 0006 036D     		ldr	r3, [r0, #80]
 4695 0008 002B     		cmp	r3, #0
 4696 000a 01D1     		bne	.L424
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4697              		.loc 1 3972 0 is_stmt 0 discriminator 1
 4698              		.syntax divided
 4699              	@ 3972 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4700 000c 72B6     		 cpsid i 
 4701              	@ 0 "" 2
 4702              		.thumb
 4703              		.syntax unified
 4704              	.L425:
 4705 000e FEE7     		b	.L425
 4706              	.L424:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4707              		.loc 1 3978 0 is_stmt 1
 4708 0010 C26C     		ldr	r2, [r0, #76]
 4709 0012 8A42     		cmp	r2, r1
 4710 0014 00D2     		bcs	.L426
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccyt1kA6.s 			page 181


 4711              		.loc 1 3980 0
 4712 0016 0A00     		movs	r2, r1
 4713              	.L426:
 4714              	.LVL454:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4715              		.loc 1 3988 0
 4716 0018 E06A     		ldr	r0, [r4, #44]
 4717              	.LVL455:
 4718 001a 9042     		cmp	r0, r2
 4719 001c 01D0     		beq	.L422
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4720              		.loc 1 3994 0
 4721 001e 012B     		cmp	r3, #1
 4722 0020 00D0     		beq	.L431
 4723              	.LVL456:
 4724              	.L422:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4725              		.loc 1 4057 0
 4726              		@ sp needed
 4727              	.LVL457:
 4728 0022 70BD     		pop	{r4, r5, r6, pc}
 4729              	.LVL458:
 4730              	.L431:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4731              		.loc 1 3999 0
 4732 0024 134B     		ldr	r3, .L432
 4733 0026 1B68     		ldr	r3, [r3]
 4734 0028 A342     		cmp	r3, r4
 4735 002a 01D1     		bne	.L427
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4736              		.loc 1 3999 0 is_stmt 0 discriminator 1
 4737              		.syntax divided
 4738              	@ 3999 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4739 002c 72B6     		 cpsid i 
 4740              	@ 0 "" 2
 4741              		.thumb
 4742              		.syntax unified
 4743              	.L428:
 4744 002e FEE7     		b	.L428
 4745              	.L427:
 4746              	.LVL459:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4747              		.loc 1 4006 0 is_stmt 1
 4748 0030 E262     		str	r2, [r4, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4749              		.loc 1 4010 0
 4750 0032 A369     		ldr	r3, [r4, #24]
 4751 0034 002B     		cmp	r3, #0
 4752 0036 02DB     		blt	.L429
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4753              		.loc 1 4012 0
 4754 0038 3821     		movs	r1, #56
 4755              	.LVL460:
 4756 003a 8A1A     		subs	r2, r1, r2
 4757              	.LVL461:
 4758 003c A261     		str	r2, [r4, #24]
 4759              	.L429:
ARM GAS  /tmp/ccyt1kA6.s 			page 182


4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4760              		.loc 1 4025 0
 4761 003e 1423     		movs	r3, #20
 4762 0040 4343     		muls	r3, r0
 4763 0042 0D4A     		ldr	r2, .L432+4
 4764 0044 9B18     		adds	r3, r3, r2
 4765 0046 6269     		ldr	r2, [r4, #20]
 4766 0048 9A42     		cmp	r2, r3
 4767 004a EAD1     		bne	.L422
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4768              		.loc 1 4027 0
 4769 004c 251D     		adds	r5, r4, #4
 4770 004e 2800     		movs	r0, r5
 4771              	.LVL462:
 4772 0050 FFF7FEFF 		bl	uxListRemove
 4773              	.LVL463:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4774              		.loc 1 4036 0
 4775 0054 E36A     		ldr	r3, [r4, #44]
 4776 0056 094A     		ldr	r2, .L432+8
 4777 0058 1268     		ldr	r2, [r2]
 4778 005a 9342     		cmp	r3, r2
 4779 005c 01D9     		bls	.L430
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4780              		.loc 1 4036 0 is_stmt 0 discriminator 1
 4781 005e 074A     		ldr	r2, .L432+8
 4782 0060 1360     		str	r3, [r2]
 4783              	.L430:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4784              		.loc 1 4036 0 discriminator 3
 4785 0062 1420     		movs	r0, #20
 4786 0064 5843     		muls	r0, r3
 4787 0066 044B     		ldr	r3, .L432+4
 4788 0068 C018     		adds	r0, r0, r3
 4789 006a 2900     		movs	r1, r5
 4790 006c FFF7FEFF 		bl	vListInsertEnd
 4791              	.LVL464:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4792              		.loc 1 4057 0 is_stmt 1 discriminator 3
 4793 0070 D7E7     		b	.L422
 4794              	.L433:
 4795 0072 C046     		.align	2
 4796              	.L432:
 4797 0074 00000000 		.word	.LANCHOR9
 4798 0078 00000000 		.word	pxReadyTasksLists
 4799 007c 00000000 		.word	.LANCHOR12
 4800              		.cfi_endproc
 4801              	.LFE50:
 4803              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4804              		.align	1
 4805              		.global	uxTaskResetEventItemValue
 4806              		.syntax unified
 4807              		.code	16
 4808              		.thumb_func
 4809              		.fpu softvfp
 4811              	uxTaskResetEventItemValue:
 4812              	.LFB51:
ARM GAS  /tmp/ccyt1kA6.s 			page 183


4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4813              		.loc 1 4377 0
 4814              		.cfi_startproc
 4815              		@ args = 0, pretend = 0, frame = 0
 4816              		@ frame_needed = 0, uses_anonymous_args = 0
 4817              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4818              		.loc 1 4380 0
 4819 0000 044A     		ldr	r2, .L435
 4820 0002 1368     		ldr	r3, [r2]
 4821 0004 9869     		ldr	r0, [r3, #24]
 4822              	.LVL465:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4823              		.loc 1 4384 0
 4824 0006 1368     		ldr	r3, [r2]
 4825 0008 D96A     		ldr	r1, [r3, #44]
 4826 000a 1268     		ldr	r2, [r2]
 4827 000c 3823     		movs	r3, #56
 4828 000e 5B1A     		subs	r3, r3, r1
 4829 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4830              		.loc 1 4387 0
 4831              		@ sp needed
 4832 0012 7047     		bx	lr
 4833              	.L436:
 4834              		.align	2
 4835              	.L435:
 4836 0014 00000000 		.word	.LANCHOR9
 4837              		.cfi_endproc
 4838              	.LFE51:
 4840              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4841              		.align	1
 4842              		.global	pvTaskIncrementMutexHeldCount
 4843              		.syntax unified
 4844              		.code	16
 4845              		.thumb_func
 4846              		.fpu softvfp
 4848              	pvTaskIncrementMutexHeldCount:
 4849              	.LFB52:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4850              		.loc 1 4393 0
 4851              		.cfi_startproc
 4852              		@ args = 0, pretend = 0, frame = 0
 4853              		@ frame_needed = 0, uses_anonymous_args = 0
 4854              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4855              		.loc 1 4396 0
 4856 0000 054B     		ldr	r3, .L439
 4857 0002 1B68     		ldr	r3, [r3]
 4858 0004 002B     		cmp	r3, #0
 4859 0006 04D0     		beq	.L438
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4860              		.loc 1 4398 0
 4861 0008 034B     		ldr	r3, .L439
 4862 000a 1A68     		ldr	r2, [r3]
 4863 000c 136D     		ldr	r3, [r2, #80]
 4864 000e 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccyt1kA6.s 			page 184


 4865 0010 1365     		str	r3, [r2, #80]
 4866              	.L438:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4867              		.loc 1 4401 0
 4868 0012 014B     		ldr	r3, .L439
 4869 0014 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4870              		.loc 1 4402 0
 4871              		@ sp needed
 4872 0016 7047     		bx	lr
 4873              	.L440:
 4874              		.align	2
 4875              	.L439:
 4876 0018 00000000 		.word	.LANCHOR9
 4877              		.cfi_endproc
 4878              	.LFE52:
 4880              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4881              		.align	1
 4882              		.global	ulTaskNotifyTake
 4883              		.syntax unified
 4884              		.code	16
 4885              		.thumb_func
 4886              		.fpu softvfp
 4888              	ulTaskNotifyTake:
 4889              	.LFB53:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4890              		.loc 1 4410 0
 4891              		.cfi_startproc
 4892              		@ args = 0, pretend = 0, frame = 0
 4893              		@ frame_needed = 0, uses_anonymous_args = 0
 4894              	.LVL466:
 4895 0000 70B5     		push	{r4, r5, r6, lr}
 4896              	.LCFI45:
 4897              		.cfi_def_cfa_offset 16
 4898              		.cfi_offset 4, -16
 4899              		.cfi_offset 5, -12
 4900              		.cfi_offset 6, -8
 4901              		.cfi_offset 14, -4
 4902 0002 0500     		movs	r5, r0
 4903 0004 0C00     		movs	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4904              		.loc 1 4413 0
 4905 0006 FFF7FEFF 		bl	vPortEnterCritical
 4906              	.LVL467:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4907              		.loc 1 4416 0
 4908 000a 174B     		ldr	r3, .L447
 4909 000c 1B68     		ldr	r3, [r3]
 4910 000e 5B6D     		ldr	r3, [r3, #84]
 4911 0010 002B     		cmp	r3, #0
 4912 0012 06D1     		bne	.L442
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4913              		.loc 1 4419 0
 4914 0014 144B     		ldr	r3, .L447
 4915 0016 1A68     		ldr	r2, [r3]
 4916 0018 5823     		movs	r3, #88
 4917 001a 0121     		movs	r1, #1
ARM GAS  /tmp/ccyt1kA6.s 			page 185


 4918 001c D154     		strb	r1, [r2, r3]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4919              		.loc 1 4421 0
 4920 001e 002C     		cmp	r4, #0
 4921 0020 17D1     		bne	.L445
 4922              	.L442:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4923              		.loc 1 4442 0
 4924 0022 FFF7FEFF 		bl	vPortExitCritical
 4925              	.LVL468:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4926              		.loc 1 4444 0
 4927 0026 FFF7FEFF 		bl	vPortEnterCritical
 4928              	.LVL469:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4929              		.loc 1 4447 0
 4930 002a 0F4B     		ldr	r3, .L447
 4931 002c 1B68     		ldr	r3, [r3]
 4932 002e 5C6D     		ldr	r4, [r3, #84]
 4933              	.LVL470:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4934              		.loc 1 4449 0
 4935 0030 002C     		cmp	r4, #0
 4936 0032 05D0     		beq	.L443
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4937              		.loc 1 4451 0
 4938 0034 002D     		cmp	r5, #0
 4939 0036 12D1     		bne	.L446
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4940              		.loc 1 4457 0
 4941 0038 0B4B     		ldr	r3, .L447
 4942 003a 1B68     		ldr	r3, [r3]
 4943 003c 621E     		subs	r2, r4, #1
 4944 003e 5A65     		str	r2, [r3, #84]
 4945              	.L443:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4946              		.loc 1 4465 0
 4947 0040 094B     		ldr	r3, .L447
 4948 0042 1A68     		ldr	r2, [r3]
 4949 0044 5823     		movs	r3, #88
 4950 0046 0021     		movs	r1, #0
 4951 0048 D154     		strb	r1, [r2, r3]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4952              		.loc 1 4467 0
 4953 004a FFF7FEFF 		bl	vPortExitCritical
 4954              	.LVL471:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4955              		.loc 1 4470 0
 4956 004e 2000     		movs	r0, r4
 4957              		@ sp needed
 4958              	.LVL472:
 4959              	.LVL473:
 4960 0050 70BD     		pop	{r4, r5, r6, pc}
 4961              	.LVL474:
 4962              	.L445:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4963              		.loc 1 4423 0
ARM GAS  /tmp/ccyt1kA6.s 			page 186


 4964 0052 2000     		movs	r0, r4
 4965 0054 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4966              	.LVL475:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4967              		.loc 1 4430 0
 4968 0058 FFF7FEFF 		bl	vPortYield
 4969              	.LVL476:
 4970 005c E1E7     		b	.L442
 4971              	.LVL477:
 4972              	.L446:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4973              		.loc 1 4453 0
 4974 005e 024B     		ldr	r3, .L447
 4975 0060 1B68     		ldr	r3, [r3]
 4976 0062 0022     		movs	r2, #0
 4977 0064 5A65     		str	r2, [r3, #84]
 4978 0066 EBE7     		b	.L443
 4979              	.L448:
 4980              		.align	2
 4981              	.L447:
 4982 0068 00000000 		.word	.LANCHOR9
 4983              		.cfi_endproc
 4984              	.LFE53:
 4986              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4987              		.align	1
 4988              		.global	xTaskNotifyWait
 4989              		.syntax unified
 4990              		.code	16
 4991              		.thumb_func
 4992              		.fpu softvfp
 4994              	xTaskNotifyWait:
 4995              	.LFB54:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4996              		.loc 1 4478 0
 4997              		.cfi_startproc
 4998              		@ args = 0, pretend = 0, frame = 0
 4999              		@ frame_needed = 0, uses_anonymous_args = 0
 5000              	.LVL478:
 5001 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5002              	.LCFI46:
 5003              		.cfi_def_cfa_offset 24
 5004              		.cfi_offset 3, -24
 5005              		.cfi_offset 4, -20
 5006              		.cfi_offset 5, -16
 5007              		.cfi_offset 6, -12
 5008              		.cfi_offset 7, -8
 5009              		.cfi_offset 14, -4
 5010 0002 0700     		movs	r7, r0
 5011 0004 0E00     		movs	r6, r1
 5012 0006 1400     		movs	r4, r2
 5013 0008 1D00     		movs	r5, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5014              		.loc 1 4481 0
 5015 000a FFF7FEFF 		bl	vPortEnterCritical
 5016              	.LVL479:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5017              		.loc 1 4484 0
ARM GAS  /tmp/ccyt1kA6.s 			page 187


 5018 000e 1C4B     		ldr	r3, .L456
 5019 0010 1A68     		ldr	r2, [r3]
 5020 0012 5823     		movs	r3, #88
 5021 0014 D35C     		ldrb	r3, [r2, r3]
 5022 0016 022B     		cmp	r3, #2
 5023 0018 0AD0     		beq	.L450
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5024              		.loc 1 4489 0
 5025 001a 194A     		ldr	r2, .L456
 5026 001c 1168     		ldr	r1, [r2]
 5027 001e 4B6D     		ldr	r3, [r1, #84]
 5028 0020 BB43     		bics	r3, r7
 5029 0022 4B65     		str	r3, [r1, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5030              		.loc 1 4492 0
 5031 0024 1268     		ldr	r2, [r2]
 5032 0026 5823     		movs	r3, #88
 5033 0028 0121     		movs	r1, #1
 5034 002a D154     		strb	r1, [r2, r3]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5035              		.loc 1 4494 0
 5036 002c 002D     		cmp	r5, #0
 5037 002e 19D1     		bne	.L454
 5038              	.L450:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5039              		.loc 1 4515 0
 5040 0030 FFF7FEFF 		bl	vPortExitCritical
 5041              	.LVL480:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5042              		.loc 1 4517 0
 5043 0034 FFF7FEFF 		bl	vPortEnterCritical
 5044              	.LVL481:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5045              		.loc 1 4521 0
 5046 0038 002C     		cmp	r4, #0
 5047 003a 03D0     		beq	.L451
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5048              		.loc 1 4525 0
 5049 003c 104B     		ldr	r3, .L456
 5050 003e 1B68     		ldr	r3, [r3]
 5051 0040 5B6D     		ldr	r3, [r3, #84]
 5052 0042 2360     		str	r3, [r4]
 5053              	.L451:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5054              		.loc 1 4532 0
 5055 0044 0E4B     		ldr	r3, .L456
 5056 0046 1A68     		ldr	r2, [r3]
 5057 0048 5823     		movs	r3, #88
 5058 004a D35C     		ldrb	r3, [r2, r3]
 5059 004c 022B     		cmp	r3, #2
 5060 004e 0FD0     		beq	.L455
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5061              		.loc 1 4535 0
 5062 0050 0024     		movs	r4, #0
 5063              	.LVL482:
 5064              	.L452:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccyt1kA6.s 			page 188


 5065              		.loc 1 4545 0
 5066 0052 0B4B     		ldr	r3, .L456
 5067 0054 1A68     		ldr	r2, [r3]
 5068 0056 5823     		movs	r3, #88
 5069 0058 0021     		movs	r1, #0
 5070 005a D154     		strb	r1, [r2, r3]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5071              		.loc 1 4547 0
 5072 005c FFF7FEFF 		bl	vPortExitCritical
 5073              	.LVL483:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5074              		.loc 1 4550 0
 5075 0060 2000     		movs	r0, r4
 5076              		@ sp needed
 5077              	.LVL484:
 5078              	.LVL485:
 5079              	.LVL486:
 5080              	.LVL487:
 5081 0062 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5082              	.LVL488:
 5083              	.L454:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5084              		.loc 1 4496 0
 5085 0064 2800     		movs	r0, r5
 5086 0066 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5087              	.LVL489:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5088              		.loc 1 4503 0
 5089 006a FFF7FEFF 		bl	vPortYield
 5090              	.LVL490:
 5091 006e DFE7     		b	.L450
 5092              	.L455:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5093              		.loc 1 4541 0
 5094 0070 034B     		ldr	r3, .L456
 5095 0072 1A68     		ldr	r2, [r3]
 5096 0074 536D     		ldr	r3, [r2, #84]
 5097 0076 B343     		bics	r3, r6
 5098 0078 5365     		str	r3, [r2, #84]
 5099              	.LVL491:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5100              		.loc 1 4542 0
 5101 007a 0124     		movs	r4, #1
 5102              	.LVL492:
 5103 007c E9E7     		b	.L452
 5104              	.L457:
 5105 007e C046     		.align	2
 5106              	.L456:
 5107 0080 00000000 		.word	.LANCHOR9
 5108              		.cfi_endproc
 5109              	.LFE54:
 5111              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5112              		.align	1
 5113              		.global	xTaskGenericNotify
 5114              		.syntax unified
 5115              		.code	16
 5116              		.thumb_func
ARM GAS  /tmp/ccyt1kA6.s 			page 189


 5117              		.fpu softvfp
 5119              	xTaskGenericNotify:
 5120              	.LFB55:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5121              		.loc 1 4558 0
 5122              		.cfi_startproc
 5123              		@ args = 0, pretend = 0, frame = 0
 5124              		@ frame_needed = 0, uses_anonymous_args = 0
 5125              	.LVL493:
 5126 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5127              	.LCFI47:
 5128              		.cfi_def_cfa_offset 24
 5129              		.cfi_offset 3, -24
 5130              		.cfi_offset 4, -20
 5131              		.cfi_offset 5, -16
 5132              		.cfi_offset 6, -12
 5133              		.cfi_offset 7, -8
 5134              		.cfi_offset 14, -4
 5135 0002 0400     		movs	r4, r0
 5136 0004 0E00     		movs	r6, r1
 5137 0006 1500     		movs	r5, r2
 5138 0008 1F00     		movs	r7, r3
 5139              	.LVL494:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5140              		.loc 1 4563 0
 5141 000a 0028     		cmp	r0, #0
 5142 000c 01D1     		bne	.L459
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5143              		.loc 1 4563 0 is_stmt 0 discriminator 1
 5144              		.syntax divided
 5145              	@ 4563 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5146 000e 72B6     		 cpsid i 
 5147              	@ 0 "" 2
 5148              		.thumb
 5149              		.syntax unified
 5150              	.L460:
 5151 0010 FEE7     		b	.L460
 5152              	.L459:
 5153              	.LVL495:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5154              		.loc 1 4566 0 is_stmt 1
 5155 0012 FFF7FEFF 		bl	vPortEnterCritical
 5156              	.LVL496:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5157              		.loc 1 4568 0
 5158 0016 002F     		cmp	r7, #0
 5159 0018 01D0     		beq	.L461
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5160              		.loc 1 4570 0
 5161 001a 636D     		ldr	r3, [r4, #84]
 5162 001c 3B60     		str	r3, [r7]
 5163              	.L461:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5164              		.loc 1 4573 0
 5165 001e 5822     		movs	r2, #88
 5166 0020 A35C     		ldrb	r3, [r4, r2]
 5167 0022 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccyt1kA6.s 			page 190


 5168              	.LVL497:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5169              		.loc 1 4575 0
 5170 0024 0221     		movs	r1, #2
 5171 0026 A154     		strb	r1, [r4, r2]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5172              		.loc 1 4577 0
 5173 0028 022D     		cmp	r5, #2
 5174 002a 17D0     		beq	.L463
 5175 002c 08D9     		bls	.L474
 5176 002e 032D     		cmp	r5, #3
 5177 0030 19D0     		beq	.L466
 5178 0032 042D     		cmp	r5, #4
 5179 0034 06D1     		bne	.L472
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5180              		.loc 1 4592 0
 5181 0036 022B     		cmp	r3, #2
 5182 0038 18D0     		beq	.L473
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5183              		.loc 1 4594 0
 5184 003a 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5185              		.loc 1 4560 0
 5186 003c 0125     		movs	r5, #1
 5187 003e 07E0     		b	.L462
 5188              	.L474:
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5189              		.loc 1 4577 0
 5190 0040 012D     		cmp	r5, #1
 5191 0042 01D0     		beq	.L465
 5192              	.L472:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5193              		.loc 1 4560 0
 5194 0044 0125     		movs	r5, #1
 5195 0046 03E0     		b	.L462
 5196              	.L465:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5197              		.loc 1 4580 0
 5198 0048 626D     		ldr	r2, [r4, #84]
 5199 004a 1643     		orrs	r6, r2
 5200              	.LVL498:
 5201 004c 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5202              		.loc 1 4560 0
 5203 004e 0125     		movs	r5, #1
 5204              	.L462:
 5205              	.LVL499:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5206              		.loc 1 4613 0
 5207 0050 012B     		cmp	r3, #1
 5208 0052 0DD0     		beq	.L475
 5209              	.LVL500:
 5210              	.L468:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5211              		.loc 1 4653 0
 5212 0054 FFF7FEFF 		bl	vPortExitCritical
 5213              	.LVL501:
ARM GAS  /tmp/ccyt1kA6.s 			page 191


4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5214              		.loc 1 4656 0
 5215 0058 2800     		movs	r0, r5
 5216              		@ sp needed
 5217              	.LVL502:
 5218              	.LVL503:
 5219              	.LVL504:
 5220 005a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5221              	.LVL505:
 5222              	.L463:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5223              		.loc 1 4584 0
 5224 005c 626D     		ldr	r2, [r4, #84]
 5225 005e 0132     		adds	r2, r2, #1
 5226 0060 6265     		str	r2, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5227              		.loc 1 4560 0
 5228 0062 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5229              		.loc 1 4585 0
 5230 0064 F4E7     		b	.L462
 5231              	.L466:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5232              		.loc 1 4588 0
 5233 0066 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5234              		.loc 1 4560 0
 5235 0068 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5236              		.loc 1 4589 0
 5237 006a F1E7     		b	.L462
 5238              	.L473:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5239              		.loc 1 4599 0
 5240 006c 0025     		movs	r5, #0
 5241 006e EFE7     		b	.L462
 5242              	.LVL506:
 5243              	.L475:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5244              		.loc 1 4615 0
 5245 0070 261D     		adds	r6, r4, #4
 5246 0072 3000     		movs	r0, r6
 5247 0074 FFF7FEFF 		bl	uxListRemove
 5248              	.LVL507:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5249              		.loc 1 4616 0
 5250 0078 E36A     		ldr	r3, [r4, #44]
 5251 007a 0D4A     		ldr	r2, .L476
 5252 007c 1268     		ldr	r2, [r2]
 5253 007e 9342     		cmp	r3, r2
 5254 0080 01D9     		bls	.L469
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5255              		.loc 1 4616 0 is_stmt 0 discriminator 1
 5256 0082 0B4A     		ldr	r2, .L476
 5257 0084 1360     		str	r3, [r2]
 5258              	.L469:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 192


 5259              		.loc 1 4616 0 discriminator 3
 5260 0086 1420     		movs	r0, #20
 5261 0088 5843     		muls	r0, r3
 5262 008a 0A4B     		ldr	r3, .L476+4
 5263 008c C018     		adds	r0, r0, r3
 5264 008e 3100     		movs	r1, r6
 5265 0090 FFF7FEFF 		bl	vListInsertEnd
 5266              	.LVL508:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5267              		.loc 1 4619 0 is_stmt 1 discriminator 3
 5268 0094 A36A     		ldr	r3, [r4, #40]
 5269 0096 002B     		cmp	r3, #0
 5270 0098 01D0     		beq	.L470
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5271              		.loc 1 4619 0 is_stmt 0 discriminator 1
 5272              		.syntax divided
 5273              	@ 4619 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5274 009a 72B6     		 cpsid i 
 5275              	@ 0 "" 2
 5276              		.thumb
 5277              		.syntax unified
 5278              	.L471:
 5279 009c FEE7     		b	.L471
 5280              	.L470:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5281              		.loc 1 4637 0 is_stmt 1
 5282 009e E26A     		ldr	r2, [r4, #44]
 5283 00a0 054B     		ldr	r3, .L476+8
 5284 00a2 1B68     		ldr	r3, [r3]
 5285 00a4 DB6A     		ldr	r3, [r3, #44]
 5286 00a6 9A42     		cmp	r2, r3
 5287 00a8 D4D9     		bls	.L468
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5288              		.loc 1 4641 0
 5289 00aa FFF7FEFF 		bl	vPortYield
 5290              	.LVL509:
 5291 00ae D1E7     		b	.L468
 5292              	.L477:
 5293              		.align	2
 5294              	.L476:
 5295 00b0 00000000 		.word	.LANCHOR12
 5296 00b4 00000000 		.word	pxReadyTasksLists
 5297 00b8 00000000 		.word	.LANCHOR9
 5298              		.cfi_endproc
 5299              	.LFE55:
 5301              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5302              		.align	1
 5303              		.global	xTaskGenericNotifyFromISR
 5304              		.syntax unified
 5305              		.code	16
 5306              		.thumb_func
 5307              		.fpu softvfp
 5309              	xTaskGenericNotifyFromISR:
 5310              	.LFB56:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5311              		.loc 1 4664 0
 5312              		.cfi_startproc
ARM GAS  /tmp/ccyt1kA6.s 			page 193


 5313              		@ args = 4, pretend = 0, frame = 8
 5314              		@ frame_needed = 0, uses_anonymous_args = 0
 5315              	.LVL510:
 5316 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 5317              	.LCFI48:
 5318              		.cfi_def_cfa_offset 20
 5319              		.cfi_offset 4, -20
 5320              		.cfi_offset 5, -16
 5321              		.cfi_offset 6, -12
 5322              		.cfi_offset 7, -8
 5323              		.cfi_offset 14, -4
 5324 0002 83B0     		sub	sp, sp, #12
 5325              	.LCFI49:
 5326              		.cfi_def_cfa_offset 32
 5327 0004 0400     		movs	r4, r0
 5328 0006 0F00     		movs	r7, r1
 5329 0008 1600     		movs	r6, r2
 5330 000a 1D00     		movs	r5, r3
 5331              	.LVL511:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5332              		.loc 1 4670 0
 5333 000c 0028     		cmp	r0, #0
 5334 000e 01D1     		bne	.L479
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5335              		.loc 1 4670 0 is_stmt 0 discriminator 1
 5336              		.syntax divided
 5337              	@ 4670 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5338 0010 72B6     		 cpsid i 
 5339              	@ 0 "" 2
 5340              		.thumb
 5341              		.syntax unified
 5342              	.L480:
 5343 0012 FEE7     		b	.L480
 5344              	.L479:
 5345              	.LVL512:
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5346              		.loc 1 4692 0 is_stmt 1
 5347 0014 FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 5348              	.LVL513:
 5349 0018 0190     		str	r0, [sp, #4]
 5350              	.LVL514:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5351              		.loc 1 4694 0
 5352 001a 002D     		cmp	r5, #0
 5353 001c 01D0     		beq	.L481
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5354              		.loc 1 4696 0
 5355 001e 636D     		ldr	r3, [r4, #84]
 5356 0020 2B60     		str	r3, [r5]
 5357              	.L481:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5358              		.loc 1 4699 0
 5359 0022 5822     		movs	r2, #88
 5360 0024 A35C     		ldrb	r3, [r4, r2]
 5361 0026 DBB2     		uxtb	r3, r3
 5362              	.LVL515:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccyt1kA6.s 			page 194


 5363              		.loc 1 4700 0
 5364 0028 0221     		movs	r1, #2
 5365 002a A154     		strb	r1, [r4, r2]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5366              		.loc 1 4702 0
 5367 002c 022E     		cmp	r6, #2
 5368 002e 18D0     		beq	.L483
 5369 0030 08D9     		bls	.L497
 5370 0032 032E     		cmp	r6, #3
 5371 0034 1AD0     		beq	.L486
 5372 0036 042E     		cmp	r6, #4
 5373 0038 06D1     		bne	.L495
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5374              		.loc 1 4717 0
 5375 003a 022B     		cmp	r3, #2
 5376 003c 19D0     		beq	.L496
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5377              		.loc 1 4719 0
 5378 003e 6765     		str	r7, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5379              		.loc 1 4667 0
 5380 0040 0127     		movs	r7, #1
 5381              	.LVL516:
 5382 0042 07E0     		b	.L482
 5383              	.LVL517:
 5384              	.L497:
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5385              		.loc 1 4702 0
 5386 0044 012E     		cmp	r6, #1
 5387 0046 01D0     		beq	.L485
 5388              	.L495:
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5389              		.loc 1 4667 0
 5390 0048 0127     		movs	r7, #1
 5391              	.LVL518:
 5392 004a 03E0     		b	.L482
 5393              	.LVL519:
 5394              	.L485:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5395              		.loc 1 4705 0
 5396 004c 626D     		ldr	r2, [r4, #84]
 5397 004e 3A43     		orrs	r2, r7
 5398 0050 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5399              		.loc 1 4667 0
 5400 0052 0127     		movs	r7, #1
 5401              	.LVL520:
 5402              	.L482:
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5403              		.loc 1 4738 0
 5404 0054 012B     		cmp	r3, #1
 5405 0056 30D1     		bne	.L488
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5406              		.loc 1 4741 0
 5407 0058 A36A     		ldr	r3, [r4, #40]
 5408              	.LVL521:
 5409 005a 002B     		cmp	r3, #0
ARM GAS  /tmp/ccyt1kA6.s 			page 195


 5410 005c 0BD0     		beq	.L489
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5411              		.loc 1 4741 0 is_stmt 0 discriminator 1
 5412              		.syntax divided
 5413              	@ 4741 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5414 005e 72B6     		 cpsid i 
 5415              	@ 0 "" 2
 5416              		.thumb
 5417              		.syntax unified
 5418              	.L490:
 5419 0060 FEE7     		b	.L490
 5420              	.LVL522:
 5421              	.L483:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5422              		.loc 1 4709 0 is_stmt 1
 5423 0062 626D     		ldr	r2, [r4, #84]
 5424 0064 0132     		adds	r2, r2, #1
 5425 0066 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5426              		.loc 1 4667 0
 5427 0068 0127     		movs	r7, #1
 5428              	.LVL523:
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5429              		.loc 1 4710 0
 5430 006a F3E7     		b	.L482
 5431              	.LVL524:
 5432              	.L486:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5433              		.loc 1 4713 0
 5434 006c 6765     		str	r7, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5435              		.loc 1 4667 0
 5436 006e 0127     		movs	r7, #1
 5437              	.LVL525:
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5438              		.loc 1 4714 0
 5439 0070 F0E7     		b	.L482
 5440              	.LVL526:
 5441              	.L496:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5442              		.loc 1 4724 0
 5443 0072 0027     		movs	r7, #0
 5444              	.LVL527:
 5445 0074 EEE7     		b	.L482
 5446              	.LVL528:
 5447              	.L489:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5448              		.loc 1 4743 0
 5449 0076 194B     		ldr	r3, .L498
 5450 0078 1B68     		ldr	r3, [r3]
 5451 007a 002B     		cmp	r3, #0
 5452 007c 23D1     		bne	.L491
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5453              		.loc 1 4745 0
 5454 007e 261D     		adds	r6, r4, #4
 5455 0080 3000     		movs	r0, r6
 5456              	.LVL529:
ARM GAS  /tmp/ccyt1kA6.s 			page 196


 5457 0082 FFF7FEFF 		bl	uxListRemove
 5458              	.LVL530:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5459              		.loc 1 4746 0
 5460 0086 E36A     		ldr	r3, [r4, #44]
 5461 0088 154A     		ldr	r2, .L498+4
 5462 008a 1268     		ldr	r2, [r2]
 5463 008c 9342     		cmp	r3, r2
 5464 008e 01D9     		bls	.L492
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5465              		.loc 1 4746 0 is_stmt 0 discriminator 1
 5466 0090 134A     		ldr	r2, .L498+4
 5467 0092 1360     		str	r3, [r2]
 5468              	.L492:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5469              		.loc 1 4746 0 discriminator 3
 5470 0094 1420     		movs	r0, #20
 5471 0096 5843     		muls	r0, r3
 5472 0098 124B     		ldr	r3, .L498+8
 5473 009a C018     		adds	r0, r0, r3
 5474 009c 3100     		movs	r1, r6
 5475 009e FFF7FEFF 		bl	vListInsertEnd
 5476              	.LVL531:
 5477              	.L493:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5478              		.loc 1 4755 0 is_stmt 1
 5479 00a2 E26A     		ldr	r2, [r4, #44]
 5480 00a4 104B     		ldr	r3, .L498+12
 5481 00a6 1B68     		ldr	r3, [r3]
 5482 00a8 DB6A     		ldr	r3, [r3, #44]
 5483 00aa 9A42     		cmp	r2, r3
 5484 00ac 05D9     		bls	.L488
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5485              		.loc 1 4759 0
 5486 00ae 089B     		ldr	r3, [sp, #32]
 5487 00b0 002B     		cmp	r3, #0
 5488 00b2 0ED0     		beq	.L494
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5489              		.loc 1 4761 0
 5490 00b4 0123     		movs	r3, #1
 5491 00b6 089A     		ldr	r2, [sp, #32]
 5492 00b8 1360     		str	r3, [r2]
 5493              	.L488:
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5494              		.loc 1 4777 0
 5495 00ba 0198     		ldr	r0, [sp, #4]
 5496 00bc FFF7FEFF 		bl	vClearInterruptMaskFromISR
 5497              	.LVL532:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5498              		.loc 1 4780 0
 5499 00c0 3800     		movs	r0, r7
 5500 00c2 03B0     		add	sp, sp, #12
 5501              		@ sp needed
 5502              	.LVL533:
 5503              	.LVL534:
 5504              	.LVL535:
 5505 00c4 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccyt1kA6.s 			page 197


 5506              	.LVL536:
 5507              	.L491:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5508              		.loc 1 4752 0
 5509 00c6 2100     		movs	r1, r4
 5510 00c8 1831     		adds	r1, r1, #24
 5511 00ca 0848     		ldr	r0, .L498+16
 5512              	.LVL537:
 5513 00cc FFF7FEFF 		bl	vListInsertEnd
 5514              	.LVL538:
 5515 00d0 E7E7     		b	.L493
 5516              	.L494:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5517              		.loc 1 4768 0
 5518 00d2 074B     		ldr	r3, .L498+20
 5519 00d4 0122     		movs	r2, #1
 5520 00d6 1A60     		str	r2, [r3]
 5521 00d8 EFE7     		b	.L488
 5522              	.L499:
 5523 00da C046     		.align	2
 5524              	.L498:
 5525 00dc 00000000 		.word	.LANCHOR15
 5526 00e0 00000000 		.word	.LANCHOR12
 5527 00e4 00000000 		.word	pxReadyTasksLists
 5528 00e8 00000000 		.word	.LANCHOR9
 5529 00ec 00000000 		.word	.LANCHOR1
 5530 00f0 00000000 		.word	.LANCHOR18
 5531              		.cfi_endproc
 5532              	.LFE56:
 5534              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5535              		.align	1
 5536              		.global	vTaskNotifyGiveFromISR
 5537              		.syntax unified
 5538              		.code	16
 5539              		.thumb_func
 5540              		.fpu softvfp
 5542              	vTaskNotifyGiveFromISR:
 5543              	.LFB57:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5544              		.loc 1 4788 0
 5545              		.cfi_startproc
 5546              		@ args = 0, pretend = 0, frame = 0
 5547              		@ frame_needed = 0, uses_anonymous_args = 0
 5548              	.LVL539:
 5549 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5550              	.LCFI50:
 5551              		.cfi_def_cfa_offset 24
 5552              		.cfi_offset 3, -24
 5553              		.cfi_offset 4, -20
 5554              		.cfi_offset 5, -16
 5555              		.cfi_offset 6, -12
 5556              		.cfi_offset 7, -8
 5557              		.cfi_offset 14, -4
 5558 0002 0400     		movs	r4, r0
 5559 0004 0F00     		movs	r7, r1
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5560              		.loc 1 4793 0
ARM GAS  /tmp/ccyt1kA6.s 			page 198


 5561 0006 0028     		cmp	r0, #0
 5562 0008 01D1     		bne	.L501
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5563              		.loc 1 4793 0 is_stmt 0 discriminator 1
 5564              		.syntax divided
 5565              	@ 4793 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5566 000a 72B6     		 cpsid i 
 5567              	@ 0 "" 2
 5568              		.thumb
 5569              		.syntax unified
 5570              	.L502:
 5571 000c FEE7     		b	.L502
 5572              	.L501:
 5573              	.LVL540:
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5574              		.loc 1 4815 0 is_stmt 1
 5575 000e FFF7FEFF 		bl	ulSetInterruptMaskFromISR
 5576              	.LVL541:
 5577 0012 0600     		movs	r6, r0
 5578              	.LVL542:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5579              		.loc 1 4817 0
 5580 0014 5823     		movs	r3, #88
 5581 0016 E25C     		ldrb	r2, [r4, r3]
 5582              	.LVL543:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5583              		.loc 1 4818 0
 5584 0018 0221     		movs	r1, #2
 5585 001a E154     		strb	r1, [r4, r3]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5586              		.loc 1 4822 0
 5587 001c 636D     		ldr	r3, [r4, #84]
 5588 001e 0133     		adds	r3, r3, #1
 5589 0020 6365     		str	r3, [r4, #84]
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5590              		.loc 1 4828 0
 5591 0022 012A     		cmp	r2, #1
 5592 0024 24D1     		bne	.L503
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5593              		.loc 1 4831 0
 5594 0026 A36A     		ldr	r3, [r4, #40]
 5595 0028 002B     		cmp	r3, #0
 5596 002a 01D0     		beq	.L504
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5597              		.loc 1 4831 0 is_stmt 0 discriminator 1
 5598              		.syntax divided
 5599              	@ 4831 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5600 002c 72B6     		 cpsid i 
 5601              	@ 0 "" 2
 5602              		.thumb
 5603              		.syntax unified
 5604              	.L505:
 5605 002e FEE7     		b	.L505
 5606              	.L504:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5607              		.loc 1 4833 0 is_stmt 1
 5608 0030 164B     		ldr	r3, .L510
ARM GAS  /tmp/ccyt1kA6.s 			page 199


 5609 0032 1B68     		ldr	r3, [r3]
 5610 0034 002B     		cmp	r3, #0
 5611 0036 1FD1     		bne	.L506
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5612              		.loc 1 4835 0
 5613 0038 251D     		adds	r5, r4, #4
 5614 003a 2800     		movs	r0, r5
 5615              	.LVL544:
 5616 003c FFF7FEFF 		bl	uxListRemove
 5617              	.LVL545:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5618              		.loc 1 4836 0
 5619 0040 E36A     		ldr	r3, [r4, #44]
 5620 0042 134A     		ldr	r2, .L510+4
 5621 0044 1268     		ldr	r2, [r2]
 5622 0046 9342     		cmp	r3, r2
 5623 0048 01D9     		bls	.L507
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5624              		.loc 1 4836 0 is_stmt 0 discriminator 1
 5625 004a 114A     		ldr	r2, .L510+4
 5626 004c 1360     		str	r3, [r2]
 5627              	.L507:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5628              		.loc 1 4836 0 discriminator 3
 5629 004e 1420     		movs	r0, #20
 5630 0050 5843     		muls	r0, r3
 5631 0052 104B     		ldr	r3, .L510+8
 5632 0054 C018     		adds	r0, r0, r3
 5633 0056 2900     		movs	r1, r5
 5634 0058 FFF7FEFF 		bl	vListInsertEnd
 5635              	.LVL546:
 5636              	.L508:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5637              		.loc 1 4845 0 is_stmt 1
 5638 005c E26A     		ldr	r2, [r4, #44]
 5639 005e 0E4B     		ldr	r3, .L510+12
 5640 0060 1B68     		ldr	r3, [r3]
 5641 0062 DB6A     		ldr	r3, [r3, #44]
 5642 0064 9A42     		cmp	r2, r3
 5643 0066 03D9     		bls	.L503
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5644              		.loc 1 4849 0
 5645 0068 002F     		cmp	r7, #0
 5646 006a 0BD0     		beq	.L509
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5647              		.loc 1 4851 0
 5648 006c 0123     		movs	r3, #1
 5649 006e 3B60     		str	r3, [r7]
 5650              	.L503:
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5651              		.loc 1 4867 0
 5652 0070 3000     		movs	r0, r6
 5653 0072 FFF7FEFF 		bl	vClearInterruptMaskFromISR
 5654              	.LVL547:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5655              		.loc 1 4868 0
 5656              		@ sp needed
ARM GAS  /tmp/ccyt1kA6.s 			page 200


 5657              	.LVL548:
 5658              	.LVL549:
 5659              	.LVL550:
 5660 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5661              	.LVL551:
 5662              	.L506:
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5663              		.loc 1 4842 0
 5664 0078 2100     		movs	r1, r4
 5665 007a 1831     		adds	r1, r1, #24
 5666 007c 0748     		ldr	r0, .L510+16
 5667              	.LVL552:
 5668 007e FFF7FEFF 		bl	vListInsertEnd
 5669              	.LVL553:
 5670 0082 EBE7     		b	.L508
 5671              	.L509:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5672              		.loc 1 4858 0
 5673 0084 064B     		ldr	r3, .L510+20
 5674 0086 0122     		movs	r2, #1
 5675 0088 1A60     		str	r2, [r3]
 5676 008a F1E7     		b	.L503
 5677              	.L511:
 5678              		.align	2
 5679              	.L510:
 5680 008c 00000000 		.word	.LANCHOR15
 5681 0090 00000000 		.word	.LANCHOR12
 5682 0094 00000000 		.word	pxReadyTasksLists
 5683 0098 00000000 		.word	.LANCHOR9
 5684 009c 00000000 		.word	.LANCHOR1
 5685 00a0 00000000 		.word	.LANCHOR18
 5686              		.cfi_endproc
 5687              	.LFE57:
 5689              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5690              		.align	1
 5691              		.global	xTaskNotifyStateClear
 5692              		.syntax unified
 5693              		.code	16
 5694              		.thumb_func
 5695              		.fpu softvfp
 5697              	xTaskNotifyStateClear:
 5698              	.LFB58:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5699              		.loc 1 4877 0
 5700              		.cfi_startproc
 5701              		@ args = 0, pretend = 0, frame = 0
 5702              		@ frame_needed = 0, uses_anonymous_args = 0
 5703              	.LVL554:
 5704 0000 10B5     		push	{r4, lr}
 5705              	.LCFI51:
 5706              		.cfi_def_cfa_offset 8
 5707              		.cfi_offset 4, -8
 5708              		.cfi_offset 14, -4
 5709 0002 041E     		subs	r4, r0, #0
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5710              		.loc 1 4883 0
 5711 0004 0AD0     		beq	.L516
ARM GAS  /tmp/ccyt1kA6.s 			page 201


 5712              	.LVL555:
 5713              	.L513:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5714              		.loc 1 4885 0 discriminator 4
 5715 0006 FFF7FEFF 		bl	vPortEnterCritical
 5716              	.LVL556:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5717              		.loc 1 4887 0 discriminator 4
 5718 000a 5823     		movs	r3, #88
 5719 000c E35C     		ldrb	r3, [r4, r3]
 5720 000e 022B     		cmp	r3, #2
 5721 0010 07D0     		beq	.L517
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5722              		.loc 1 4894 0
 5723 0012 0024     		movs	r4, #0
 5724              	.LVL557:
 5725              	.L514:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5726              		.loc 1 4897 0
 5727 0014 FFF7FEFF 		bl	vPortExitCritical
 5728              	.LVL558:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5729              		.loc 1 4900 0
 5730 0018 2000     		movs	r0, r4
 5731              		@ sp needed
 5732              	.LVL559:
 5733 001a 10BD     		pop	{r4, pc}
 5734              	.LVL560:
 5735              	.L516:
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5736              		.loc 1 4883 0 discriminator 1
 5737 001c 034B     		ldr	r3, .L518
 5738 001e 1C68     		ldr	r4, [r3]
 5739              	.LVL561:
 5740 0020 F1E7     		b	.L513
 5741              	.LVL562:
 5742              	.L517:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5743              		.loc 1 4889 0
 5744 0022 5633     		adds	r3, r3, #86
 5745 0024 0022     		movs	r2, #0
 5746 0026 E254     		strb	r2, [r4, r3]
 5747              	.LVL563:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5748              		.loc 1 4890 0
 5749 0028 0124     		movs	r4, #1
 5750              	.LVL564:
 5751 002a F3E7     		b	.L514
 5752              	.L519:
 5753              		.align	2
 5754              	.L518:
 5755 002c 00000000 		.word	.LANCHOR9
 5756              		.cfi_endproc
 5757              	.LFE58:
 5759              		.global	pxCurrentTCB
 5760              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5761              		.align	2
ARM GAS  /tmp/ccyt1kA6.s 			page 202


 5762              		.set	.LANCHOR9,. + 0
 5765              	pxCurrentTCB:
 5766 0000 00000000 		.space	4
 5767              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5768              		.align	2
 5769              		.set	.LANCHOR2,. + 0
 5772              	pxDelayedTaskList:
 5773 0000 00000000 		.space	4
 5774              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5775              		.align	2
 5776              		.set	.LANCHOR7,. + 0
 5779              	pxOverflowDelayedTaskList:
 5780 0000 00000000 		.space	4
 5781              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5782              		.align	2
 5785              	pxReadyTasksLists:
 5786 0000 00000000 		.space	1120
 5786      00000000 
 5786      00000000 
 5786      00000000 
 5786      00000000 
 5787              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5788              		.align	2
 5789              		.set	.LANCHOR8,. + 0
 5792              	uxCurrentNumberOfTasks:
 5793 0000 00000000 		.space	4
 5794              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5795              		.align	2
 5796              		.set	.LANCHOR13,. + 0
 5799              	uxDeletedTasksWaitingCleanUp:
 5800 0000 00000000 		.space	4
 5801              		.section	.bss.uxPendedTicks,"aw",%nobits
 5802              		.align	2
 5803              		.set	.LANCHOR17,. + 0
 5806              	uxPendedTicks:
 5807 0000 00000000 		.space	4
 5808              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5809              		.align	2
 5810              		.set	.LANCHOR15,. + 0
 5813              	uxSchedulerSuspended:
 5814 0000 00000000 		.space	4
 5815              		.section	.bss.uxTaskNumber,"aw",%nobits
 5816              		.align	2
 5817              		.set	.LANCHOR11,. + 0
 5820              	uxTaskNumber:
 5821 0000 00000000 		.space	4
 5822              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5823              		.align	2
 5824              		.set	.LANCHOR12,. + 0
 5827              	uxTopReadyPriority:
 5828 0000 00000000 		.space	4
 5829              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5830              		.align	2
 5831              		.set	.LANCHOR4,. + 0
 5834              	xDelayedTaskList1:
 5835 0000 00000000 		.space	20
 5835      00000000 
ARM GAS  /tmp/ccyt1kA6.s 			page 203


 5835      00000000 
 5835      00000000 
 5835      00000000 
 5836              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5837              		.align	2
 5838              		.set	.LANCHOR5,. + 0
 5841              	xDelayedTaskList2:
 5842 0000 00000000 		.space	20
 5842      00000000 
 5842      00000000 
 5842      00000000 
 5842      00000000 
 5843              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5844              		.align	2
 5845              		.set	.LANCHOR3,. + 0
 5848              	xNextTaskUnblockTime:
 5849 0000 00000000 		.space	4
 5850              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5851              		.align	2
 5852              		.set	.LANCHOR16,. + 0
 5855              	xNumOfOverflows:
 5856 0000 00000000 		.space	4
 5857              		.section	.bss.xPendingReadyList,"aw",%nobits
 5858              		.align	2
 5859              		.set	.LANCHOR1,. + 0
 5862              	xPendingReadyList:
 5863 0000 00000000 		.space	20
 5863      00000000 
 5863      00000000 
 5863      00000000 
 5863      00000000 
 5864              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5865              		.align	2
 5866              		.set	.LANCHOR10,. + 0
 5869              	xSchedulerRunning:
 5870 0000 00000000 		.space	4
 5871              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5872              		.align	2
 5873              		.set	.LANCHOR0,. + 0
 5876              	xSuspendedTaskList:
 5877 0000 00000000 		.space	20
 5877      00000000 
 5877      00000000 
 5877      00000000 
 5877      00000000 
 5878              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5879              		.align	2
 5880              		.set	.LANCHOR6,. + 0
 5883              	xTasksWaitingTermination:
 5884 0000 00000000 		.space	20
 5884      00000000 
 5884      00000000 
 5884      00000000 
 5884      00000000 
 5885              		.section	.bss.xTickCount,"aw",%nobits
 5886              		.align	2
 5887              		.set	.LANCHOR14,. + 0
ARM GAS  /tmp/ccyt1kA6.s 			page 204


 5890              	xTickCount:
 5891 0000 00000000 		.space	4
 5892              		.section	.bss.xYieldPending,"aw",%nobits
 5893              		.align	2
 5894              		.set	.LANCHOR18,. + 0
 5897              	xYieldPending:
 5898 0000 00000000 		.space	4
 5899              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 5900              		.align	2
 5901              	.LC53:
 5902 0000 49444C45 		.ascii	"IDLE\000"
 5902      00
 5903              		.text
 5904              	.Letext0:
 5905              		.file 2 "/opt/gcc-arm-none-eabi-7-2018-q2-update/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 5906              		.file 3 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/machine/_default_types.h"
 5907              		.file 4 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/lock.h"
 5908              		.file 5 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_types.h"
 5909              		.file 6 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/reent.h"
 5910              		.file 7 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/stdlib.h"
 5911              		.file 8 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/sys/_stdint.h"
 5912              		.file 9 "Inc/FreeRTOSConfig.h"
 5913              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5914              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM0/portmacro.h"
 5915              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 5916              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5917              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5918              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 5919              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 5920              		.file 17 "/opt/gcc-arm-none-eabi-7-2018-q2-update/arm-none-eabi/include/string.h"
ARM GAS  /tmp/ccyt1kA6.s 			page 205


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccyt1kA6.s:16     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccyt1kA6.s:22     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccyt1kA6.s:85     .text.prvTaskIsTaskSuspended:000000000000002c $d
     /tmp/ccyt1kA6.s:91     .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccyt1kA6.s:97     .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccyt1kA6.s:135    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccyt1kA6.s:141    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccyt1kA6.s:179    .text.prvResetNextTaskUnblockTime:0000000000000024 $d
     /tmp/ccyt1kA6.s:185    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccyt1kA6.s:191    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccyt1kA6.s:334    .text.prvInitialiseNewTask:0000000000000098 $d
     /tmp/ccyt1kA6.s:339    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccyt1kA6.s:345    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccyt1kA6.s:414    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccyt1kA6.s:5785   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccyt1kA6.s:426    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccyt1kA6.s:432    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccyt1kA6.s:544    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/ccyt1kA6.s:554    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccyt1kA6.s:560    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccyt1kA6.s:618    .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccyt1kA6.s:624    .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccyt1kA6.s:681    .text.prvCheckTasksWaitingTermination:0000000000000038 $d
     /tmp/ccyt1kA6.s:688    .text.prvIdleTask:0000000000000000 $t
     /tmp/ccyt1kA6.s:694    .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccyt1kA6.s:724    .text.prvIdleTask:0000000000000014 $d
     /tmp/ccyt1kA6.s:729    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccyt1kA6.s:735    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccyt1kA6.s:826    .text.prvAddCurrentTaskToDelayedList:0000000000000064 $d
     /tmp/ccyt1kA6.s:836    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccyt1kA6.s:843    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccyt1kA6.s:938    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccyt1kA6.s:945    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccyt1kA6.s:1053   .text.vTaskDelete:0000000000000000 $t
     /tmp/ccyt1kA6.s:1060   .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccyt1kA6.s:1184   .text.vTaskDelete:0000000000000084 $d
     /tmp/ccyt1kA6.s:1195   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccyt1kA6.s:1202   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccyt1kA6.s:1311   .text.eTaskGetState:0000000000000064 $d
     /tmp/ccyt1kA6.s:1320   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccyt1kA6.s:1327   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccyt1kA6.s:1369   .text.uxTaskPriorityGet:000000000000001c $d
     /tmp/ccyt1kA6.s:1374   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccyt1kA6.s:1381   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccyt1kA6.s:1423   .text.uxTaskPriorityGetFromISR:000000000000001c $d
     /tmp/ccyt1kA6.s:1428   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccyt1kA6.s:1435   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccyt1kA6.s:1591   .text.vTaskPrioritySet:00000000000000a4 $d
     /tmp/ccyt1kA6.s:1598   .text.vTaskResume:0000000000000000 $t
     /tmp/ccyt1kA6.s:1605   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccyt1kA6.s:1696   .text.vTaskResume:000000000000005c $d
     /tmp/ccyt1kA6.s:1703   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccyt1kA6.s:1710   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccyt1kA6.s:1824   .text.xTaskResumeFromISR:0000000000000074 $d
     /tmp/ccyt1kA6.s:1833   .text.vTaskStartScheduler:0000000000000000 $t
ARM GAS  /tmp/ccyt1kA6.s 			page 206


     /tmp/ccyt1kA6.s:1840   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccyt1kA6.s:1946   .text.vTaskStartScheduler:0000000000000064 $d
     /tmp/ccyt1kA6.s:1955   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccyt1kA6.s:1962   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccyt1kA6.s:1993   .text.vTaskEndScheduler:0000000000000010 $d
     /tmp/ccyt1kA6.s:1998   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccyt1kA6.s:2005   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccyt1kA6.s:2023   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccyt1kA6.s:2028   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccyt1kA6.s:2035   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccyt1kA6.s:2052   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccyt1kA6.s:2057   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccyt1kA6.s:2064   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccyt1kA6.s:2082   .text.xTaskGetTickCountFromISR:0000000000000008 $d
     /tmp/ccyt1kA6.s:2087   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccyt1kA6.s:2094   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccyt1kA6.s:2110   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccyt1kA6.s:2115   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccyt1kA6.s:2122   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccyt1kA6.s:2165   .text.pcTaskGetName:0000000000000018 $d
     /tmp/ccyt1kA6.s:2170   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccyt1kA6.s:2177   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccyt1kA6.s:2385   .text.xTaskIncrementTick:00000000000000e8 $d
     /tmp/ccyt1kA6.s:2400   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccyt1kA6.s:2407   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccyt1kA6.s:2587   .text.xTaskResumeAll:00000000000000c8 $d
     /tmp/ccyt1kA6.s:2599   .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccyt1kA6.s:2606   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccyt1kA6.s:2742   .text.vTaskDelayUntil:000000000000006c $d
     /tmp/ccyt1kA6.s:2749   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccyt1kA6.s:2756   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccyt1kA6.s:2814   .text.vTaskDelay:000000000000002c $d
     /tmp/ccyt1kA6.s:2819   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccyt1kA6.s:2826   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccyt1kA6.s:2935   .text.vTaskSwitchContext:0000000000000078 $d
     /tmp/ccyt1kA6.s:2946   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccyt1kA6.s:2953   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccyt1kA6.s:3094   .text.vTaskSuspend:0000000000000098 $d
     /tmp/ccyt1kA6.s:3103   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccyt1kA6.s:3110   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccyt1kA6.s:3155   .text.vTaskPlaceOnEventList:0000000000000020 $d
     /tmp/ccyt1kA6.s:3160   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccyt1kA6.s:3167   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccyt1kA6.s:3236   .text.vTaskPlaceOnUnorderedEventList:0000000000000038 $d
     /tmp/ccyt1kA6.s:3242   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccyt1kA6.s:3249   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccyt1kA6.s:3307   .text.vTaskPlaceOnEventListRestricted:000000000000002c $d
     /tmp/ccyt1kA6.s:3312   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccyt1kA6.s:3319   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccyt1kA6.s:3424   .text.xTaskRemoveFromEventList:000000000000006c $d
     /tmp/ccyt1kA6.s:3434   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccyt1kA6.s:3441   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccyt1kA6.s:3540   .text.vTaskRemoveFromUnorderedEventList:0000000000000060 $d
     /tmp/ccyt1kA6.s:3549   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccyt1kA6.s:3556   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccyt1kA6.s:3602   .text.vTaskSetTimeOutState:0000000000000020 $d
     /tmp/ccyt1kA6.s:3608   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
ARM GAS  /tmp/ccyt1kA6.s 			page 207


     /tmp/ccyt1kA6.s:3615   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccyt1kA6.s:3637   .text.vTaskInternalSetTimeOutState:0000000000000010 $d
     /tmp/ccyt1kA6.s:3643   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccyt1kA6.s:3650   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccyt1kA6.s:3770   .text.xTaskCheckForTimeOut:0000000000000060 $d
     /tmp/ccyt1kA6.s:3777   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccyt1kA6.s:3784   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccyt1kA6.s:3801   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccyt1kA6.s:3806   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccyt1kA6.s:3813   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccyt1kA6.s:3843   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccyt1kA6.s:3850   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccyt1kA6.s:3873   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccyt1kA6.s:3880   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccyt1kA6.s:4001   .text.vTaskGetInfo:0000000000000078 $d
     /tmp/ccyt1kA6.s:4006   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccyt1kA6.s:4012   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccyt1kA6.s:4132   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccyt1kA6.s:4139   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccyt1kA6.s:4266   .text.uxTaskGetSystemState:0000000000000098 $d
     /tmp/ccyt1kA6.s:4276   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccyt1kA6.s:4283   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccyt1kA6.s:4319   .text.uxTaskGetStackHighWaterMark:0000000000000014 $d
     /tmp/ccyt1kA6.s:4324   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccyt1kA6.s:4331   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccyt1kA6.s:4348   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccyt1kA6.s:4353   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccyt1kA6.s:4360   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccyt1kA6.s:4397   .text.xTaskGetSchedulerState:000000000000001c $d
     /tmp/ccyt1kA6.s:4403   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccyt1kA6.s:4410   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccyt1kA6.s:4531   .text.xTaskPriorityInherit:0000000000000088 $d
     /tmp/ccyt1kA6.s:4538   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccyt1kA6.s:4545   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccyt1kA6.s:4661   .text.xTaskPriorityDisinherit:0000000000000068 $d
     /tmp/ccyt1kA6.s:4668   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccyt1kA6.s:4675   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccyt1kA6.s:4797   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000074 $d
     /tmp/ccyt1kA6.s:4804   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccyt1kA6.s:4811   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccyt1kA6.s:4836   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccyt1kA6.s:4841   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccyt1kA6.s:4848   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccyt1kA6.s:4876   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccyt1kA6.s:4881   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccyt1kA6.s:4888   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccyt1kA6.s:4982   .text.ulTaskNotifyTake:0000000000000068 $d
     /tmp/ccyt1kA6.s:4987   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccyt1kA6.s:4994   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccyt1kA6.s:5107   .text.xTaskNotifyWait:0000000000000080 $d
     /tmp/ccyt1kA6.s:5112   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccyt1kA6.s:5119   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccyt1kA6.s:5295   .text.xTaskGenericNotify:00000000000000b0 $d
     /tmp/ccyt1kA6.s:5302   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccyt1kA6.s:5309   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccyt1kA6.s:5525   .text.xTaskGenericNotifyFromISR:00000000000000dc $d
     /tmp/ccyt1kA6.s:5535   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
ARM GAS  /tmp/ccyt1kA6.s 			page 208


     /tmp/ccyt1kA6.s:5542   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccyt1kA6.s:5680   .text.vTaskNotifyGiveFromISR:000000000000008c $d
     /tmp/ccyt1kA6.s:5690   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccyt1kA6.s:5697   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccyt1kA6.s:5755   .text.xTaskNotifyStateClear:000000000000002c $d
     /tmp/ccyt1kA6.s:5765   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccyt1kA6.s:5761   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccyt1kA6.s:5768   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccyt1kA6.s:5772   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccyt1kA6.s:5775   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccyt1kA6.s:5779   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccyt1kA6.s:5782   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccyt1kA6.s:5788   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccyt1kA6.s:5792   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccyt1kA6.s:5795   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccyt1kA6.s:5799   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccyt1kA6.s:5802   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccyt1kA6.s:5806   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccyt1kA6.s:5809   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccyt1kA6.s:5813   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccyt1kA6.s:5816   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccyt1kA6.s:5820   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccyt1kA6.s:5823   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccyt1kA6.s:5827   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccyt1kA6.s:5830   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccyt1kA6.s:5834   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccyt1kA6.s:5837   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccyt1kA6.s:5841   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccyt1kA6.s:5844   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccyt1kA6.s:5848   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccyt1kA6.s:5851   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccyt1kA6.s:5855   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccyt1kA6.s:5858   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccyt1kA6.s:5862   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccyt1kA6.s:5865   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccyt1kA6.s:5869   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccyt1kA6.s:5872   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccyt1kA6.s:5876   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccyt1kA6.s:5879   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccyt1kA6.s:5883   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccyt1kA6.s:5886   .bss.xTickCount:0000000000000000 $d
     /tmp/ccyt1kA6.s:5890   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccyt1kA6.s:5893   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccyt1kA6.s:5897   .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccyt1kA6.s:5900   .rodata.vTaskStartScheduler.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYield
vPortFree
uxListRemove
ARM GAS  /tmp/ccyt1kA6.s 			page 209


vListInsert
pvPortMalloc
ulSetInterruptMaskFromISR
vClearInterruptMaskFromISR
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
